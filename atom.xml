<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NiTaogeTech</title>
  
  <subtitle>Focus on Java, BD and Linux. </subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tech.nitaoge.com/"/>
  <updated>2019-04-20T12:46:44.263Z</updated>
  <id>http://tech.nitaoge.com/</id>
  
  <author>
    <name>中华郑六</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>看破Docker 1.快速安装</title>
    <link href="http://tech.nitaoge.com/p/2a951b2f/"/>
    <id>http://tech.nitaoge.com/p/2a951b2f/</id>
    <published>2019-04-20T11:35:43.000Z</published>
    <updated>2019-04-20T12:46:44.263Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装及卸载"><a href="#安装及卸载" class="headerlink" title="安装及卸载"></a>安装及卸载</h1><h2 id="内核支持"><a href="#内核支持" class="headerlink" title="内核支持"></a>内核支持</h2><p>Docker 对 Linux 内核版本的最低要求是3.10，如果内核版本低于 3.10 会缺少一些运行 Docker 容器的功能。这些比较旧的内核，在一定条件下会导致数据丢失和频繁恐慌错误。</p><p>推荐使用版本号为（3.x.y）的 3.10 Linux 内核版本（或者新的维护版本），保持跟上内核的次要版本更新来确保内核的BUG已经被修复。</p><h2 id="我的环境"><a href="#我的环境" class="headerlink" title="我的环境"></a>我的环境</h2><p>docker版本: 18.09.5<br>内核版本: 3.10.0-862.el7.x86_64<br>系统版本: CentOS Linux release 7.6.1810 (Core)<br>CPU: Intel(R) Core(TM) i3-8100 CPU @ 3.60GHz 4核<br>Memory: 16G<br>Disk: 128G SSD(/)+1T SATA(/disk1)</p><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><blockquote><p>To install Docker CE, you need a maintained version of CentOS 7. </p></blockquote><blockquote><p>Archived versions aren’t supported or tested.<br>The centos-extras repository must be enabled. This repository is enabled by default, but if you have disabled it, you need to re-enable it.</p></blockquote><blockquote><p>The overlay2 storage driver is recommended.</p></blockquote><ul><li><code>centos-extras repository</code> CentOS7默认是开启的，不用管它。</li><li>官方推荐的 <code>overlay2</code> 是一种文件存储驱动，CentOS老版本内核是不支持的，必须升到3.10以上，CentOS7.6默认是支持的，具体原理以后再深入。</li></ul><h2 id="卸载老版本"><a href="#卸载老版本" class="headerlink" title="卸载老版本"></a>卸载老版本</h2><blockquote><p>Older versions of Docker were called docker or docker-engine. If these are installed, uninstall them, along with associated dependencies.<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker <span class="string">\</span></span><br><span class="line">                  docker-client <span class="string">\</span></span><br><span class="line">                  docker-client-latest <span class="string">\</span></span><br><span class="line">                  docker-common <span class="string">\</span></span><br><span class="line">                  docker-latest <span class="string">\</span></span><br><span class="line">                  docker-latest-logrotate <span class="string">\</span></span><br><span class="line">                  docker-logrotate <span class="string">\</span></span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>It’s OK if yum reports that none of these packages are installed.</p></blockquote><blockquote><p>The contents of /var/lib/docker/, including images, containers, volumes, and networks, are preserved. The Docker CE package is now called docker-ce.</p></blockquote><ul><li>在制定规范后docker-engine改为docker-ee（企业版）和docker-ce（社区版）两个版本，所以我选择docker-ce进行安装。</li></ul><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><blockquote><p>You can install Docker CE in different ways, depending on your needs:</p></blockquote><blockquote><ul><li>Most users set up Docker’s repositories and install from them, for ease of installation and upgrade tasks. This is the recommended approach.</li></ul></blockquote><blockquote><ul><li>Some users download the RPM package and install it manually and manage upgrades completely manually. This is useful in situations such as installing Docker on air-gapped systems with no access to the internet.</li></ul></blockquote><blockquote><ul><li>In testing and development environments, some users choose to use automated convenience scripts to install Docker.</li></ul></blockquote><p>可以通过yum源安装，可以下载RPM包安装，也可以使用自动构建脚本安装。<br>既然官方推荐使用yum源方式安装，那就听他的，本文使用yum源安装。</p><blockquote><p>Before you install Docker CE for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.</p></blockquote><blockquote><p>SET UP THE REPOSITORY<br>Install required packages. yum-utils provides the yum-config-manager utility, and device-mapper-persistent-data and lvm2 are required by the devicemapper storage driver.<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-<span class="class"><span class="keyword">data</span> \</span></span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Use the following command to set up the stable repository.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --<span class="built_in">add</span>-repo \</span><br><span class="line">    http<span class="variable">s:</span>//download.docker.<span class="keyword">com</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br></pre></td></tr></table></figure></p></blockquote><p>确保系统中有yum-utils、device-mapper-persistent-data、lvm2工具，CentOS7.6默认是有的，然后添加docker的yum源即可（官方yum源有可能连接失败，可以使用阿里云的）。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># sudo yum-config-manager \</span><br><span class="line">  --<span class="built_in">add</span>-repo \</span><br><span class="line">  http<span class="variable">s:</span>//mirrors.aliyun.<span class="keyword">com</span>/docker-<span class="keyword">ce</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br></pre></td></tr></table></figure></p><h2 id="添加持续集成和测试的版本库"><a href="#添加持续集成和测试的版本库" class="headerlink" title="添加持续集成和测试的版本库"></a>添加持续集成和测试的版本库</h2><blockquote><p>Optional: Enable the nightly or test repositories.</p></blockquote><blockquote><p>These repositories are included in the docker.repo file above but are disabled by default. You can enable them alongside the stable repository. The following command enables the nightly repository.<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-<span class="built_in">config</span>-manager <span class="comment">--enable docker-ce-nightly</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>To enable the test channel, run the following command:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-<span class="built_in">config</span>-manager <span class="comment">--enable docker-ce-test</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>You can disable the nightly or test repository by running the yum-config-manager command with the –disable flag. To re-enable it, use the –enable flag. The following command disables the nightly repository.<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-<span class="built_in">config</span>-manager <span class="comment">--disable docker-ce-nightly</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Learn about nightly and test channels.</p></blockquote><p>默认持续集成的版本和测试的版本在yum源配置文件中是禁用的。<br>我不添加，我只用稳定版……</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>1.install the latest version of Docker CE and containerd, or go to the next step to install a specific version:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>If prompted to accept the GPG key, verify that the fingerprint matches 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35, and if so, accept it.</p></blockquote><blockquote><p>Got multiple Docker repositories?</p><blockquote><p>If you have multiple Docker repositories enabled, installing or updating without specifying a version in the yum install or yum update command always installs the highest possible version, which may not be appropriate for your stability needs.</p></blockquote></blockquote><blockquote><p>Docker is installed but not started. The docker group is created, but no users are added to the group.</p></blockquote><blockquote><p>2.To install a specific version of Docker CE, list the available versions in the repo, then select and install:</p></blockquote><blockquote><blockquote><p>a. List and sort the versions available in your repo. This example sorts results by version number, highest to lowest, and is truncated:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum <span class="keyword">list</span> docker-ce --showduplicates | <span class="keyword">sort</span> -<span class="built_in">r</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><blockquote><p>docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable<br>docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable<br>docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable<br>docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</p></blockquote></blockquote><blockquote><blockquote><p>The list returned depends on which repositories are enabled, and is specific to your version of CentOS (indicated by the .el7 suffix in this example).</p></blockquote></blockquote><blockquote><blockquote><p>b. Install a specific version by its fully qualified package name, which is the package name (docker-ce) plus the version string (2nd column) starting at the first colon (:), up to the first hyphen, separated by a hyphen (-). For example, docker-ce-18.09.1.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-<span class="keyword">ce</span>-<span class="symbol">&lt;VERSION_STRING&gt;</span> docker-<span class="keyword">ce</span>-cli-<span class="symbol">&lt;VERSION_STRING&gt;</span> containerd.io</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><p>Docker is installed but not started. The docker group is created, but no users are added to the group.</p></blockquote><p>可以查看可用版本，然后指定版本安装，安装完是不会启动的，创建了docker组，但是没有用户。</p><ul><li>这里我选择安装最新版。</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><blockquote><p>3.Start Docker.<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="literal">start</span> docker</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.Verify that Docker CE is installed correctly by running the hello-world image.<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><blockquote><p>This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.</p></blockquote></blockquote><blockquote><p>Docker CE is installed and running. You need to use sudo to run Docker commands. Continue to <a href="https://docs.docker.com/install/linux/linux-postinstall/" target="_blank" rel="noopener">Linux postinstall</a> to allow non-privileged users to run Docker commands and for other optional configuration steps.</p></blockquote><ul><li>注意此处启动docker是使用的root用户，以后重点研究一下docker安全问题。</li><li>启动和测试，默认下载个test镜像然后在容器中运行它。</li><li>这里也可以不急着启动，先到Linux postinstall页面查看如何处理安装善后工作。</li><li>我启动之后拉不下来hello-world镜像，所以得配置国内镜像加速。</li></ul><h2 id="安装善后"><a href="#安装善后" class="headerlink" title="安装善后"></a>安装善后</h2><h3 id="配置国内镜像加速"><a href="#配置国内镜像加速" class="headerlink" title="配置国内镜像加速"></a>配置国内镜像加速</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -<span class="selector-tag">p</span> /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon<span class="selector-class">.json</span> &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">  <span class="string">"https://rplu9ros.mirror.aliyuncs.com"</span>,</span><br><span class="line">  <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="用普通用户管理docker"><a href="#用普通用户管理docker" class="headerlink" title="用普通用户管理docker"></a>用普通用户管理docker</h3><blockquote><p>Manage Docker as a non-root user</p><blockquote><p>The Docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. The Docker daemon always runs as the root user.<br>If you don’t want to preface the docker command with sudo, create a Unix group called docker and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the docker group.</p></blockquote></blockquote><p>默认情况下，docker守护进程绑定了一个unix套接字文件来代替tcp套接字，unix套接字<br>属于root用户，其他用户访问必须使用sudo。docker守护进程总是使用root用户启动。<br>如果你不想使用sudo，就建一个docker用户和组（安装后默认建完了），这样当Docker守护进程启动之后，就会创建一个可以让docker组成员访问的unix套接字文件。</p><blockquote><p>Warning</p><blockquote><p>The docker group grants privileges equivalent to the root user. For details on how this impacts security in your system, see Docker Daemon Attack Surface.</p></blockquote></blockquote><p>docker组被授予root同样的权限，如果使用tcp套接字对外开放端口，存在XSS问题。<br>如果您明确决定这样做，也可以通过HTTP公开REST API。但是，如果您这样做，请注意上述安全隐患。确保只能从受信任的网络或VPN访问它，或者使用stunnel和客户端SSL证书等机制进行保护。您还可以使用HTTPS和证书保护API端点。</p><p>守护程序也可能容易受到其他输入的攻击，例如从带有docker load的磁盘加载映像，或者使用docker pull从网络加载。从Docker 1.3.2开始，图像现在在Linux / Unix平台上的chrooted子流程中提取，是更广泛地实现权限分离的第一步。从Docker 1.10.0开始，所有图像都通过其内容的加密校验和进行存储和访问，从而限制了攻击者与现有图像发生冲突的可能性。</p><p>最后，如果您在服务器上运行Docker，建议在服务器上独占运行Docker，并将所有其他服务移动到Docker控制的容器中。当然，保留您喜欢的管理工具（可能至少是SSH服务器）以及现有的监控/监督流程（例如NRPE和collectd）都可以。</p><blockquote><p>To create the docker group and add your user:</p><blockquote><p>1.Create the docker group.<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo groupadd docker</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><p>这步可以略过。</p><blockquote><blockquote><p>2.Add your user to the docker group.<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><p>添加当前登录用户到docker组。</p><blockquote><blockquote><p>3.Log out and log back in so that your group membership is re-evaluated.</p><blockquote><p>If testing on a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.<br>On a desktop Linux environment such as X Windows, log out of your session completely and then log back in.</p></blockquote></blockquote></blockquote><p>注销重新登录。</p><blockquote><blockquote><p>4.Verify that you can run docker commands without sudo.<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><blockquote><p>This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.</p></blockquote></blockquote><p>测试是否正常运行。</p><p>If you initially ran Docker CLI commands using sudo before adding your user to the docker group, you may see the following error, which indicates that your ~/.docker/ directory was created with incorrect permissions due to the sudo commands.</p><p>WARNING: Error loading config file: /home/user/.docker/config.json -<br>stat /home/user/.docker/config.json: permission denied<br>To fix this problem, either remove the ~/.docker/ directory (it is recreated automatically, but any custom settings are lost), or change its ownership and permissions using the following commands:<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="keyword">chown</span> <span class="string">"$USER"</span>:<span class="string">"$USER"</span> /home/<span class="string">"$USER"</span>/.docker -R</span><br><span class="line">$ sudo <span class="keyword">chmod</span> g+rwx <span class="string">"$HOME/.docker"</span> -R</span><br></pre></td></tr></table></figure></p><p>如果出现权限问题，给刚加进docker组的当前登录普通用户赋权就完事。</p><h3 id="配置开机启动"><a href="#配置开机启动" class="headerlink" title="配置开机启动"></a>配置开机启动</h3><blockquote><p>Most current Linux distributions (RHEL, CentOS, Fedora, Ubuntu 16.04 and higher) use systemd to manage which services start when the system boots. </p></blockquote><blockquote><p>systemd<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="builtin-name">enable</span> docker</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>To disable this behavior, use disable instead.<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="builtin-name">disable</span> docker</span><br></pre></td></tr></table></figure></p></blockquote><p>CentOS7以后使用systemd做系统服务管理，配置简单。</p><h3 id="配置Docker守护程序侦听连接的位置"><a href="#配置Docker守护程序侦听连接的位置" class="headerlink" title="配置Docker守护程序侦听连接的位置"></a>配置Docker守护程序侦听连接的位置</h3><blockquote><p>By default, the Docker daemon listens for connections on a UNIX socket to accept requests from local clients. It is possible to allow Docker to accept requests from remote hosts by configuring it to listen on an IP address and port as well as the UNIX socket. For more detailed information on this configuration option take a look at “Bind Docker to another host/port or a unix socket” section of the Docker CLI Reference article.</p></blockquote><p>默认情况下，Docker守护程序侦听UNIX套接字上的连接以接受来自本地客户端的请求。通过将Docker配置为侦听IP地址和端口以及UNIX套接字，可以允许Docker接受来自远程主机的请求。有关此配置选项的更多详细信息，请参阅Docker CLI参考文章中的“将Docker绑定到另一个主机/端口或unix套接字”部分。</p><blockquote><p>Before configuring Docker to accept connections from remote hosts it is critically important that you understand the security implications of opening docker to the network. If steps are not taken to secure the connection, it is possible for remote non-root users to gain root access on the host. For more information on how to use TLS certificates to secure this connection, check this article on how to protect the Docker daemon socket.</p></blockquote><p>在配置Docker以接受来自远程主机的连接之前，了解打开docker到网络的安全隐患至关重要。 如果不采取步骤来保护连接，则远程非root用户可以在主机上获得root访问权限。 有关如何使用TLS证书保护此连接的更多信息，请查看有关如何保护Docker守护程序套接字的文章。</p><blockquote><p>Configuring Docker to accept remote connections can be done with the docker.service systemd unit file for Linux distributions using systemd, such as recent versions of RedHat, CentOS, Ubuntu and SLES, or with the daemon.json file which is recommended for Linux distributions that do not use systemd.</p></blockquote><p>配置Docker以接受远程连接可以使用systemd的Linux发行版的docker.service systemd单元文件来完成，例如RedHat，CentOS，Ubuntu和SLES的最新版本，或者推荐用于Linux发行版的daemon.json文件。 不要使用systemd。</p><blockquote><p>systemd vs daemon.json<br>Configuring Docker to listen for connections using both the systemd unit file and the daemon.json file causes a conflict that prevents Docker from starting.</p></blockquote><p>同时使用systemd和daemon.json会使docker启动冲突。</p><ul><li>既然官方推荐修改daemon.json开启远程访问，就听他的。</li></ul><blockquote><p>1.Set the hosts array in the /etc/docker/daemon.json to connect to the UNIX socket and an IP address, as follows:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"hosts"</span>: [<span class="string">"unix:///var/run/docker.sock"</span>, <span class="string">"tcp:/127.0.0.1:2375"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.Restart Docker.<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="keyword"> system</span>ctl daemon-reload</span><br><span class="line">sudo<span class="keyword"> system</span>ctl restart docker</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.Check to see whether the change was honored by reviewing the output of netstat to confirm dockerd is listening on the configured port.<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo netstat -lntp | grep dockerd</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">2375</span>          <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:*               LISTEN      <span class="number">3758</span>/dockerd</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>这里使用systemctl启动会失败，后面详细研究下启动方式。</li></ul><h3 id="内核兼容性检查"><a href="#内核兼容性检查" class="headerlink" title="内核兼容性检查"></a>内核兼容性检查</h3><blockquote><p>Docker cannot run correctly if your kernel is older than version 3.10 or if it is missing some modules. To check kernel compatibility, you can download and run the check-config.sh script.<br>The script only works on Linux, not macOS.</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>curl <span class="symbol">https:</span>/<span class="regexp">/raw.githubusercontent.com/docker</span><span class="regexp">/docker/master</span><span class="regexp">/contrib/check</span>-config.sh &gt; check-config.sh</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>bash ./check-config.sh</span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><blockquote><p>To upgrade Docker CE, follow the installation instructions, choosing the new version you want to install.</p></blockquote><p>使用指定版本安装即可更新。</p><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><blockquote><p>Uninstall the Docker package:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum <span class="builtin-name">remove</span> docker-ce</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Images, containers, volumes, or customized configuration files on your host are not automatically removed. To delete all images, containers, and volumes:<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span></span></span><br></pre></td></tr></table></figure></p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">官方文档</a></p></li><li><p><a href="https://docs.docker-cn.com/engine/installation/linux/docker-ce/centos/" target="_blank" rel="noopener">中文文档</a><br>找国内镜像时候发现的……<br>翻译版本落后，更新慢，有些内容缺失，不如直接看官方文档</p></li><li><p>Docker 容器与容器云（第2版）<br>本书中安装方法已过时，以官方文档为主。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://tech.nitaoge.com/categories/docker/"/>
    
    
      <category term="看破Docker" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Docker/"/>
    
  </entry>
  
  <entry>
    <title>看破Docker 2.启动方式</title>
    <link href="http://tech.nitaoge.com/p/24f59f15/"/>
    <id>http://tech.nitaoge.com/p/24f59f15/</id>
    <published>2019-04-20T11:35:43.000Z</published>
    <updated>2019-04-20T12:43:22.392Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">官方文档</a></p></li><li><p>Docker 容器与容器云（第2版）</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://tech.nitaoge.com/categories/docker/"/>
    
    
      <category term="看破Docker" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Docker/"/>
    
  </entry>
  
  <entry>
    <title>看破Redis 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/906310c9/"/>
    <id>http://tech.nitaoge.com/p/906310c9/</id>
    <published>2019-03-24T05:31:02.000Z</published>
    <updated>2019-04-15T15:59:23.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司要用Redis做数据库缓存双写，虽然不是我搞，但我不会多没有牌面啊……<br>正所谓不积跬步无以至千里，不会原理下一个坑的就是你。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>我这里装了三个虚拟机，并做了域名映射。</p><blockquote><p>Centos7.6_1810<br>vhost1、vhost2、vhost3<br>每个都是1核2G 40G(系统盘)+60G(数据盘-挂到/disk1)<br>为以后搭集群做准备。</p></blockquote><p><strong><em>不多哔哔，直接在虚拟机上开干，注意每次搞虚拟机前先拍快照。</em></strong></p><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://redis.io/download" target="_blank" rel="noopener">Redis官网下载地址</a><br>我本次下载最新版为redis-5.0.4.tar.gz</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="把包传到虚拟机"><a href="#把包传到虚拟机" class="headerlink" title="把包传到虚拟机"></a>把包传到虚拟机</h3><p><code>scp redis-5.0.4.tar.gz root@vhost1:/disk1/pack</code></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar xzf redis-5.0.4.tar.gz</code><br><code>cd redis-5.0.4</code></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><code>make clean &amp;&amp; make</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="备份原配置文件"><a href="#备份原配置文件" class="headerlink" title="备份原配置文件"></a>备份原配置文件</h3><p><code>cp redis.conf redis.conf.bk</code></p><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><p><code>vi redis.conf</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绑定地址（开外部访问）</span></span><br><span class="line">bind vhost1</span><br><span class="line"><span class="comment"># 解除保护模式</span></span><br><span class="line">protected-mode <span class="literal">no</span></span><br><span class="line"><span class="comment"># 绑定端口</span></span><br><span class="line">port 6379</span><br></pre></td></tr></table></figure></p><h2 id="启动（守护进程）"><a href="#启动（守护进程）" class="headerlink" title="启动（守护进程）"></a>启动（守护进程）</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">src/redis-<span class="keyword">server</span></span><br><span class="line">或指定配置文件位置</span><br><span class="line">nohup src/redis-<span class="keyword">server</span> redis.conf &amp;</span><br></pre></td></tr></table></figure><p><img src="/images/redis/1553409282510.png" alt="启动redis"><br><em>这里可以把服务作为系统服务启动，后面再讲。</em></p><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><p>每个服务启动都是作为一个系统进程并且有进程号(pid)的。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> -ef | <span class="keyword">grep</span> -v <span class="string">'grep'</span> | <span class="keyword">grep</span> redis</span><br></pre></td></tr></table></figure></p><p><img src="/images/redis/Jietu20190324-143856.png" alt="进程"><br>其中2991就是进程号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> 2991</span><br></pre></td></tr></table></figure></p><h2 id="命令行客户端连接"><a href="#命令行客户端连接" class="headerlink" title="命令行客户端连接"></a>命令行客户端连接</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src/redis-cli</span><br><span class="line">redis&gt; <span class="builtin-name">set</span> foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; <span class="builtin-name">get</span> foo</span><br><span class="line"><span class="string">"bar"</span></span><br></pre></td></tr></table></figure><h2 id="java连接"><a href="#java连接" class="headerlink" title="java连接"></a>java连接</h2><h3 id="集成jedis"><a href="#集成jedis" class="headerlink" title="集成jedis"></a>集成jedis</h3><p>// TODO<br><del>等有时间写个jedis客户端工具</del></p><h3 id="集成spring-boot-starter-data-redis"><a href="#集成spring-boot-starter-data-redis" class="headerlink" title="集成spring-boot-starter-data-redis"></a>集成spring-boot-starter-data-redis</h3><p>引包<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'org.springframework.boot'</span>, <span class="string">name:</span> <span class="string">'spring-boot-starter-data-redis'</span>, <span class="string">version:</span> <span class="string">'2.1.3.RELEASE'</span></span><br></pre></td></tr></table></figure></p><p>加配置<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span> <span class="comment"># redis</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">vhost1</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">  password:</span></span><br><span class="line"><span class="attr">  jedis:</span></span><br><span class="line"><span class="attr">    pool:</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">      max-idle:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>注入RedisTemplate或StringRedisTemplate直接使用，后续会仔细剖析二者区别<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure></p><p>封装工具可参考<a href="https://github.com/whvcse/RedisUtil" target="_blank" rel="noopener">whvcse/RedisUtil</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>确定你刚装的虚拟机上有gcc，没有就装yum install -y gcc</li></ul><p><img src="/images/redis/1553407100861.png" alt="没装gcc"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="redis" scheme="http://tech.nitaoge.com/categories/redis/"/>
    
    
      <category term="看破Redis" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Redis/"/>
    
  </entry>
  
  <entry>
    <title>看破Apollo 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/21135a2b/"/>
    <id>http://tech.nitaoge.com/p/21135a2b/</id>
    <published>2019-03-24T05:16:24.000Z</published>
    <updated>2019-04-16T02:36:42.029Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="opensource" scheme="http://tech.nitaoge.com/categories/opensource/"/>
    
    
      <category term="Apollo ctrip" scheme="http://tech.nitaoge.com/tags/Apollo-ctrip/"/>
    
      <category term="看破开源组件" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>看破MySQL 2.基本概念</title>
    <link href="http://tech.nitaoge.com/p/da0fe888/"/>
    <id>http://tech.nitaoge.com/p/da0fe888/</id>
    <published>2019-03-22T12:42:13.000Z</published>
    <updated>2019-04-15T15:59:23.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="mysql" scheme="http://tech.nitaoge.com/categories/mysql/"/>
    
    
      <category term="看破MySQL" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4MySQL/"/>
    
  </entry>
  
  <entry>
    <title>看破并发 1.基本概念</title>
    <link href="http://tech.nitaoge.com/p/71b6f09d/"/>
    <id>http://tech.nitaoge.com/p/71b6f09d/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.015Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p># </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="concurrent" scheme="http://tech.nitaoge.com/categories/concurrent/"/>
    
    
      <category term="看破并发" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>看破IDEA 安装、使用、配置</title>
    <link href="http://tech.nitaoge.com/p/24280e36/"/>
    <id>http://tech.nitaoge.com/p/24280e36/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.027Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="为什么我改用IDEA？"><a href="#为什么我改用IDEA？" class="headerlink" title="为什么我改用IDEA？"></a>为什么我改用IDEA？</h1><p>就eclipse每次打开都需要rebuild all projects，在网络环境及其恶劣的情况下，总是无故卡死，我就不想用它了。<br>就这么倔！</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IDEA下载地址</a></p><p>这里有很多开发工具供你选择，我开发前后端分别用到了WebStorm和IDEA。<br><img src="/images/idea/Snipaste_2019-04-15_19-05-29.png" alt="产品列表"></p><p>点击download来到下载选择页面，左边付费功能多，右边免费开源功能少。<br><img src="/images/idea/Snipaste_2019-04-15_19-08-37.png" alt="下载页面"></p><p>windows程序目录如下，Mac的Contents结构也类似：<br><img src="/images/idea/Snipaste_2019-04-15_19-16-28.png" alt="程序目录"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="开始一个项目"><a href="#开始一个项目" class="headerlink" title="开始一个项目"></a>开始一个项目</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>TODO</p><h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><p>TODO</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="程序配置文件参数"><a href="#程序配置文件参数" class="headerlink" title="程序配置文件参数"></a>程序配置文件参数</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m   <span class="comment">// 初始内存</span></span><br><span class="line">-Xmx750m   <span class="comment">// 最大内存</span></span><br><span class="line">-XX:ReservedCodeCacheSize=<span class="number">240</span>m  <span class="comment">// 代码恢复缓存</span></span><br><span class="line">-XX:+UseConcMarkSweepGC   <span class="comment">// 设置老年代为并发收集</span></span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB=<span class="number">50</span></span><br><span class="line">-ea</span><br><span class="line">-Dsun<span class="selector-class">.io</span><span class="selector-class">.useCanonCaches</span>=false</span><br><span class="line">-Djava<span class="selector-class">.net</span><span class="selector-class">.preferIPv4Stack</span>=true</span><br><span class="line">-Djdk<span class="selector-class">.http</span><span class="selector-class">.auth</span><span class="selector-class">.tunneling</span><span class="selector-class">.disabledSchemes</span>=<span class="string">""</span></span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line">-Dfile.encoding=UTF-<span class="number">8</span>   <span class="comment">// 文件编码集，解决控制台输出乱码问题</span></span><br><span class="line">-Deditable<span class="selector-class">.java</span><span class="selector-class">.test</span><span class="selector-class">.console</span>=true   <span class="comment">// 解决Junit @Test不能使用控制台输入问题</span></span><br></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>常用快捷键</li></ul><p>TODO</p><ul><li>自定义快捷键</li></ul><p>Settings -&gt; Keymap</p><h2 id="代码模版"><a href="#代码模版" class="headerlink" title="代码模版"></a>代码模版</h2><ul><li>自定义代码模版</li></ul><p>Settings -&gt; Editor -&gt; Live Templates</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="devtool" scheme="http://tech.nitaoge.com/categories/devtool/"/>
    
    
      <category term="看破IDEA" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4IDEA/"/>
    
  </entry>
  
  <entry>
    <title>看破Git 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/2ab4ec8e/"/>
    <id>http://tech.nitaoge.com/p/2ab4ec8e/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.028Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="devtool" scheme="http://tech.nitaoge.com/categories/devtool/"/>
    
    
      <category term="看破Git" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Git/"/>
    
  </entry>
  
  <entry>
    <title>看破设计模式 2. 创建型模式 - 单例模式(Singleton)</title>
    <link href="http://tech.nitaoge.com/p/c9a4fbc9/"/>
    <id>http://tech.nitaoge.com/p/c9a4fbc9/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:40:52.456Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>Ensure a class has only one instance, and provide a global point of access to it.</p></blockquote><p>确保某一个类只有一个实例， 而且自行实例化并向整个系统提供这个实例。 </p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>饿汉式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class HungrySingleton &#123;</span><br><span class="line"></span><br><span class="line">    private static final HungrySingleton<span class="built_in"> instance </span>= new HungrySingleton();</span><br><span class="line"></span><br><span class="line">    private HungrySingleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static HungrySingleton instance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>懒汉式（加锁禁止重排序保证线程安全）<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class LazySingleton &#123;</span><br><span class="line"></span><br><span class="line">    private static volatile LazySingleton<span class="built_in"> instance </span>= <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    private LazySingleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static LazySingleton instance() &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            synchronized (LazySingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="built_in"> instance </span>= new LazySingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然Effective java推荐枚举式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class EnumSingleton &#123;</span><br><span class="line"></span><br><span class="line">    private EnumSingleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private enum Singleton &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line"></span><br><span class="line">        private final EnumSingleton instance;</span><br><span class="line"></span><br><span class="line">        Singleton() &#123;</span><br><span class="line">           <span class="built_in"> instance </span>= new EnumSingleton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public EnumSingleton getInstance() &#123;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static EnumSingleton instance() &#123;</span><br><span class="line">        return Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我选择静态内部类式<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NiceSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NiceSingleton</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">InstanceHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> final <span class="keyword">static</span> NiceSingleton instance = <span class="keyword">new</span> NiceSingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NiceSingleton <span class="title">instance</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> InstanceHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><ul><li>为什么懒汉式单例要双重校验？</li></ul><blockquote><p>当两个线程同时调用instance()方法时，由于singleton==null，两个线程都可以通过第一个校验，<br>然后线程A持有锁，线程B等待。当线程A执行完实例化、释放锁，线程B进入代码块。</p></blockquote><blockquote><p>如果不加第二个校验，线程B又会实例化一个对象。就会违反单例模式设计原则。</p></blockquote><blockquote><p>如果不加第一个校验，也能实现单例，但多个线程反复竞争锁会增加系统开销，严重影响性能。</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://product.dangdang.com/71052.html" target="_blank" rel="noopener">设计模式 GOF</a></p><p><a href="http://product.dangdang.com/20079096.html" target="_blank" rel="noopener">研磨设计模式</a></p><p><a href="http://product.dangdang.com/24157561.html" target="_blank" rel="noopener">图解设计模式</a></p><p><a href="http://cmsblogs.com/?p=3396" target="_blank" rel="noopener">设计模式读书笔记文集</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="design" scheme="http://tech.nitaoge.com/categories/design/"/>
    
    
      <category term="看破设计模式" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>看破Gradle 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/18a22795/"/>
    <id>http://tech.nitaoge.com/p/18a22795/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.585Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="gradle" scheme="http://tech.nitaoge.com/categories/gradle/"/>
    
    
      <category term="看破Gradle" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Gradle/"/>
    
  </entry>
  
  <entry>
    <title>看破Elastic-Job 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/75509985/"/>
    <id>http://tech.nitaoge.com/p/75509985/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.026Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="opensource" scheme="http://tech.nitaoge.com/categories/opensource/"/>
    
    
      <category term="看破开源组件" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/"/>
    
      <category term="Elastic-Job" scheme="http://tech.nitaoge.com/tags/Elastic-Job/"/>
    
  </entry>
  
  <entry>
    <title>看破MacOS 1.快捷键</title>
    <link href="http://tech.nitaoge.com/p/91dc983c/"/>
    <id>http://tech.nitaoge.com/p/91dc983c/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-20T02:59:23.989Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>打开Finder<br>option + command + space<br>跳到指定目录<br>shift + command + g</p><h1 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h1><p><img src="/images/macos/shortcuts.png" alt="快捷键"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="devtool" scheme="http://tech.nitaoge.com/categories/devtool/"/>
    
    
      <category term="看破MacOS" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4MacOS/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 1.核心语法</title>
    <link href="http://tech.nitaoge.com/p/195fb869/"/>
    <id>http://tech.nitaoge.com/p/195fb869/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.586Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>重新梳理一下JAVA开发中常用到的核心语法，随遇到随补充……</p><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>将变量和方法封装成一个类，通过实例化的方式赋予其为对象。</p><p>可以看下八大基本数据类型的包装类加深理解：</p><ul><li>怎么包装成类的？</li><li>怎么继承Number实现obj.xxxValue()的？</li><li>怎么实现自动拆箱装箱的？</li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>子类继承超类允许的属性和方法。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>在类的内部声明类，就是内部类。<br>特性：</p><ul><li>可以通过声明多个内部类，实现多继承。</li><li>内部类可直接访问外部类成员变量和方法，但外部类访问内部类的成员需要实例化内部类。</li><li>提供更好的封装。</li></ul><h2 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h2><p>{<br>}<br>在类中跟构造方法类似，都是在实例化对象时执行。</p><h2 id="实例化内部类"><a href="#实例化内部类" class="headerlink" title="实例化内部类"></a>实例化内部类</h2><p>没什么好说的，直接上代码……<br>拥有内部类的类：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelf</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySelf</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实例化：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySelf mySelf = new MySelf();</span><br><span class="line">MySelf.<span class="builtin-name">Info</span> myInfo = mySelf.new <span class="builtin-name">Info</span>(12);</span><br><span class="line">LogUtils.<span class="builtin-name">info</span>(myInfo.getAge());</span><br></pre></td></tr></table></figure></p><p>为MySelf.Info加上static修饰，实例化：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MySelf.<span class="builtin-name">Info</span> myInfo = new MySelf.<span class="builtin-name">Info</span>(12);</span><br><span class="line">LogUtils.<span class="builtin-name">info</span>(myInfo.getAge());</span><br></pre></td></tr></table></figure></p><h2 id="继承内部类"><a href="#继承内部类" class="headerlink" title="继承内部类"></a>继承内部类</h2><p>需要通过外部类实例引用外部类构造器，才能继承内部类，没这么玩的。太反人类……<br>父类：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelf</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySelf</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子类：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MySon</span> <span class="keyword">extends</span> <span class="title">MySelf</span>.<span class="title">Info</span> </span>&#123;</span><br><span class="line">    public <span class="type">MySon</span>(<span class="type">MySelf</span> mySelf) &#123;</span><br><span class="line">        mySelf.<span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>在实例化前内部继承抽象类并实现抽象方法，或内部实现接口并实现接口所有方法。<br>类似这样：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MySelf son = <span class="keyword">new</span> <span class="type">MySon</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> void <span class="keyword">set</span>(<span class="keyword">String</span> id) &#123;</span><br><span class="line"><span class="built_in">this</span>.setId(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">LogUtils.info(((MySon) son).<span class="keyword">get</span>());</span><br></pre></td></tr></table></figure></p><h2 id="this-和-super"><a href="#this-和-super" class="headerlink" title="this 和 super"></a>this 和 super</h2><p>this指当前对象本身<br>super指当前对象最近超（父）类</p><p>在构造方法中使用super()和this()应该注意：</p><ul><li>super()调用父类的构造方法，this()调用当前类的其它构造方法。</li><li>每个子类构造方法的第一条语句，都隐式调用super()，如果父类没有这种形式的构造函数，会编译报错。</li><li>super()和this()均需放在构造方法内第一行，一个构造方法内只能调用其中一个。</li><li>this()和super()都指向对象，所以不能在static方法，static语句块中使用。</li></ul><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="静态绑定"><a href="#静态绑定" class="headerlink" title="静态绑定"></a>静态绑定</h2><p>在编译阶段就能确定调用哪个方法的方式，叫静态绑定机制。</p><h2 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h2><p>根据实际创建的对象类型来确定方法所在位置，通过动态创建的对象方法表来定位方法的方式，叫动态绑定机制。</p><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><h2 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h2><p>Java修饰符中用来控制访问权限的，分为以下四种：</p><ul><li>类内可访问（private）</li><li>包内可访问 (缺省。有人说是default，但在jdk8中default用于修饰接口默认方法，写在代码里尝试过确实不是)</li><li>子类可访问 (protected)</li><li>均可访问 (public)</li></ul><p>以下用表格说明各修饰符区别：</p><table><thead><tr><th style="text-align:left">修饰符</th><th style="text-align:center">当前类</th><th style="text-align:center">包内</th><th style="text-align:center">子孙类（包内）</th><th style="text-align:center">子孙类（不同包）</th><th style="text-align:center">其他包</th></tr></thead><tbody><tr><td style="text-align:left">public</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td></tr><tr><td style="text-align:left">protected</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y/N</td><td style="text-align:center">N</td></tr><tr><td style="text-align:left">缺省</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">N</td><td style="text-align:center">N</td></tr><tr><td style="text-align:left">private</td><td style="text-align:center">Y</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">N</td></tr></tbody></table><blockquote><p>这里要特别说明protected作用，也就是上面那个Y/N：</p><ul><li>允许同一包内的类任意调用。</li><li>不在同一包内的类，只允许子孙类调用，不在家谱上的类不能调用</li></ul></blockquote><p>默认缺省值：</p><ul><li>类中的变量和方法都是<code>public</code>，构造函数为<code>缺省</code>。</li><li>接口中的变量为<code>public static final</code>，方法为<code>public</code>。</li></ul><p>访问控制的继承：</p><ul><li>父类声明为public的变量和方法，子类也必须声明为public。</li><li>父类声明为protected的变量和方法，子类可以声明为protected或public。</li><li>父类声明为private的方法，不能被继承。</li></ul><h2 id="非访问控制修饰符"><a href="#非访问控制修饰符" class="headerlink" title="非访问控制修饰符"></a>非访问控制修饰符</h2><h3 id="静态修饰符static"><a href="#静态修饰符static" class="headerlink" title="静态修饰符static"></a>静态修饰符static</h3><p>用于修饰静态方法和静态变量。</p><ul><li>一个类无论实例化了多少个对象，类的静态变量和静态方法都指向一块固定的内存区，修改任意实例中的静态变量都为最终修改值。</li><li>静态方法中只能使用静态变量。</li><li>二者可以通过Class.member，Class.method()的方式直接调用。</li><li>可以修饰静态内部类</li></ul><h3 id="static-代码块"><a href="#static-代码块" class="headerlink" title="static{} 代码块"></a>static{} 代码块</h3><p>在JVM的生命周期中只被加载一次，是伴随类加载执行的。<br>不管怎么实例化这个类，都只执行一次。</p><h3 id="最终修饰符final"><a href="#最终修饰符final" class="headerlink" title="最终修饰符final"></a>最终修饰符final</h3><p>修饰常量、修饰不可继承类，修饰可继承但不能重写的方法。</p><h3 id="抽象类修饰符abstract"><a href="#抽象类修饰符abstract" class="headerlink" title="抽象类修饰符abstract"></a>抽象类修饰符abstract</h3><p>抽象类不能被final修饰，可以包含抽象方法和非抽象方法。<br>抽象方法不能被final和static修饰，不能有方法体，继承抽象类的子类必须实现父类的所有抽象方法，除非子类也是抽象类。</p><p>注意：抽象类是不能被实例化的！！！<br>除非你使用匿名内部类的方式实现它的抽象方法，然后实例化这个匿名内部类，比如：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MySelf son = <span class="keyword">new</span> <span class="type">MySon</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> void <span class="keyword">set</span>(<span class="keyword">String</span> id) &#123;</span><br><span class="line"><span class="built_in">this</span>.setId(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">LogUtils.info(((MySon) son).<span class="keyword">get</span>());</span><br></pre></td></tr></table></figure></p><p>但是！这么写属于<em><strong><em>反人类</em></strong></em>设计模式，不推荐这样写。</p><h3 id="接口默认实现方法default-jdk8"><a href="#接口默认实现方法default-jdk8" class="headerlink" title="接口默认实现方法default (jdk8)"></a>接口默认实现方法default (jdk8)</h3><p>在interface中实现默认方法需要加default修饰，必须为public公有<br>这和抽象类中可以有protected抽象方法和private成员变量有区别</p><h3 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h3><p>实现了Serilizable接口的POJO，在不需要对类中某个成员变量进行序列化时，可以使用transient修饰该成员变量。反序列化时该成员变量无法获得访问，值为null。</p><blockquote><p>在实际开发过程中，有些属性需要序列化，有些不需要，比如一些敏感信息（如身份证，密码，银行卡号等）不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。</p></blockquote><ul><li>只能修饰成员变量，类、方法、本地变量均不能修饰。</li><li>静态变量不能被序列化。</li></ul><h3 id="synchronized和volatile"><a href="#synchronized和volatile" class="headerlink" title="synchronized和volatile"></a>synchronized和volatile</h3><p>synchronized修饰多线程中的同步锁<br>volatile修饰多线程中的共享变量</p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p><img src="https://user-gold-cdn.xitu.io/2018/8/10/165242e52c2beee2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="异常继承关系"></p><ul><li>Error</li></ul><p>Error一般表示编译时或者系统错误，例如：虚拟机相关的错误，系统崩溃（例如：OutOfMemoryError）等。这种错误无法恢复或不可捕获,将导致应用程序中断,通常应用程序无法处理这些错误,因此也不应该试图用catch来进行捕获。</p><ul><li>Exception</li></ul><p>Exception分为<strong>受检查异常</strong>和<strong>运行时异常</strong>（不受检查异常）。</p><p>编译器在编译时，对于<strong>受检查异常</strong>必须进行try…catch或throws处理,否则无法通过编译。常见的受检查异常包括：IO操作、ClassNotFoundException、线程操作等。</p><p>RuntimeException及其子类都统称为<strong>非受检查异常</strong>，例如：NullPointExecrption、NumberFormatException（字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等。</p><h2 id="try-with-resources-jdk7"><a href="#try-with-resources-jdk7" class="headerlink" title="try-with-resources(jdk7)"></a>try-with-resources(jdk7)</h2><p>在try()括号中打开的资源会在语句执行结束时关闭。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(path));</span><br><span class="line">    BufferedWriter bw = <span class="keyword">new</span> <span class="type">BufferedWriter</span>(<span class="keyword">new</span> <span class="type">FileWriter</span>(path));</span><br><span class="line">)&#123;</span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try catch finally"></a>try catch finally</h2><p>首先看这段代码<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ++x;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ++x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果是2而不是3，finally到底执行了吗？<br>经打断点运行确认，finally执行后x为3，又执行到return，返回结果为2。</p><p>查阅<a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/finally.html" target="_blank" rel="noopener">官方finally语句说明</a>，对这个特殊情况有说明：</p><blockquote><p>The finally block always executes when the try block exits. This ensures that the finally block is executed even if an unexpected exception occurs. But finally is useful for more than just exception handling — it allows the programmer to avoid having cleanup code accidentally bypassed by a return, continue, or break. Putting cleanup code in a finally block is always a good practice, even when no exceptions are anticipated.</p></blockquote><blockquote><blockquote><p>Note: If the JVM exits while the try or catch code is being executed, then the finally block may not execute. Likewise, if the thread executing the try or catch code is interrupted or killed, the finally block may not execute even though the application as a whole continues.</p></blockquote></blockquote><p>翻译：</p><blockquote><p>当try语句退出时肯定会执行finally语句。这确保了即使发了一个意想不到的异常也会执行finally语句块。但是finally的用处不仅是用来处理异常——它可以让程序员不会因为return、continue、或者break语句而忽略了清理代码。把清理代码放在finally语句块里是一个很好的做法，即便可能不会有异常发生也要这样做。</p><blockquote><p>注意，当try或者catch的代码在运行的时候，JVM退出了。那么finally语句块就不会执行。同样，如果线程在运行try或者catch的代码时被中断了或者被杀死了(killed)，那么finally语句可能也不会执行了，即使整个运用还会继续执行。</p></blockquote></blockquote><p>这说明只要进程(jvm)不死,线程(thread)不被中断，finally就必须执行。</p><ul><li>那么为什么返回结果为2呢？</li></ul><p>查阅<a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10.2.5" target="_blank" rel="noopener">官方jvm文档</a>，</p><blockquote><p>If the try clause executes a return, the compiled code does the following:</p><blockquote><p>1.Saves the return value (if any) in a local variable.<br>2.Executes a jsr to the code for the finally clause.<br>3.Upon return from the finally clause, returns the value saved in the local variable.</p></blockquote></blockquote><p>翻译：</p><blockquote><p>如果try语句里有return，那么代码的行为如下：</p><blockquote><p>1.如果有返回值，就把返回值保存到局部变量中<br>2.执行jsr指令跳到finally语句里执行<br>3.执行完finally语句后，返回之前保存在局部变量表里的值</p></blockquote></blockquote><p>根据上面的说明就可以明白为什么是2了。<br>当执行到return ++x;时，jvm在执行完++x后会在局部变量表里另外分配一个空间来保存当前x的值。<br>注意，现在还没把值返回，而是继续执行finally语句里的语句。等执行完后再把之前保存的值（是2不是x）返回。<br>所以就有了返回结果是2不是3的情况。</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>类型参数化，可以看下集合的实现。</p><p>未知泛型参数方法需要在返回值类型前声明泛型。</p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>修饰构造器、成员变量类型、成员方法、方法参数等，用于反射拿值逻辑处理。</p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ul><li>@Target （作用域）</li></ul><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line"><span class="built_in">   TYPE,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line"><span class="built_in">   FIELD,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Method declaration */</span></span><br><span class="line"><span class="built_in">   METHOD,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line"><span class="built_in">   PARAMETER,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Constructor declaration */</span></span><br><span class="line"><span class="built_in">   CONSTRUCTOR,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Local variable declaration */</span></span><br><span class="line"><span class="built_in">   LOCAL_VARIABLE,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Annotation type declaration */</span></span><br><span class="line"><span class="built_in">   ANNOTATION_TYPE,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Package declaration */</span></span><br><span class="line"><span class="built_in">   PACKAGE,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Type parameter declaration</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @since 1.8</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="built_in">   TYPE_PARAMETER,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Use of a type</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @since 1.8</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   TYPE_USE</span><br></pre></td></tr></table></figure><ul><li>@Retention （保留策略）</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Annotations are <span class="keyword">to</span> be discarded <span class="keyword">by</span> <span class="keyword">the</span> compiler.</span><br><span class="line">    */</span><br><span class="line">   SOURCE,</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * Annotations are <span class="keyword">to</span> be recorded <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">class</span> <span class="built_in">file</span> <span class="keyword">by</span> <span class="keyword">the</span> compiler</span><br><span class="line">    * <span class="keyword">but</span> need <span class="keyword">not</span> be retained <span class="keyword">by</span> <span class="keyword">the</span> VM <span class="keyword">at</span> <span class="built_in">run</span> <span class="built_in">time</span>.  This <span class="keyword">is</span> <span class="keyword">the</span> default</span><br><span class="line">    * behavior.</span><br><span class="line">    */</span><br><span class="line">   CLASS,</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * Annotations are <span class="keyword">to</span> be recorded <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">class</span> <span class="built_in">file</span> <span class="keyword">by</span> <span class="keyword">the</span> compiler <span class="keyword">and</span></span><br><span class="line">    * retained <span class="keyword">by</span> <span class="keyword">the</span> VM <span class="keyword">at</span> <span class="built_in">run</span> <span class="built_in">time</span>, so they may be <span class="built_in">read</span> reflectively.</span><br><span class="line">    *</span><br><span class="line">    * @see java.lang.reflect.AnnotatedElement</span><br><span class="line">    */</span><br><span class="line">   RUNTIME</span><br></pre></td></tr></table></figure><p>比如Lombok的所有注解都是保留在源码阶段的，</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line">public <span class="variable">@interface</span> Data &#123;</span><br></pre></td></tr></table></figure><ul><li>@Repeatable （重复注解）</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Indicates the &lt;em&gt;containing <span class="keyword">annotation</span> <span class="title">type</span>&lt;/<span class="title">em</span>&gt; <span class="title">for</span> <span class="title">the</span></span><br><span class="line"> * repeatable <span class="keyword">annotation</span> <span class="title">type</span>.</span><br><span class="line"> * @<span class="keyword">return</span> the containing <span class="keyword">annotation</span> <span class="title">type</span></span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">Class&lt;? extends Annotation&gt; value();</span></span><br></pre></td></tr></table></figure><h2 id="重复注解-jdk8"><a href="#重复注解-jdk8" class="headerlink" title="重复注解(jdk8)"></a>重复注解(jdk8)</h2><p>注解容器：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">public <span class="variable">@interface</span> MyAnnotations &#123;</span><br><span class="line">    <span class="selector-tag">MyAnnotation</span><span class="selector-attr">[]</span> <span class="selector-tag">value</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Target</span>(&#123;<span class="selector-tag">ElementType</span><span class="selector-class">.CONSTRUCTOR</span>, <span class="selector-tag">ElementType</span><span class="selector-class">.METHOD</span>, <span class="selector-tag">ElementType</span><span class="selector-class">.PARAMETER</span>, <span class="selector-tag">ElementType</span><span class="selector-class">.FIELD</span>, <span class="selector-tag">ElementType</span><span class="selector-class">.ANNOTATION_TYPE</span>&#125;)</span><br><span class="line">@<span class="keyword">Retention</span>(<span class="keyword">RetentionPolicy</span>.<span class="keyword">RUNTIME</span>)</span><br><span class="line">@<span class="keyword">Repeatable</span>(<span class="keyword">MyAnnotations</span>.<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">public</span> @interface MyAnnotation &#123;</span><br><span class="line">    <span class="selector-tag">String</span> <span class="selector-tag">value</span>() <span class="selector-tag">default</span> "<span class="selector-tag">aaa</span>";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@MyAnnotation</span>(<span class="string">"bbb"</span>)</span><br><span class="line">   <span class="variable">@MyAnnotation</span>(<span class="string">"ccc"</span>)</span><br><span class="line">   public void callback() &#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="提取注解属性"><a href="#提取注解属性" class="headerlink" title="提取注解属性"></a>提取注解属性</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;AnnotationTest&gt; clazz = AnnotationTest.class;</span><br><span class="line">   Method m1 = clazz.getMethod(<span class="string">"callback"</span>);</span><br><span class="line">   MyAnnotation[] ans = m1.getAnnotationsByType(MyAnnotation.class);</span><br><span class="line">   Arrays.asList<span class="function"><span class="params">(ans)</span>.<span class="title">forEach</span><span class="params">((a) -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      System.out.println(a.value());</span></span></span><br><span class="line"><span class="function"><span class="params">   &#125;)</span>;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bbb</span></span><br><span class="line"><span class="keyword">ccc</span></span><br></pre></td></tr></table></figure><h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><h2 id="强引用（StrongReference）"><a href="#强引用（StrongReference）" class="headerlink" title="强引用（StrongReference）"></a>强引用（StrongReference）</h2><p>如果一个对象具有强引用，那垃圾回收器绝不会回收它。<br>当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，<br>也不会靠随意回收具有强引用的对象来解决内存不足的问题。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span>[] arr = <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="软引用（SoftReference）"><a href="#软引用（SoftReference）" class="headerlink" title="软引用（SoftReference）"></a>软引用（SoftReference）</h2><p>如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；<br>如果内存空间不足了，就会回收这些对象的内存。<br>只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。</p><p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;<span class="keyword">String</span>[]&gt; referenceQueue = <span class="keyword">new</span> <span class="type">ReferenceQueue</span>&lt;<span class="keyword">String</span>[]&gt;();</span><br><span class="line">SoftReference&lt;<span class="keyword">String</span>[]&gt; softBean = <span class="keyword">new</span> <span class="type">SoftReference</span>&lt;<span class="keyword">String</span>[]&gt;(<span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;, referenceQueue);</span><br></pre></td></tr></table></figure><h2 id="弱引用（WeakReference）"><a href="#弱引用（WeakReference）" class="headerlink" title="弱引用（WeakReference）"></a>弱引用（WeakReference）</h2><p>在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，<br>不管当前内存空间足够与否，都会回收它的内存。<br>不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p><p>弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;<span class="keyword">String</span>[]&gt; referenceQueue = <span class="keyword">new</span> <span class="type">ReferenceQueue</span>&lt;<span class="keyword">String</span>[]&gt;();</span><br><span class="line">WeakReference&lt;<span class="keyword">String</span>[]&gt; softBean = <span class="keyword">new</span> <span class="type">WeakReference</span>&lt;<span class="keyword">String</span>[]&gt;(<span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;, referenceQueue);</span><br></pre></td></tr></table></figure><h2 id="虚引用（PhantomReference）"><a href="#虚引用（PhantomReference）" class="headerlink" title="虚引用（PhantomReference）"></a>虚引用（PhantomReference）</h2><p>与其他几种引用都不同，虚引用并不会决定对象的生命周期。<br>如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。<br>虚引用主要用来跟踪对象被垃圾回收器回收的活动。</p><p>虚引用必须和引用队列 （ReferenceQueue）联合使用，当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;<span class="keyword">String</span>[]&gt; referenceQueue = <span class="keyword">new</span> <span class="type">ReferenceQueue</span>&lt;<span class="keyword">String</span>[]&gt;();</span><br><span class="line">PhantomReference&lt;<span class="keyword">String</span>[]&gt; referent = <span class="keyword">new</span> <span class="type">PhantomReference</span>&lt;<span class="keyword">String</span>&gt;(<span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;, referenceQueue);</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>详细内容及基本语法请参考：</p><p><a href="http://www.runoob.com/java/java-tutorial.html" target="_blank" rel="noopener">JAVA | 菜鸟教程</a></p><p><a href="http://product.dangdang.com/1395624125.html" target="_blank" rel="noopener">Java编程思想</a></p><p><a href="http://product.dangdang.com/1294027177.html" target="_blank" rel="noopener">Java核心技术卷I基础知识 | Java核心技术卷II高级特性</a></p><p><a href="http://product.dangdang.com/26437835.html" target="_blank" rel="noopener">Effective Java中文版</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 3.JDK8 Core</title>
    <link href="http://tech.nitaoge.com/p/c46700a5/"/>
    <id>http://tech.nitaoge.com/p/c46700a5/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.586Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 5.IO、Socket</title>
    <link href="http://tech.nitaoge.com/p/6a43eebc/"/>
    <id>http://tech.nitaoge.com/p/6a43eebc/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.025Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 6.NIO</title>
    <link href="http://tech.nitaoge.com/p/e269c416/"/>
    <id>http://tech.nitaoge.com/p/e269c416/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:40:52.457Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破设计模式 3. 结构型模式 - 适配器模式(Adapter)</title>
    <link href="http://tech.nitaoge.com/p/a718df1a/"/>
    <id>http://tech.nitaoge.com/p/a718df1a/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:40:52.457Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://product.dangdang.com/71052.html" target="_blank" rel="noopener">设计模式 GOF</a></p><p><a href="http://product.dangdang.com/20079096.html" target="_blank" rel="noopener">研磨设计模式</a></p><p><a href="http://product.dangdang.com/24157561.html" target="_blank" rel="noopener">图解设计模式</a></p><p><a href="http://cmsblogs.com/?p=3396" target="_blank" rel="noopener">设计模式读书笔记文集</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="design" scheme="http://tech.nitaoge.com/categories/design/"/>
    
    
      <category term="看破设计模式" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 7.AIO</title>
    <link href="http://tech.nitaoge.com/p/d455aa9b/"/>
    <id>http://tech.nitaoge.com/p/d455aa9b/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:40:52.458Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破Jenkins 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/17293ae1/"/>
    <id>http://tech.nitaoge.com/p/17293ae1/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.587Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="jenkins" scheme="http://tech.nitaoge.com/categories/jenkins/"/>
    
    
      <category term="看破Jenkins" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>看破JVM 1.</title>
    <link href="http://tech.nitaoge.com/p/fc61a33c/"/>
    <id>http://tech.nitaoge.com/p/fc61a33c/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.587Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="jvm" scheme="http://tech.nitaoge.com/categories/jvm/"/>
    
    
      <category term="看破JVM" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4JVM/"/>
    
  </entry>
  
</feed>
