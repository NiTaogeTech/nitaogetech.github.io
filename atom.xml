<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NiTaogeTech</title>
  
  <subtitle>Focus on Java, BD and Linux. </subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tech.nitaoge.com/"/>
  <updated>2019-04-17T15:16:15.461Z</updated>
  <id>http://tech.nitaoge.com/</id>
  
  <author>
    <name>中华郑六</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>看破Shiro 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/7aa0c206/"/>
    <id>http://tech.nitaoge.com/p/7aa0c206/</id>
    <published>2019-04-16T09:07:22.000Z</published>
    <updated>2019-04-17T15:16:15.461Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="shiro" scheme="http://tech.nitaoge.com/categories/shiro/"/>
    
    
      <category term="看破Shiro" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Shiro/"/>
    
  </entry>
  
  <entry>
    <title>看破Redis 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/906310c9/"/>
    <id>http://tech.nitaoge.com/p/906310c9/</id>
    <published>2019-03-24T05:31:02.000Z</published>
    <updated>2019-04-15T15:59:23.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司要用Redis做数据库缓存双写，虽然不是我搞，但我不会多没有牌面啊……<br>正所谓不积跬步无以至千里，不会原理下一个坑的就是你。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>我这里装了三个虚拟机，并做了域名映射。</p><blockquote><p>Centos7.6_1810<br>vhost1、vhost2、vhost3<br>每个都是1核2G 40G(系统盘)+60G(数据盘-挂到/disk1)<br>为以后搭集群做准备。</p></blockquote><p><strong><em>不多哔哔，直接在虚拟机上开干，注意每次搞虚拟机前先拍快照。</em></strong></p><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://redis.io/download" target="_blank" rel="noopener">Redis官网下载地址</a><br>我本次下载最新版为redis-5.0.4.tar.gz</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="把包传到虚拟机"><a href="#把包传到虚拟机" class="headerlink" title="把包传到虚拟机"></a>把包传到虚拟机</h3><p><code>scp redis-5.0.4.tar.gz root@vhost1:/disk1/pack</code></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar xzf redis-5.0.4.tar.gz</code><br><code>cd redis-5.0.4</code></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><code>make clean &amp;&amp; make</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="备份原配置文件"><a href="#备份原配置文件" class="headerlink" title="备份原配置文件"></a>备份原配置文件</h3><p><code>cp redis.conf redis.conf.bk</code></p><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><p><code>vi redis.conf</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绑定地址（开外部访问）</span></span><br><span class="line">bind vhost1</span><br><span class="line"><span class="comment"># 解除保护模式</span></span><br><span class="line">protected-mode <span class="literal">no</span></span><br><span class="line"><span class="comment"># 绑定端口</span></span><br><span class="line">port 6379</span><br></pre></td></tr></table></figure></p><h2 id="启动（守护进程）"><a href="#启动（守护进程）" class="headerlink" title="启动（守护进程）"></a>启动（守护进程）</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">src/redis-<span class="keyword">server</span></span><br><span class="line">或指定配置文件位置</span><br><span class="line">nohup src/redis-<span class="keyword">server</span> redis.conf &amp;</span><br></pre></td></tr></table></figure><p><img src="/images/redis/1553409282510.png" alt="启动redis"><br><em>这里可以把服务作为系统服务启动，后面再讲。</em></p><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><p>每个服务启动都是作为一个系统进程并且有进程号(pid)的。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> -ef | <span class="keyword">grep</span> -v <span class="string">'grep'</span> | <span class="keyword">grep</span> redis</span><br></pre></td></tr></table></figure></p><p><img src="/images/redis/Jietu20190324-143856.png" alt="进程"><br>其中2991就是进程号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> 2991</span><br></pre></td></tr></table></figure></p><h2 id="命令行客户端连接"><a href="#命令行客户端连接" class="headerlink" title="命令行客户端连接"></a>命令行客户端连接</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src/redis-cli</span><br><span class="line">redis&gt; <span class="builtin-name">set</span> foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; <span class="builtin-name">get</span> foo</span><br><span class="line"><span class="string">"bar"</span></span><br></pre></td></tr></table></figure><h2 id="java连接"><a href="#java连接" class="headerlink" title="java连接"></a>java连接</h2><h3 id="集成jedis"><a href="#集成jedis" class="headerlink" title="集成jedis"></a>集成jedis</h3><p>// TODO<br><del>等有时间写个jedis客户端工具</del></p><h3 id="集成spring-boot-starter-data-redis"><a href="#集成spring-boot-starter-data-redis" class="headerlink" title="集成spring-boot-starter-data-redis"></a>集成spring-boot-starter-data-redis</h3><p>引包<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'org.springframework.boot'</span>, <span class="string">name:</span> <span class="string">'spring-boot-starter-data-redis'</span>, <span class="string">version:</span> <span class="string">'2.1.3.RELEASE'</span></span><br></pre></td></tr></table></figure></p><p>加配置<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span> <span class="comment"># redis</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">vhost1</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">  password:</span></span><br><span class="line"><span class="attr">  jedis:</span></span><br><span class="line"><span class="attr">    pool:</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">      max-idle:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>注入RedisTemplate或StringRedisTemplate直接使用，后续会仔细剖析二者区别<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure></p><p>封装工具可参考<a href="https://github.com/whvcse/RedisUtil" target="_blank" rel="noopener">whvcse/RedisUtil</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>确定你刚装的虚拟机上有gcc，没有就装yum install -y gcc</li></ul><p><img src="/images/redis/1553407100861.png" alt="没装gcc"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="redis" scheme="http://tech.nitaoge.com/categories/redis/"/>
    
    
      <category term="看破Redis" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Redis/"/>
    
  </entry>
  
  <entry>
    <title>看破Apollo 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/21135a2b/"/>
    <id>http://tech.nitaoge.com/p/21135a2b/</id>
    <published>2019-03-24T05:16:24.000Z</published>
    <updated>2019-04-16T02:36:42.029Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="opensource" scheme="http://tech.nitaoge.com/categories/opensource/"/>
    
    
      <category term="Apollo ctrip" scheme="http://tech.nitaoge.com/tags/Apollo-ctrip/"/>
    
      <category term="看破开源组件" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>看破MySQL 2.基本概念</title>
    <link href="http://tech.nitaoge.com/p/da0fe888/"/>
    <id>http://tech.nitaoge.com/p/da0fe888/</id>
    <published>2019-03-22T12:42:13.000Z</published>
    <updated>2019-04-15T15:59:23.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="mysql" scheme="http://tech.nitaoge.com/categories/mysql/"/>
    
    
      <category term="看破MySQL" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4MySQL/"/>
    
  </entry>
  
  <entry>
    <title>看破数据结构 1.线性表</title>
    <link href="http://tech.nitaoge.com/p/e8093df2/"/>
    <id>http://tech.nitaoge.com/p/e8093df2/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="datastucture" scheme="http://tech.nitaoge.com/categories/datastucture/"/>
    
    
      <category term="看破数据结构" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>看破设计模式 2. 创建型模式 - 单例模式(Singleton)</title>
    <link href="http://tech.nitaoge.com/p/c9a4fbc9/"/>
    <id>http://tech.nitaoge.com/p/c9a4fbc9/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:40:52.456Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>Ensure a class has only one instance, and provide a global point of access to it.</p></blockquote><p>确保某一个类只有一个实例， 而且自行实例化并向整个系统提供这个实例。 </p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>饿汉式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class HungrySingleton &#123;</span><br><span class="line"></span><br><span class="line">    private static final HungrySingleton<span class="built_in"> instance </span>= new HungrySingleton();</span><br><span class="line"></span><br><span class="line">    private HungrySingleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static HungrySingleton instance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>懒汉式（加锁禁止重排序保证线程安全）<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class LazySingleton &#123;</span><br><span class="line"></span><br><span class="line">    private static volatile LazySingleton<span class="built_in"> instance </span>= <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    private LazySingleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static LazySingleton instance() &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            synchronized (LazySingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="built_in"> instance </span>= new LazySingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然Effective java推荐枚举式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class EnumSingleton &#123;</span><br><span class="line"></span><br><span class="line">    private EnumSingleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private enum Singleton &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line"></span><br><span class="line">        private final EnumSingleton instance;</span><br><span class="line"></span><br><span class="line">        Singleton() &#123;</span><br><span class="line">           <span class="built_in"> instance </span>= new EnumSingleton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public EnumSingleton getInstance() &#123;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static EnumSingleton instance() &#123;</span><br><span class="line">        return Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我选择静态内部类式<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NiceSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NiceSingleton</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">InstanceHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> final <span class="keyword">static</span> NiceSingleton instance = <span class="keyword">new</span> NiceSingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NiceSingleton <span class="title">instance</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> InstanceHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><ul><li>为什么懒汉式单例要双重校验？</li></ul><blockquote><p>当两个线程同时调用instance()方法时，由于singleton==null，两个线程都可以通过第一个校验，<br>然后线程A持有锁，线程B等待。当线程A执行完实例化、释放锁，线程B进入代码块。</p></blockquote><blockquote><p>如果不加第二个校验，线程B又会实例化一个对象。就会违反单例模式设计原则。</p></blockquote><blockquote><p>如果不加第一个校验，也能实现单例，但多个线程反复竞争锁会增加系统开销，严重影响性能。</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://product.dangdang.com/71052.html" target="_blank" rel="noopener">设计模式 GOF</a></p><p><a href="http://product.dangdang.com/20079096.html" target="_blank" rel="noopener">研磨设计模式</a></p><p><a href="http://product.dangdang.com/24157561.html" target="_blank" rel="noopener">图解设计模式</a></p><p><a href="http://cmsblogs.com/?p=3396" target="_blank" rel="noopener">设计模式读书笔记文集</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="design" scheme="http://tech.nitaoge.com/categories/design/"/>
    
    
      <category term="看破设计模式" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>看破Elastic-Job 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/75509985/"/>
    <id>http://tech.nitaoge.com/p/75509985/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.026Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="opensource" scheme="http://tech.nitaoge.com/categories/opensource/"/>
    
    
      <category term="看破开源组件" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/"/>
    
      <category term="Elastic-Job" scheme="http://tech.nitaoge.com/tags/Elastic-Job/"/>
    
  </entry>
  
  <entry>
    <title>看破Git 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/2ab4ec8e/"/>
    <id>http://tech.nitaoge.com/p/2ab4ec8e/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.028Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="devtool" scheme="http://tech.nitaoge.com/categories/devtool/"/>
    
    
      <category term="看破Git" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Git/"/>
    
  </entry>
  
  <entry>
    <title>看破IDEA 安装、使用、配置</title>
    <link href="http://tech.nitaoge.com/p/24280e36/"/>
    <id>http://tech.nitaoge.com/p/24280e36/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.027Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="为什么我改用IDEA？"><a href="#为什么我改用IDEA？" class="headerlink" title="为什么我改用IDEA？"></a>为什么我改用IDEA？</h1><p>就eclipse每次打开都需要rebuild all projects，在网络环境及其恶劣的情况下，总是无故卡死，我就不想用它了。<br>就这么倔！</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IDEA下载地址</a></p><p>这里有很多开发工具供你选择，我开发前后端分别用到了WebStorm和IDEA。<br><img src="/images/idea/Snipaste_2019-04-15_19-05-29.png" alt="产品列表"></p><p>点击download来到下载选择页面，左边付费功能多，右边免费开源功能少。<br><img src="/images/idea/Snipaste_2019-04-15_19-08-37.png" alt="下载页面"></p><p>windows程序目录如下，Mac的Contents结构也类似：<br><img src="/images/idea/Snipaste_2019-04-15_19-16-28.png" alt="程序目录"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="开始一个项目"><a href="#开始一个项目" class="headerlink" title="开始一个项目"></a>开始一个项目</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>TODO</p><h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><p>TODO</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="程序配置文件参数"><a href="#程序配置文件参数" class="headerlink" title="程序配置文件参数"></a>程序配置文件参数</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m   <span class="comment">// 初始内存</span></span><br><span class="line">-Xmx750m   <span class="comment">// 最大内存</span></span><br><span class="line">-XX:ReservedCodeCacheSize=<span class="number">240</span>m  <span class="comment">// 代码恢复缓存</span></span><br><span class="line">-XX:+UseConcMarkSweepGC   <span class="comment">// 设置老年代为并发收集</span></span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB=<span class="number">50</span></span><br><span class="line">-ea</span><br><span class="line">-Dsun<span class="selector-class">.io</span><span class="selector-class">.useCanonCaches</span>=false</span><br><span class="line">-Djava<span class="selector-class">.net</span><span class="selector-class">.preferIPv4Stack</span>=true</span><br><span class="line">-Djdk<span class="selector-class">.http</span><span class="selector-class">.auth</span><span class="selector-class">.tunneling</span><span class="selector-class">.disabledSchemes</span>=<span class="string">""</span></span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line">-Dfile.encoding=UTF-<span class="number">8</span>   <span class="comment">// 文件编码集，解决控制台输出乱码问题</span></span><br><span class="line">-Deditable<span class="selector-class">.java</span><span class="selector-class">.test</span><span class="selector-class">.console</span>=true   <span class="comment">// 解决Junit @Test不能使用控制台输入问题</span></span><br></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>常用快捷键</li></ul><p>TODO</p><ul><li>自定义快捷键</li></ul><p>Settings -&gt; Keymap</p><h2 id="代码模版"><a href="#代码模版" class="headerlink" title="代码模版"></a>代码模版</h2><ul><li>自定义代码模版</li></ul><p>Settings -&gt; Editor -&gt; Live Templates</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="devtool" scheme="http://tech.nitaoge.com/categories/devtool/"/>
    
    
      <category term="看破IDEA" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4IDEA/"/>
    
  </entry>
  
  <entry>
    <title>看破Jenkins 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/17293ae1/"/>
    <id>http://tech.nitaoge.com/p/17293ae1/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.587Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="jenkins" scheme="http://tech.nitaoge.com/categories/jenkins/"/>
    
    
      <category term="看破Jenkins" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 1.核心语法</title>
    <link href="http://tech.nitaoge.com/p/195fb869/"/>
    <id>http://tech.nitaoge.com/p/195fb869/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.586Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>重新梳理一下JAVA开发中常用到的核心语法，随遇到随补充……</p><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>将变量和方法封装成一个类，通过实例化的方式赋予其为对象。</p><p>可以看下八大基本数据类型的包装类加深理解：</p><ul><li>怎么包装成类的？</li><li>怎么继承Number实现obj.xxxValue()的？</li><li>怎么实现自动拆箱装箱的？</li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>子类继承超类允许的属性和方法。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>在类的内部声明类，就是内部类。<br>特性：</p><ul><li>可以通过声明多个内部类，实现多继承。</li><li>内部类可直接访问外部类成员变量和方法，但外部类访问内部类的成员需要实例化内部类。</li><li>提供更好的封装。</li></ul><h2 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h2><p>{<br>}<br>在类中跟构造方法类似，都是在实例化对象时执行。</p><h2 id="实例化内部类"><a href="#实例化内部类" class="headerlink" title="实例化内部类"></a>实例化内部类</h2><p>没什么好说的，直接上代码……<br>拥有内部类的类：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelf</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySelf</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实例化：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySelf mySelf = new MySelf();</span><br><span class="line">MySelf.<span class="builtin-name">Info</span> myInfo = mySelf.new <span class="builtin-name">Info</span>(12);</span><br><span class="line">LogUtils.<span class="builtin-name">info</span>(myInfo.getAge());</span><br></pre></td></tr></table></figure></p><p>为MySelf.Info加上static修饰，实例化：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MySelf.<span class="builtin-name">Info</span> myInfo = new MySelf.<span class="builtin-name">Info</span>(12);</span><br><span class="line">LogUtils.<span class="builtin-name">info</span>(myInfo.getAge());</span><br></pre></td></tr></table></figure></p><h2 id="继承内部类"><a href="#继承内部类" class="headerlink" title="继承内部类"></a>继承内部类</h2><p>需要通过外部类实例引用外部类构造器，才能继承内部类，没这么玩的。太反人类……<br>父类：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelf</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySelf</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子类：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MySon</span> <span class="keyword">extends</span> <span class="title">MySelf</span>.<span class="title">Info</span> </span>&#123;</span><br><span class="line">    public <span class="type">MySon</span>(<span class="type">MySelf</span> mySelf) &#123;</span><br><span class="line">        mySelf.<span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>在实例化前内部继承抽象类并实现抽象方法，或内部实现接口并实现接口所有方法。<br>类似这样：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MySelf son = <span class="keyword">new</span> <span class="type">MySon</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> void <span class="keyword">set</span>(<span class="keyword">String</span> id) &#123;</span><br><span class="line"><span class="built_in">this</span>.setId(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">LogUtils.info(((MySon) son).<span class="keyword">get</span>());</span><br></pre></td></tr></table></figure></p><h2 id="this-和-super"><a href="#this-和-super" class="headerlink" title="this 和 super"></a>this 和 super</h2><p>this指当前对象本身<br>super指当前对象最近超（父）类</p><p>在构造方法中使用super()和this()应该注意：</p><ul><li>super()调用父类的构造方法，this()调用当前类的其它构造方法。</li><li>每个子类构造方法的第一条语句，都隐式调用super()，如果父类没有这种形式的构造函数，会编译报错。</li><li>super()和this()均需放在构造方法内第一行，一个构造方法内只能调用其中一个。</li><li>this()和super()都指向对象，所以不能在static方法，static语句块中使用。</li></ul><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="静态绑定"><a href="#静态绑定" class="headerlink" title="静态绑定"></a>静态绑定</h2><p>在编译阶段就能确定调用哪个方法的方式，叫静态绑定机制。</p><h2 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h2><p>根据实际创建的对象类型来确定方法所在位置，通过动态创建的对象方法表来定位方法的方式，叫动态绑定机制。</p><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><h2 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h2><p>Java修饰符中用来控制访问权限的，分为以下四种：</p><ul><li>类内可访问（private）</li><li>包内可访问 (缺省。有人说是default，但在jdk8中default用于修饰接口默认方法，写在代码里尝试过确实不是)</li><li>子类可访问 (protected)</li><li>均可访问 (public)</li></ul><p>以下用表格说明各修饰符区别：</p><table><thead><tr><th style="text-align:left">修饰符</th><th style="text-align:center">当前类</th><th style="text-align:center">包内</th><th style="text-align:center">子孙类（包内）</th><th style="text-align:center">子孙类（不同包）</th><th style="text-align:center">其他包</th></tr></thead><tbody><tr><td style="text-align:left">public</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td></tr><tr><td style="text-align:left">protected</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y/N</td><td style="text-align:center">N</td></tr><tr><td style="text-align:left">缺省</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">N</td><td style="text-align:center">N</td></tr><tr><td style="text-align:left">private</td><td style="text-align:center">Y</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">N</td></tr></tbody></table><blockquote><p>这里要特别说明protected作用，也就是上面那个Y/N：</p><ul><li>允许同一包内的类任意调用。</li><li>不在同一包内的类，只允许子孙类调用，不在家谱上的类不能调用</li></ul></blockquote><p>默认缺省值：</p><ul><li>类中的变量和方法都是<code>public</code>，构造函数为<code>缺省</code>。</li><li>接口中的变量为<code>public static final</code>，方法为<code>public</code>。</li></ul><p>访问控制的继承：</p><ul><li>父类声明为public的变量和方法，子类也必须声明为public。</li><li>父类声明为protected的变量和方法，子类可以声明为protected或public。</li><li>父类声明为private的方法，不能被继承。</li></ul><h2 id="非访问控制修饰符"><a href="#非访问控制修饰符" class="headerlink" title="非访问控制修饰符"></a>非访问控制修饰符</h2><h3 id="静态修饰符static"><a href="#静态修饰符static" class="headerlink" title="静态修饰符static"></a>静态修饰符static</h3><p>用于修饰静态方法和静态变量。</p><ul><li>一个类无论实例化了多少个对象，类的静态变量和静态方法都指向一块固定的内存区，修改任意实例中的静态变量都为最终修改值。</li><li>静态方法中只能使用静态变量。</li><li>二者可以通过Class.member，Class.method()的方式直接调用。</li><li>可以修饰静态内部类</li></ul><h3 id="static-代码块"><a href="#static-代码块" class="headerlink" title="static{} 代码块"></a>static{} 代码块</h3><p>在JVM的生命周期中只被加载一次，是伴随类加载执行的。<br>不管怎么实例化这个类，都只执行一次。</p><h3 id="最终修饰符final"><a href="#最终修饰符final" class="headerlink" title="最终修饰符final"></a>最终修饰符final</h3><p>修饰常量、修饰不可继承类，修饰可继承但不能重写的方法。</p><h3 id="抽象类修饰符abstract"><a href="#抽象类修饰符abstract" class="headerlink" title="抽象类修饰符abstract"></a>抽象类修饰符abstract</h3><p>抽象类不能被final修饰，可以包含抽象方法和非抽象方法。<br>抽象方法不能被final和static修饰，不能有方法体，继承抽象类的子类必须实现父类的所有抽象方法，除非子类也是抽象类。</p><p>注意：抽象类是不能被实例化的！！！<br>除非你使用匿名内部类的方式实现它的抽象方法，然后实例化这个匿名内部类，比如：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MySelf son = <span class="keyword">new</span> <span class="type">MySon</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> void <span class="keyword">set</span>(<span class="keyword">String</span> id) &#123;</span><br><span class="line"><span class="built_in">this</span>.setId(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">LogUtils.info(((MySon) son).<span class="keyword">get</span>());</span><br></pre></td></tr></table></figure></p><p>但是！这么写属于<em><strong><em>反人类</em></strong></em>设计模式，不推荐这样写。</p><h3 id="接口默认实现方法default-jdk8"><a href="#接口默认实现方法default-jdk8" class="headerlink" title="接口默认实现方法default (jdk8)"></a>接口默认实现方法default (jdk8)</h3><p>在interface中实现默认方法需要加default修饰，必须为public公有<br>这和抽象类中可以有protected抽象方法和private成员变量有区别</p><h3 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h3><p>实现了Serilizable接口的POJO，在不需要对类中某个成员变量进行序列化时，可以使用transient修饰该成员变量。反序列化时该成员变量无法获得访问，值为null。</p><blockquote><p>在实际开发过程中，有些属性需要序列化，有些不需要，比如一些敏感信息（如身份证，密码，银行卡号等）不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。</p></blockquote><ul><li>只能修饰成员变量，类、方法、本地变量均不能修饰。</li><li>静态变量不能被序列化。</li></ul><h3 id="synchronized和volatile"><a href="#synchronized和volatile" class="headerlink" title="synchronized和volatile"></a>synchronized和volatile</h3><p>synchronized修饰多线程中的同步锁<br>volatile修饰多线程中的共享变量</p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p><img src="https://user-gold-cdn.xitu.io/2018/8/10/165242e52c2beee2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="异常继承关系"></p><ul><li>Error</li></ul><p>Error一般表示编译时或者系统错误，例如：虚拟机相关的错误，系统崩溃（例如：OutOfMemoryError）等。这种错误无法恢复或不可捕获,将导致应用程序中断,通常应用程序无法处理这些错误,因此也不应该试图用catch来进行捕获。</p><ul><li>Exception</li></ul><p>Exception分为<strong>受检查异常</strong>和<strong>运行时异常</strong>（不受检查异常）。</p><p>编译器在编译时，对于<strong>受检查异常</strong>必须进行try…catch或throws处理,否则无法通过编译。常见的受检查异常包括：IO操作、ClassNotFoundException、线程操作等。</p><p>RuntimeException及其子类都统称为<strong>非受检查异常</strong>，例如：NullPointExecrption、NumberFormatException（字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等。</p><h2 id="try-with-resources-jdk7"><a href="#try-with-resources-jdk7" class="headerlink" title="try-with-resources(jdk7)"></a>try-with-resources(jdk7)</h2><p>在try()括号中打开的资源会在语句执行结束时关闭。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(path));</span><br><span class="line">    BufferedWriter bw = <span class="keyword">new</span> <span class="type">BufferedWriter</span>(<span class="keyword">new</span> <span class="type">FileWriter</span>(path));</span><br><span class="line">)&#123;</span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try catch finally"></a>try catch finally</h2><p>首先看这段代码<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ++x;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ++x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果是2而不是3，finally到底执行了吗？<br>经打断点运行确认，finally执行后x为3，又执行到return，返回结果为2。</p><p>查阅<a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/finally.html" target="_blank" rel="noopener">官方finally语句说明</a>，对这个特殊情况有说明：</p><blockquote><p>The finally block always executes when the try block exits. This ensures that the finally block is executed even if an unexpected exception occurs. But finally is useful for more than just exception handling — it allows the programmer to avoid having cleanup code accidentally bypassed by a return, continue, or break. Putting cleanup code in a finally block is always a good practice, even when no exceptions are anticipated.</p></blockquote><blockquote><blockquote><p>Note: If the JVM exits while the try or catch code is being executed, then the finally block may not execute. Likewise, if the thread executing the try or catch code is interrupted or killed, the finally block may not execute even though the application as a whole continues.</p></blockquote></blockquote><p>翻译：</p><blockquote><p>当try语句退出时肯定会执行finally语句。这确保了即使发了一个意想不到的异常也会执行finally语句块。但是finally的用处不仅是用来处理异常——它可以让程序员不会因为return、continue、或者break语句而忽略了清理代码。把清理代码放在finally语句块里是一个很好的做法，即便可能不会有异常发生也要这样做。</p><blockquote><p>注意，当try或者catch的代码在运行的时候，JVM退出了。那么finally语句块就不会执行。同样，如果线程在运行try或者catch的代码时被中断了或者被杀死了(killed)，那么finally语句可能也不会执行了，即使整个运用还会继续执行。</p></blockquote></blockquote><p>这说明只要进程(jvm)不死,线程(thread)不被中断，finally就必须执行。</p><ul><li>那么为什么返回结果为2呢？</li></ul><p>查阅<a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10.2.5" target="_blank" rel="noopener">官方jvm文档</a>，</p><blockquote><p>If the try clause executes a return, the compiled code does the following:</p><blockquote><p>1.Saves the return value (if any) in a local variable.<br>2.Executes a jsr to the code for the finally clause.<br>3.Upon return from the finally clause, returns the value saved in the local variable.</p></blockquote></blockquote><p>翻译：</p><blockquote><p>如果try语句里有return，那么代码的行为如下：</p><blockquote><p>1.如果有返回值，就把返回值保存到局部变量中<br>2.执行jsr指令跳到finally语句里执行<br>3.执行完finally语句后，返回之前保存在局部变量表里的值</p></blockquote></blockquote><p>根据上面的说明就可以明白为什么是2了。<br>当执行到return ++x;时，jvm在执行完++x后会在局部变量表里另外分配一个空间来保存当前x的值。<br>注意，现在还没把值返回，而是继续执行finally语句里的语句。等执行完后再把之前保存的值（是2不是x）返回。<br>所以就有了返回结果是2不是3的情况。</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>类型参数化，可以看下集合的实现。</p><p>未知泛型参数方法需要在返回值类型前声明泛型。</p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>修饰构造器、成员变量类型、成员方法、方法参数等，用于反射拿值逻辑处理。</p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ul><li>@Target （作用域）</li></ul><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line"><span class="built_in">   TYPE,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line"><span class="built_in">   FIELD,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Method declaration */</span></span><br><span class="line"><span class="built_in">   METHOD,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line"><span class="built_in">   PARAMETER,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Constructor declaration */</span></span><br><span class="line"><span class="built_in">   CONSTRUCTOR,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Local variable declaration */</span></span><br><span class="line"><span class="built_in">   LOCAL_VARIABLE,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Annotation type declaration */</span></span><br><span class="line"><span class="built_in">   ANNOTATION_TYPE,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Package declaration */</span></span><br><span class="line"><span class="built_in">   PACKAGE,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Type parameter declaration</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @since 1.8</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="built_in">   TYPE_PARAMETER,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Use of a type</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @since 1.8</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   TYPE_USE</span><br></pre></td></tr></table></figure><ul><li>@Retention （保留策略）</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Annotations are <span class="keyword">to</span> be discarded <span class="keyword">by</span> <span class="keyword">the</span> compiler.</span><br><span class="line">    */</span><br><span class="line">   SOURCE,</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * Annotations are <span class="keyword">to</span> be recorded <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">class</span> <span class="built_in">file</span> <span class="keyword">by</span> <span class="keyword">the</span> compiler</span><br><span class="line">    * <span class="keyword">but</span> need <span class="keyword">not</span> be retained <span class="keyword">by</span> <span class="keyword">the</span> VM <span class="keyword">at</span> <span class="built_in">run</span> <span class="built_in">time</span>.  This <span class="keyword">is</span> <span class="keyword">the</span> default</span><br><span class="line">    * behavior.</span><br><span class="line">    */</span><br><span class="line">   CLASS,</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * Annotations are <span class="keyword">to</span> be recorded <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">class</span> <span class="built_in">file</span> <span class="keyword">by</span> <span class="keyword">the</span> compiler <span class="keyword">and</span></span><br><span class="line">    * retained <span class="keyword">by</span> <span class="keyword">the</span> VM <span class="keyword">at</span> <span class="built_in">run</span> <span class="built_in">time</span>, so they may be <span class="built_in">read</span> reflectively.</span><br><span class="line">    *</span><br><span class="line">    * @see java.lang.reflect.AnnotatedElement</span><br><span class="line">    */</span><br><span class="line">   RUNTIME</span><br></pre></td></tr></table></figure><p>比如Lombok的所有注解都是保留在源码阶段的，</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line">public <span class="variable">@interface</span> Data &#123;</span><br></pre></td></tr></table></figure><ul><li>@Repeatable （重复注解）</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Indicates the &lt;em&gt;containing <span class="keyword">annotation</span> <span class="title">type</span>&lt;/<span class="title">em</span>&gt; <span class="title">for</span> <span class="title">the</span></span><br><span class="line"> * repeatable <span class="keyword">annotation</span> <span class="title">type</span>.</span><br><span class="line"> * @<span class="keyword">return</span> the containing <span class="keyword">annotation</span> <span class="title">type</span></span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">Class&lt;? extends Annotation&gt; value();</span></span><br></pre></td></tr></table></figure><h2 id="重复注解-jdk8"><a href="#重复注解-jdk8" class="headerlink" title="重复注解(jdk8)"></a>重复注解(jdk8)</h2><p>注解容器：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">public <span class="variable">@interface</span> MyAnnotations &#123;</span><br><span class="line">    <span class="selector-tag">MyAnnotation</span><span class="selector-attr">[]</span> <span class="selector-tag">value</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Target</span>(&#123;<span class="selector-tag">ElementType</span><span class="selector-class">.CONSTRUCTOR</span>, <span class="selector-tag">ElementType</span><span class="selector-class">.METHOD</span>, <span class="selector-tag">ElementType</span><span class="selector-class">.PARAMETER</span>, <span class="selector-tag">ElementType</span><span class="selector-class">.FIELD</span>, <span class="selector-tag">ElementType</span><span class="selector-class">.ANNOTATION_TYPE</span>&#125;)</span><br><span class="line">@<span class="keyword">Retention</span>(<span class="keyword">RetentionPolicy</span>.<span class="keyword">RUNTIME</span>)</span><br><span class="line">@<span class="keyword">Repeatable</span>(<span class="keyword">MyAnnotations</span>.<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">public</span> @interface MyAnnotation &#123;</span><br><span class="line">    <span class="selector-tag">String</span> <span class="selector-tag">value</span>() <span class="selector-tag">default</span> "<span class="selector-tag">aaa</span>";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@MyAnnotation</span>(<span class="string">"bbb"</span>)</span><br><span class="line">   <span class="variable">@MyAnnotation</span>(<span class="string">"ccc"</span>)</span><br><span class="line">   public void callback() &#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="提取注解属性"><a href="#提取注解属性" class="headerlink" title="提取注解属性"></a>提取注解属性</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;AnnotationTest&gt; clazz = AnnotationTest.class;</span><br><span class="line">   Method m1 = clazz.getMethod(<span class="string">"callback"</span>);</span><br><span class="line">   MyAnnotation[] ans = m1.getAnnotationsByType(MyAnnotation.class);</span><br><span class="line">   Arrays.asList<span class="function"><span class="params">(ans)</span>.<span class="title">forEach</span><span class="params">((a) -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      System.out.println(a.value());</span></span></span><br><span class="line"><span class="function"><span class="params">   &#125;)</span>;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bbb</span></span><br><span class="line"><span class="keyword">ccc</span></span><br></pre></td></tr></table></figure><h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><h2 id="强引用（StrongReference）"><a href="#强引用（StrongReference）" class="headerlink" title="强引用（StrongReference）"></a>强引用（StrongReference）</h2><p>如果一个对象具有强引用，那垃圾回收器绝不会回收它。<br>当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，<br>也不会靠随意回收具有强引用的对象来解决内存不足的问题。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span>[] arr = <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="软引用（SoftReference）"><a href="#软引用（SoftReference）" class="headerlink" title="软引用（SoftReference）"></a>软引用（SoftReference）</h2><p>如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；<br>如果内存空间不足了，就会回收这些对象的内存。<br>只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。</p><p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;<span class="keyword">String</span>[]&gt; referenceQueue = <span class="keyword">new</span> <span class="type">ReferenceQueue</span>&lt;<span class="keyword">String</span>[]&gt;();</span><br><span class="line">SoftReference&lt;<span class="keyword">String</span>[]&gt; softBean = <span class="keyword">new</span> <span class="type">SoftReference</span>&lt;<span class="keyword">String</span>[]&gt;(<span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;, referenceQueue);</span><br></pre></td></tr></table></figure><h2 id="弱引用（WeakReference）"><a href="#弱引用（WeakReference）" class="headerlink" title="弱引用（WeakReference）"></a>弱引用（WeakReference）</h2><p>在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，<br>不管当前内存空间足够与否，都会回收它的内存。<br>不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p><p>弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;<span class="keyword">String</span>[]&gt; referenceQueue = <span class="keyword">new</span> <span class="type">ReferenceQueue</span>&lt;<span class="keyword">String</span>[]&gt;();</span><br><span class="line">WeakReference&lt;<span class="keyword">String</span>[]&gt; softBean = <span class="keyword">new</span> <span class="type">WeakReference</span>&lt;<span class="keyword">String</span>[]&gt;(<span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;, referenceQueue);</span><br></pre></td></tr></table></figure><h2 id="虚引用（PhantomReference）"><a href="#虚引用（PhantomReference）" class="headerlink" title="虚引用（PhantomReference）"></a>虚引用（PhantomReference）</h2><p>与其他几种引用都不同，虚引用并不会决定对象的生命周期。<br>如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。<br>虚引用主要用来跟踪对象被垃圾回收器回收的活动。</p><p>虚引用必须和引用队列 （ReferenceQueue）联合使用，当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;<span class="keyword">String</span>[]&gt; referenceQueue = <span class="keyword">new</span> <span class="type">ReferenceQueue</span>&lt;<span class="keyword">String</span>[]&gt;();</span><br><span class="line">PhantomReference&lt;<span class="keyword">String</span>[]&gt; referent = <span class="keyword">new</span> <span class="type">PhantomReference</span>&lt;<span class="keyword">String</span>&gt;(<span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;, referenceQueue);</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>详细内容及基本语法请参考：</p><p><a href="http://www.runoob.com/java/java-tutorial.html" target="_blank" rel="noopener">JAVA | 菜鸟教程</a></p><p><a href="http://product.dangdang.com/1395624125.html" target="_blank" rel="noopener">Java编程思想</a></p><p><a href="http://product.dangdang.com/1294027177.html" target="_blank" rel="noopener">Java核心技术卷I基础知识 | Java核心技术卷II高级特性</a></p><p><a href="http://product.dangdang.com/26437835.html" target="_blank" rel="noopener">Effective Java中文版</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破Gradle 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/18a22795/"/>
    <id>http://tech.nitaoge.com/p/18a22795/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.585Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="gradle" scheme="http://tech.nitaoge.com/categories/gradle/"/>
    
    
      <category term="看破Gradle" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Gradle/"/>
    
  </entry>
  
  <entry>
    <title>看破Tcpcopy 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/f9d0a7b1/"/>
    <id>http://tech.nitaoge.com/p/f9d0a7b1/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:40:52.459Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="testtool" scheme="http://tech.nitaoge.com/categories/testtool/"/>
    
    
      <category term="看破Tcpcopy" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Tcpcopy/"/>
    
  </entry>
  
  <entry>
    <title>看破JVM 1.</title>
    <link href="http://tech.nitaoge.com/p/fc61a33c/"/>
    <id>http://tech.nitaoge.com/p/fc61a33c/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.587Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="jvm" scheme="http://tech.nitaoge.com/categories/jvm/"/>
    
    
      <category term="看破JVM" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4JVM/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 3.JDK8 Core</title>
    <link href="http://tech.nitaoge.com/p/c46700a5/"/>
    <id>http://tech.nitaoge.com/p/c46700a5/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.586Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 5.IO、Socket</title>
    <link href="http://tech.nitaoge.com/p/6a43eebc/"/>
    <id>http://tech.nitaoge.com/p/6a43eebc/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.025Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 6.NIO</title>
    <link href="http://tech.nitaoge.com/p/e269c416/"/>
    <id>http://tech.nitaoge.com/p/e269c416/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:40:52.457Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 7.AIO</title>
    <link href="http://tech.nitaoge.com/p/d455aa9b/"/>
    <id>http://tech.nitaoge.com/p/d455aa9b/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:40:52.458Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破LinuxCommand 1.基础使用命令</title>
    <link href="http://tech.nitaoge.com/p/963f6fb2/"/>
    <id>http://tech.nitaoge.com/p/963f6fb2/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.588Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="linuxcmd" scheme="http://tech.nitaoge.com/categories/linuxcmd/"/>
    
    
      <category term="看破LinuxCommand" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4LinuxCommand/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 4.集合</title>
    <link href="http://tech.nitaoge.com/p/ff55f559/"/>
    <id>http://tech.nitaoge.com/p/ff55f559/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.587Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>下面对jdk8的集合做一次深入，<br>所有传统集合都在rt.jar的java.util包中，<br>1.5后开发的并发集合都在java.util.concurrent包中。</p><h1 id="java-util-Collection"><a href="#java-util-Collection" class="headerlink" title="java.util.Collection"></a>java.util.Collection</h1><p>Collection接口继承Iterable接口，用于继承迭代遍历集合元素的方法。</p><p>List、Set、Queue这三个接口都继承自Collection接口、用于规范所有集合的共性方法。<br>AbstractCollection抽象集合类又实现了Collection的部分方法，<br>AbstractList、AbstractSet、AbstractQueue这三个抽象类也都继承了AbstractCollection。</p><h2 id="List-列表"><a href="#List-列表" class="headerlink" title="List 列表"></a>List 列表</h2><p>列表接口，提供一些方法标准，诸如add()、addAll()、get()、remove()、clear()等，供其子类具体实现。</p><p>这里还要提到AbstractList和AbstractSequentialList这两个抽象类，AbstractSequentialList继承自AbstractList，<br>这两个类的作用，其实就是在实现List接口的基础上，又增加了一层抽象，添加和实现了一些个性化方法。</p><p>AbstractList支持随机访问，而AbstractSequentialList只支持迭代访问。<br>这也是ArrayList和LinkedList，线性表和链表的区别之一。</p><h3 id="ArrayList-线性表"><a href="#ArrayList-线性表" class="headerlink" title="ArrayList 线性表"></a>ArrayList 线性表</h3><p>基于数组实现，继承AbstractList类，默认长度是10。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ArrayList&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractList&lt;E&gt;</span></span></span><br><span class="line"><span class="class">        <span class="title">implements</span> <span class="title">List&lt;E&gt;</span>, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">/**</span></span></span><br><span class="line"><span class="class">     <span class="title">*</span> <span class="title">Default</span> <span class="title">initial</span> <span class="title">capacity</span>.</span></span><br><span class="line"><span class="class">     <span class="title">*/</span></span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">static</span> <span class="title">final</span> <span class="title">int</span> <span class="title">DEFAULT_CAPACITY</span> </span>= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">transient <span class="type">Object</span>[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line">    <span class="keyword">private</span> int size;</span><br></pre></td></tr></table></figure></p><p>每次固定扩容size+1 + (size+1) &gt;&gt; 1这个数量长度。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">       elementData[size++] = e;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">           grow(minCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>方法内没有同步锁修饰，所以非线程安全。</p><p>它的增删操作是按照线性表的规则，如果增删都在末尾，则直接操作；否则需要元素移位，所以增删效率很低。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void add(<span class="built_in">int</span> <span class="built_in">index</span>, E element) &#123;</span><br><span class="line">       rangeCheckForAdd(<span class="built_in">index</span>);</span><br><span class="line"></span><br><span class="line">       ensureCapacityInternal(<span class="built_in">size</span> + <span class="number">1</span>);  // Increments modCount<span class="comment">!!</span></span><br><span class="line">       System.arraycopy(elementData, <span class="built_in">index</span>, elementData, <span class="built_in">index</span> + <span class="number">1</span>,</span><br><span class="line">                        <span class="built_in">size</span> - <span class="built_in">index</span>);</span><br><span class="line">       elementData[<span class="built_in">index</span>] = element;</span><br><span class="line">       <span class="built_in">size</span>++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> E remove(<span class="built_in">int</span> <span class="built_in">index</span>) &#123;</span><br><span class="line">       rangeCheck(<span class="built_in">index</span>);</span><br><span class="line"></span><br><span class="line">       modCount++;</span><br><span class="line">       E oldValue = elementData(<span class="built_in">index</span>);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - <span class="built_in">index</span> - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">           System.arraycopy(elementData, <span class="built_in">index</span>+<span class="number">1</span>, elementData, <span class="built_in">index</span>,</span><br><span class="line">                            numMoved);</span><br><span class="line">       elementData[--<span class="built_in">size</span>] = null; // clear to let GC <span class="keyword">do</span> its work</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> oldValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>但获取、设置元素是根据索引直接定位的，所以效率高。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E get(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">     rangeCheck(<span class="keyword">index</span>);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> elementData(<span class="keyword">index</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> E elementData(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> (E) elementData[<span class="keyword">index</span>];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="LinkedList-双链表"><a href="#LinkedList-双链表" class="headerlink" title="LinkedList 双链表"></a>LinkedList 双链表</h3><p>继承AbstractSequentialList类，实现了List和Deque，说明也可以充当栈和队列。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">   <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">   <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure></p><p>节点属性<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private static class <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; next;</span><br><span class="line">    <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Node</span><span class="title">(Node</span><span class="tag">&lt;E&gt;</span> prev, E element, <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; next) &#123;</span><br><span class="line">        this.item = element;</span><br><span class="line">        this.next = next;</span><br><span class="line">        this.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法内没有同步锁修饰，所以非线程安全。</p><p>它的增删操作是按照链表的规则，修改前后节点的索引即可，所以效率高。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">boolean</span> add(E e) &#123;</span><br><span class="line">       linkLast(e);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">void</span> linkLast(E e) &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">       last = newNode;</span><br><span class="line">       <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">           first = newNode;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           l.<span class="keyword">next</span> = newNode;</span><br><span class="line">       <span class="keyword">size</span>++;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> add(<span class="keyword">int</span> index, E element) &#123;</span><br><span class="line">       checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (index == <span class="keyword">size</span>)</span><br><span class="line">           linkLast(element);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           linkBefore(element, node(index));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">void</span> linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class="line">       <span class="comment">// assert succ != null;</span></span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">       succ.prev = newNode;</span><br><span class="line">       <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">           first = newNode;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           pred.<span class="keyword">next</span> = newNode;</span><br><span class="line">       <span class="keyword">size</span>++;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> remove(Object o) &#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.<span class="keyword">next</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.<span class="keyword">next</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">public</span> E remove(<span class="keyword">int</span> index) &#123;</span><br><span class="line">       checkElementIndex(index);</span><br><span class="line">       <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">   &#125;</span><br><span class="line">   E unlink(Node&lt;E&gt; x) &#123;</span><br><span class="line">       <span class="comment">// assert x != null;</span></span><br><span class="line">       <span class="keyword">final</span> E element = x.item;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; <span class="keyword">next</span> = x.<span class="keyword">next</span>;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">           first = <span class="keyword">next</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           prev.<span class="keyword">next</span> = <span class="keyword">next</span>;</span><br><span class="line">           x.prev = <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">next</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">           last = prev;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">next</span>.prev = prev;</span><br><span class="line">           x.<span class="keyword">next</span> = <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       x.item = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">size</span>--;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">return</span> element;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>但获取、设置元素是需要遍历定位的，所以效率低。<br><figure class="highlight irpf90"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E get(<span class="built_in">int</span> <span class="built_in">index</span>) &#123;</span><br><span class="line">    checkElementIndex(<span class="built_in">index</span>);</span><br><span class="line">    <span class="keyword">return</span> node(<span class="built_in">index</span>).item;</span><br><span class="line">&#125;</span><br><span class="line">Node&lt;E&gt; node(<span class="built_in">int</span> <span class="built_in">index</span>) &#123;</span><br><span class="line">    // <span class="keyword">assert</span> isElementIndex(<span class="built_in">index</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">index</span> &lt; (<span class="built_in">size</span> &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">index</span>; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="built_in">size</span> - <span class="number">1</span>; i &gt; <span class="built_in">index</span>; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Vector-向量"><a href="#Vector-向量" class="headerlink" title="Vector 向量"></a>Vector 向量</h3><p>基于数组实现，继承AbstractList类，默认长度是10。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;E&gt;</span></span><br><span class="line"><span class="class">   <span class="title">extends</span> <span class="title">AbstractList</span>&lt;E&gt;</span></span><br><span class="line"><span class="class">   <span class="title">implements</span> <span class="title">List</span>&lt;E&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">protected</span> <span class="title">Object</span>[] <span class="title">elementData</span>;</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> elementCount;</span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所有方法都带同步锁修饰，所以是线程安全的，但效率极低……<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">synchronized </span><span class="keyword">boolean </span><span class="keyword">add(E </span>e) &#123;</span><br><span class="line">     modCount++<span class="comment">;</span></span><br><span class="line">     ensureCapacityHelper(elementCount + <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">     elementData[elementCount++] = e<span class="comment">;</span></span><br><span class="line">     return true<span class="comment">;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>默认每次扩容1倍，如果在初始化时指定capacityIncrement，则每次扩容capacityIncrement，最大长度为Integer.MAX_VALUE，超长报OutOfMemoryError错误。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> synchronized <span class="keyword">boolean</span> add(E e) &#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">       elementData[elementCount++] = e;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> grow(<span class="keyword">int</span> minCapacity) &#123;</span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                        capacityIncrement : oldCapacity);</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> hugeCapacity(<span class="keyword">int</span> minCapacity) &#123;</span><br><span class="line">       <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">       <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">           Integer.MAX_VALUE :</span><br><span class="line">           MAX_ARRAY_SIZE;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">public</span> synchronized <span class="keyword">void</span> removeElementAt(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">index</span> &gt;= elementCount) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="keyword">index</span> + <span class="string">" &gt;= "</span> +</span><br><span class="line">                                                    elementCount);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">index</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="keyword">index</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> j = elementCount - <span class="keyword">index</span> - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           System.arraycopy(elementData, <span class="keyword">index</span> + <span class="number">1</span>, elementData, <span class="keyword">index</span>, j);</span><br><span class="line">       &#125;</span><br><span class="line">       elementCount--;</span><br><span class="line">       elementData[elementCount] = <span class="keyword">null</span>; <span class="comment">/* to let gc do its work */</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="Stack-栈"><a href="#Stack-栈" class="headerlink" title="Stack 栈"></a>Stack 栈</h4><p>是一个栈（后进先出）数据结构的实现，入栈出栈，继承Vector向量。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Stack&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">Vector&lt;E&gt;</span> </span>&#123;</span><br></pre></td></tr></table></figure></p><p>也是基于Vector向量的数组实现，也是线程安全、效率低。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="function">E <span class="title">push</span><span class="params">(E item)</span> </span>&#123;</span><br><span class="line">       addElement(item);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> item;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">addElement</span><span class="params">(E obj)</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">       elementData[elementCount++] = obj;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       E       obj;</span><br><span class="line">       <span class="keyword">int</span>     len = size();</span><br><span class="line"></span><br><span class="line">       obj = peek();</span><br><span class="line">       removeElementAt(len - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> obj;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>     len = size();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">       <span class="function"><span class="keyword">return</span> <span class="title">elementAt</span><span class="params">(len - <span class="number">1</span>)</span></span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><ul><li>这个栈的实现已经没人用了，可以通过ArrayDeque双端队列实现栈的需求。</li></ul><h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h2><p>主要特性为集合中不能存在重复元素（复合类型实例需要重写equals()和hashCode()实现去重），<br>其实现类分为无序集合、排序集合、枚举集合三种。</p><h3 id="HashSet-哈希集合"><a href="#HashSet-哈希集合" class="headerlink" title="HashSet 哈希集合"></a>HashSet 哈希集合</h3><p>基于HashMap实现，继承AbstractSet抽象集合。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;E&gt;</span></span><br><span class="line"><span class="class">   <span class="title">extends</span> <span class="title">AbstractSet</span>&lt;E&gt;</span></span><br><span class="line"><span class="class">   <span class="title">implements</span> <span class="title">Set</span>&lt;E&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">private</span> <span class="title">transient</span> <span class="title">HashMap</span>&lt;E,Object&gt; <span class="title">map</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">   &#125;</span><br><span class="line">   HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, boolean dummy) &#123;</span><br><span class="line">       <span class="built_in">map</span> = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>实际上就是将HashMap中的key作为容器，实现无序集合。所以这里的无序是由HashMap的key自然排序导致的。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Object</span> PRESENT = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">map</span>.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> o) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">map</span>.remove(o)==PRESENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="LinkedHashSet-链式哈希集合"><a href="#LinkedHashSet-链式哈希集合" class="headerlink" title="LinkedHashSet 链式哈希集合"></a>LinkedHashSet 链式哈希集合</h4><p>基于LinkedHashMap实现，继承HashSet类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">   <span class="keyword">extends</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">   <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(<span class="number">16</span>, .<span class="number">75f</span>, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(initialCapacity, .<span class="number">75f</span>, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) &#123;</span><br><span class="line">       map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>增删操作与HashSet相同，对LinkedHashMap的key操作，但它是有序的。</p><h3 id="TreeSet-树集合"><a href="#TreeSet-树集合" class="headerlink" title="TreeSet 树集合"></a>TreeSet 树集合</h3><p>基于TreeMap实现，继承AbstractSet类。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TreeSet&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractSet&lt;E&gt;</span></span></span><br><span class="line"><span class="class">   <span class="title">implements</span> <span class="title">NavigableSet&lt;E&gt;</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">   <span class="title">public</span> <span class="title">TreeSet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(<span class="keyword">new</span> <span class="type">TreeMap</span>&lt;<span class="type">E</span>,<span class="type">Object</span>&gt;());</span><br><span class="line">   &#125;</span><br><span class="line">public <span class="type">TreeSet</span>(<span class="type">Comparator</span>&lt;? <span class="keyword">super</span> <span class="type">E</span>&gt; comparator) &#123;</span><br><span class="line">       <span class="keyword">this</span>(<span class="keyword">new</span> <span class="type">TreeMap</span>&lt;&gt;(comparator));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>增删操作与HashSet相同，对TreeMap的key操作，可以指定比较器进行排序控制，默认是自然排序。<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;<span class="function"><span class="params">((a, b) -&gt; -a.compareTo(b))</span>;</span></span><br><span class="line"><span class="function"> <span class="title">treeSet</span>.<span class="title">add</span><span class="params">(<span class="string">"b"</span>)</span>;</span></span><br><span class="line"><span class="function"> <span class="title">treeSet</span>.<span class="title">add</span><span class="params">(<span class="string">"a"</span>)</span>;</span></span><br><span class="line"><span class="function"> <span class="title">treeSet</span>.<span class="title">add</span><span class="params">(<span class="string">"d"</span>)</span>;</span></span><br><span class="line"><span class="function"> <span class="title">treeSet</span>.<span class="title">add</span><span class="params">(<span class="string">"c"</span>)</span>;</span></span><br><span class="line"><span class="function"> <span class="title">treeSet</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>;</span></span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d</span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line">a</span><br></pre></td></tr></table></figure></p><h3 id="EnumSet-枚举集合"><a href="#EnumSet-枚举集合" class="headerlink" title="EnumSet 枚举集合"></a>EnumSet 枚举集合</h3><p>EnumSet是一个枚举抽象类继承AbstractSet类。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumSet&lt;E</span> <span class="keyword">extends</span> <span class="title">Enum&lt;E&gt;&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractSet&lt;E&gt;</span></span></span><br><span class="line"><span class="class">   <span class="title">implements</span> <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure></p><p>分别记录枚举类型和枚举成员。<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The <span class="keyword">class</span> <span class="keyword">of</span> all the elements <span class="keyword">of</span> this <span class="keyword">set</span>.</span><br><span class="line"> */</span><br><span class="line">final <span class="keyword">Class</span>&lt;E&gt; elementType;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * All <span class="keyword">of</span> the values comprising T.  (Cached <span class="keyword">for</span> performance.)</span><br><span class="line"> */</span><br><span class="line">final <span class="keyword">Enum</span>&lt;?&gt;[] universe;</span><br></pre></td></tr></table></figure></p><p>可通过内部提供的静态方法实例化。<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Set</span>&lt;MyEnum&gt; enumSet <span class="comment">= EnumSet.allOf(MyEnum.class)</span>;</span><br></pre></td></tr></table></figure></p><p>当枚举集合长度不大于64时，实例化RegularEnumSet类，否则实例化JumboEnumSet类。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; allOf(<span class="class"><span class="keyword">Class</span>&lt;<span class="title">E</span>&gt; <span class="title">elementType</span>) </span>&#123;</span><br><span class="line">    EnumSet&lt;E&gt; result = noneOf(elementType);</span><br><span class="line">    result.addAll();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; noneOf(<span class="class"><span class="keyword">Class</span>&lt;<span class="title">E</span>&gt; <span class="title">elementType</span>) </span>&#123;</span><br><span class="line">    Enum<span class="meta">&lt;?</span>&gt;[] universe = getUniverse(elementType);</span><br><span class="line">    <span class="keyword">if</span> (universe == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(elementType + <span class="string">" not an enum"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (universe.length &lt;= <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RegularEnumSet&lt;&gt;(elementType, universe);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JumboEnumSet&lt;&gt;(elementType, universe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Enum类中ordinal成员变量用于记录枚举常量声明位置，枚举集合的增删操作也是基于这个成员变量进行位运算的。<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * The ordinal <span class="keyword">of</span> this enumeration constant (its position</span><br><span class="line">  * in the <span class="class"><span class="keyword">enum</span> <span class="title">declaration</span>, <span class="title">where</span> <span class="title">the</span> <span class="title">initial</span> <span class="title">constant</span> <span class="title">is</span> <span class="title">assigned</span></span></span><br><span class="line">  * an ordinal <span class="keyword">of</span> zero).</span><br><span class="line">  *</span><br><span class="line">  * Most programmers will have no use <span class="keyword">for</span> this field.  It is designed</span><br><span class="line">  * <span class="keyword">for</span> use by sophisticated <span class="class"><span class="keyword">enum</span>-<span class="title">based</span> <span class="title">data</span> <span class="title">structures</span>, <span class="title">such</span> <span class="title">as</span></span></span><br><span class="line">  * &#123;@link java.util.EnumSet&#125; and &#123;@link java.util.EnumMap&#125;.</span><br><span class="line">  *<span class="regexp">/</span></span><br><span class="line"><span class="regexp"> private final int ordinal;</span></span><br></pre></td></tr></table></figure></p><h4 id="RegularEnumSet-固定尺寸枚举集合"><a href="#RegularEnumSet-固定尺寸枚举集合" class="headerlink" title="RegularEnumSet 固定尺寸枚举集合"></a>RegularEnumSet 固定尺寸枚举集合</h4><p>实例化直接调用EnumSet的构造器，将类型和成员赋给枚举集合实例。<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RegularEnumSet(<span class="class"><span class="keyword">Class</span>&lt;<span class="title">E</span>&gt;<span class="title">elementType</span>, <span class="title">Enum</span>&lt;?&gt;[] <span class="title">universe</span>) &#123;</span></span><br><span class="line">    <span class="built_in">super</span>(elementType, universe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>RegularEnumSet的增删操作是使用long型elements与枚举的ordinal进行位运算。</p><p>add就是将1L左移ordinal位后，与elements进行位或运算，这位变1，从而实现将某类型枚举成员不重复地加到其枚举集合中。</p><p>remove就是将1L左移ordinal位后取反，与elements进行位与运算，这位变0，从而实现将其从枚举集合中删除。</p><p>这也是为什么RegularEnumSet长度必须不大于64，因为long型就64位能给你玩……</p><p>非线程安全。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Bit vector representation of this set.  The 2^k bit indicates the</span></span><br><span class="line"><span class="comment">    * presence of universe[k] in this set.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">long</span> elements = <span class="number">0</span>L;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e) &#123;</span><br><span class="line">       typeCheck(e);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">long</span> oldElements = elements;</span><br><span class="line">       elements |= (<span class="number">1</span>L &lt;&lt; ((Enum&lt;?&gt;)e).ordinal());</span><br><span class="line">       <span class="keyword">return</span> elements != oldElements;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> e) &#123;</span><br><span class="line">       <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       Class&lt;?&gt; eClass = e.getClass();</span><br><span class="line">       <span class="keyword">if</span> (eClass != elementType &amp;&amp; eClass.getSuperclass() != elementType)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">long</span> oldElements = elements;</span><br><span class="line">       elements &amp;= ~(<span class="number">1</span>L &lt;&lt; ((Enum&lt;?&gt;)e).ordinal());</span><br><span class="line">       <span class="keyword">return</span> elements != oldElements;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="JumboEnumSet-大尺寸枚举集合"><a href="#JumboEnumSet-大尺寸枚举集合" class="headerlink" title="JumboEnumSet 大尺寸枚举集合"></a>JumboEnumSet 大尺寸枚举集合</h4><p>实例化直接调用EnumSet的构造器，将类型和成员赋给枚举集合实例，<br>并初始化elements枚举数组，枚举成员个数+63再右移6位相当于除以2^6=64，<br>也就是创建一个包含N个long型的64位的数组给你玩……<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JumboEnumSet(<span class="keyword">Class</span>&lt;E&gt;elementType, Enum&lt;?&gt;[] universe) &#123;</span><br><span class="line">    <span class="keyword">super</span>(elementType, universe);</span><br><span class="line">    elements = <span class="keyword">new</span> <span class="keyword">long</span>[(universe.length + <span class="number">63</span>) &gt;&gt;&gt; <span class="number">6</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>增删操作和RegularEnumSet类似，只不过多个除以64的操作。非线程安全。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Bit vector representation of this set.  The ith bit of the jth</span></span><br><span class="line"><span class="comment">    * element of this array represents the  presence of universe[64*j +i]</span></span><br><span class="line"><span class="comment">    * in this set.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">long</span> elements[];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Redundant - maintained for performance</span></span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e) &#123;</span><br><span class="line">       typeCheck(e);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">int</span> eOrdinal = e.ordinal();</span><br><span class="line">       <span class="built_in">int</span> eWordNum = eOrdinal &gt;&gt;&gt; <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">long</span> oldElements = elements[eWordNum];</span><br><span class="line">       elements[eWordNum] |= (<span class="number">1</span>L &lt;&lt; eOrdinal);</span><br><span class="line">       <span class="built_in">boolean</span> result = (elements[eWordNum] != oldElements);</span><br><span class="line">       <span class="keyword">if</span> (result)</span><br><span class="line">           <span class="built_in">size</span>++;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> e) &#123;</span><br><span class="line">       <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       Class&lt;?&gt; eClass = e.getClass();</span><br><span class="line">       <span class="keyword">if</span> (eClass != elementType &amp;&amp; eClass.getSuperclass() != elementType)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="built_in">int</span> eOrdinal = ((Enum&lt;?&gt;)e).ordinal();</span><br><span class="line">       <span class="built_in">int</span> eWordNum = eOrdinal &gt;&gt;&gt; <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">long</span> oldElements = elements[eWordNum];</span><br><span class="line">       elements[eWordNum] &amp;= ~(<span class="number">1</span>L &lt;&lt; eOrdinal);</span><br><span class="line">       <span class="built_in">boolean</span> result = (elements[eWordNum] != oldElements);</span><br><span class="line">       <span class="keyword">if</span> (result)</span><br><span class="line">           <span class="built_in">size</span>--;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Queue-队列"><a href="#Queue-队列" class="headerlink" title="Queue 队列"></a>Queue 队列</h2><p>队列的特点就是先进先出，尾进头出。</p><h3 id="PriorityQueue-优先级队列"><a href="#PriorityQueue-优先级队列" class="headerlink" title="PriorityQueue 优先级队列"></a>PriorityQueue 优先级队列</h3><p>这是一个特殊队列。有时间详细分析一下算法// TODO</p><p>基于数组实现，继承AbstractCollection类， 默认长度是11。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">   <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">   <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Object[] queue; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure></p><p>每次扩容，如果队列长度小于64就扩1倍+2，否则扩50%。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = <span class="built_in">queue</span>.length;</span><br><span class="line">    <span class="comment">// Double size if small; else grow by 50%</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + ((oldCapacity &lt; <span class="number">64</span>) ?</span><br><span class="line">                                     (oldCapacity + <span class="number">2</span>) :</span><br><span class="line">                                     (oldCapacity &gt;&gt; <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="built_in">queue</span> = Arrays.copyOf(<span class="built_in">queue</span>, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进出操作，非线程安全。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> boolean <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (e == null)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">int</span> i = size;</span><br><span class="line">       <span class="keyword">if</span> (i &gt;= <span class="built_in">queue</span>.length)</span><br><span class="line">           grow(i + <span class="number">1</span>);</span><br><span class="line">       size = i + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">           <span class="built_in">queue</span>[<span class="number">0</span>] = e;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           siftUp(i, e);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUp</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (comparator != null)</span><br><span class="line">           siftUpUsingComparator(k, x);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           siftUpComparable(k, x);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUpComparable</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">       Comparable&lt;? super E&gt; key = (Comparable&lt;? super E&gt;) x;</span><br><span class="line">       <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">           Object e = <span class="built_in">queue</span>[parent];</span><br><span class="line">           <span class="keyword">if</span> (key.compareTo((E) e) &gt;= <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="built_in">queue</span>[k] = e;</span><br><span class="line">           k = parent;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">queue</span>[k] = key;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUpUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">           Object e = <span class="built_in">queue</span>[parent];</span><br><span class="line">           <span class="keyword">if</span> (comparator.compare(x, (E) e) &gt;= <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="built_in">queue</span>[k] = e;</span><br><span class="line">           k = parent;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">queue</span>[k] = x;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">return</span> null;</span><br><span class="line">       <span class="keyword">int</span> s = --size;</span><br><span class="line">       modCount++;</span><br><span class="line">       E result = (E) <span class="built_in">queue</span>[<span class="number">0</span>];</span><br><span class="line">       E x = (E) <span class="built_in">queue</span>[s];</span><br><span class="line">       <span class="built_in">queue</span>[s] = null;</span><br><span class="line">       <span class="keyword">if</span> (s != <span class="number">0</span>)</span><br><span class="line">           siftDown(<span class="number">0</span>, x);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (comparator != null)</span><br><span class="line">           siftDownUsingComparator(k, x);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           siftDownComparable(k, x);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownComparable</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">       Comparable&lt;? super E&gt; key = (Comparable&lt;? super E&gt;)x;</span><br><span class="line">       <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;        <span class="comment">// loop while a non-leaf</span></span><br><span class="line">       <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">           <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>; <span class="comment">// assume left child is least</span></span><br><span class="line">           Object c = <span class="built_in">queue</span>[child];</span><br><span class="line">           <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">               ((Comparable&lt;? super E&gt;) c).compareTo((E) <span class="built_in">queue</span>[right]) &gt; <span class="number">0</span>)</span><br><span class="line">               c = <span class="built_in">queue</span>[child = right];</span><br><span class="line">           <span class="keyword">if</span> (key.compareTo((E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="built_in">queue</span>[k] = c;</span><br><span class="line">           k = child;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">queue</span>[k] = key;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">           <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">           Object c = <span class="built_in">queue</span>[child];</span><br><span class="line">           <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">               comparator.compare((E) c, (E) <span class="built_in">queue</span>[right]) &gt; <span class="number">0</span>)</span><br><span class="line">               c = <span class="built_in">queue</span>[child = right];</span><br><span class="line">           <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="built_in">queue</span>[k] = c;</span><br><span class="line">           k = child;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">queue</span>[k] = x;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="Deque-双端队列"><a href="#Deque-双端队列" class="headerlink" title="Deque 双端队列"></a>Deque 双端队列</h3><p>双端队列的特点就是两边都能进，两边都能出，所以就有对应的offerFirst、offerLast、pollFirst、pollLast等操作。</p><h4 id="ArrayDeque-数组双端队列"><a href="#ArrayDeque-数组双端队列" class="headerlink" title="ArrayDeque 数组双端队列"></a>ArrayDeque 数组双端队列</h4><p>基于数组实现，继承AbstractCollection类，实现了Deque接口。默认长度为16。最小长度为8。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ArrayDeque&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractCollection&lt;E&gt;</span></span></span><br><span class="line"><span class="class">                          <span class="title">implements</span> <span class="title">Deque&lt;E&gt;</span>, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">   <span class="title">transient</span> <span class="title">Object</span>[] <span class="title">elements</span></span>; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line">   transient int head;</span><br><span class="line"></span><br><span class="line">   transient int tail;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> static <span class="keyword">final</span> int <span class="type">MIN_INITIAL_CAPACITY</span> = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">public <span class="type">ArrayDeque</span>() &#123;</span><br><span class="line">       elements = <span class="keyword">new</span> <span class="type">Object</span>[<span class="number">16</span>];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>头尾进出操作，非线程安全，元素不能为null，每次扩容加1倍。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       elements[head = (head - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)] = e;</span><br><span class="line">       <span class="keyword">if</span> (head == tail)</span><br><span class="line">           doubleCapacity();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       elements[tail] = e;</span><br><span class="line">       <span class="keyword">if</span> ( (tail = (tail + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)) == head)</span><br><span class="line">           doubleCapacity();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function">E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h = head;</span><br><span class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">       E result = (E) elements[h];</span><br><span class="line">       <span class="comment">// Element is null if deque empty</span></span><br><span class="line">       <span class="keyword">if</span> (result == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       elements[h] = <span class="keyword">null</span>;     <span class="comment">// Must null out slot</span></span><br><span class="line">       head = (h + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="function">E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> t = (tail - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>);</span><br><span class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">       E result = (E) elements[t];</span><br><span class="line">       <span class="keyword">if</span> (result == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       elements[t] = <span class="keyword">null</span>;</span><br><span class="line">       tail = t;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">doubleCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">assert</span> head == tail;</span><br><span class="line">       <span class="keyword">int</span> p = head;</span><br><span class="line">       <span class="keyword">int</span> n = elements.length;</span><br><span class="line">       <span class="keyword">int</span> r = n - p; <span class="comment">// number of elements to the right of p</span></span><br><span class="line">       <span class="keyword">int</span> newCapacity = n &lt;&lt; <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (newCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Sorry, deque too big"</span>);</span><br><span class="line">       Object[] a = <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">       System.arraycopy(elements, p, a, <span class="number">0</span>, r);</span><br><span class="line">       System.arraycopy(elements, <span class="number">0</span>, a, r, p);</span><br><span class="line">       elements = a;</span><br><span class="line">       head = <span class="number">0</span>;</span><br><span class="line">       tail = n;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h1 id="java-util-Map"><a href="#java-util-Map" class="headerlink" title="java.util.Map"></a>java.util.Map</h1><h2 id="HashMap-哈希表"><a href="#HashMap-哈希表" class="headerlink" title="HashMap 哈希表"></a>HashMap 哈希表</h2><p>是基于数组加链表的数据结构，默认长度选16,加载因子选0.75，是为了减少哈希碰撞的几率。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75</span>f;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; &#123;</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br></pre></td></tr></table></figure></p><p>因为索引是通过hash计算的，所以是无序的，而且非线程安全。<br>当发生哈希碰撞时，将元素添加到元素后形成链表，当链表长度大于8并且数组总长度大于64，则将链表改为红黑树。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> V put(K <span class="built_in">key</span>, V value) &#123;</span><br><span class="line">       <span class="keyword">return</span> putVal(hash(<span class="built_in">key</span>), <span class="built_in">key</span>, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">final</span> V putVal(<span class="built_in">int</span> hash, K <span class="built_in">key</span>, V value, <span class="built_in">boolean</span> onlyIfAbsent,</span><br><span class="line">                  <span class="built_in">boolean</span> evict) &#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="built_in">int</span> n, i;</span><br><span class="line">       <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">           n = (tab = resize()).length;</span><br><span class="line">       <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">           tab[i] = newNode(hash, <span class="built_in">key</span>, value, <span class="keyword">null</span>);</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           Node&lt;K,V&gt; e; K k;</span><br><span class="line">           <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">               ((k = p.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">               e = p;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">               e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, <span class="built_in">key</span>, value);</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="built_in">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                   <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                       p.next = newNode(hash, <span class="built_in">key</span>, value, <span class="keyword">null</span>);</span><br><span class="line">                       <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                           treeifyBin(tab, hash);</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                       ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   p = e;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">               V oldValue = e.value;</span><br><span class="line">               <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                   e.value = value;</span><br><span class="line">               afterNodeAccess(e);</span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       ++modCount;</span><br><span class="line">       <span class="keyword">if</span> (++<span class="built_in">size</span> &gt; threshold)</span><br><span class="line">           resize();</span><br><span class="line">       afterNodeInsertion(evict);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> V <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">       Node&lt;K,V&gt; e;</span><br><span class="line">       <span class="keyword">return</span> (e = getNode(hash(<span class="built_in">key</span>), <span class="built_in">key</span>)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; getNode(<span class="built_in">int</span> hash, <span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="built_in">int</span> n; K k;</span><br><span class="line">       <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">           (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">               ((k = first.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">               <span class="keyword">return</span> first;</span><br><span class="line">           <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, <span class="built_in">key</span>);</span><br><span class="line">               do &#123;</span><br><span class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                       ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">                       <span class="keyword">return</span> e;</span><br><span class="line">               &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">       Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">       <span class="built_in">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">       <span class="built_in">int</span> oldThr = threshold;</span><br><span class="line">       <span class="built_in">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">               threshold = Integer.MAX_VALUE;</span><br><span class="line">               <span class="keyword">return</span> oldTab;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">               newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">           newCap = oldThr;</span><br><span class="line">       <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">           newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">           newThr = (<span class="built_in">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="built_in">float</span> ft = (<span class="built_in">float</span>)newCap * loadFactor;</span><br><span class="line">           newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="built_in">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                     (<span class="built_in">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">       &#125;</span><br><span class="line">       threshold = newThr;</span><br><span class="line">       @SuppressWarnings(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">           Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">       table = newTab;</span><br><span class="line">       <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">               Node&lt;K,V&gt; e;</span><br><span class="line">               <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                   <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                       newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                   <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                       ((TreeNode&lt;K,V&gt;)e).<span class="built_in">split</span>(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                   <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                       Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                       Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                       Node&lt;K,V&gt; next;</span><br><span class="line">                       do &#123;</span><br><span class="line">                           next = e.next;</span><br><span class="line">                           <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                               <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                   loHead = e;</span><br><span class="line">                               <span class="keyword">else</span></span><br><span class="line">                                   loTail.next = e;</span><br><span class="line">                               loTail = e;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">else</span> &#123;</span><br><span class="line">                               <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                   hiHead = e;</span><br><span class="line">                               <span class="keyword">else</span></span><br><span class="line">                                   hiTail.next = e;</span><br><span class="line">                               hiTail = e;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                       <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                           loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                           newTab[j] = loHead;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                           hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                           newTab[j + oldCap] = hiHead;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> newTab;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> treeifyBin(Node&lt;K,V&gt;[] tab, <span class="built_in">int</span> hash) &#123;</span><br><span class="line">       <span class="built_in">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">       <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">           resize();</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">           do &#123;</span><br><span class="line">               TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">               <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                   hd = p;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                   p.prev = tl;</span><br><span class="line">                   tl.next = p;</span><br><span class="line">               &#125;</span><br><span class="line">               tl = p;</span><br><span class="line">           &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">               hd.treeify(tab);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="LinkedHashMap-链式哈希表"><a href="#LinkedHashMap-链式哈希表" class="headerlink" title="LinkedHashMap 链式哈希表"></a>LinkedHashMap 链式哈希表</h3><p>继承HashMap类，是在HashMap基础上实现的双链表数据结构，所以有序，而且非线程安全，但效率与HashMap相比偏低。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap&lt;K</span>,<span class="title">V&gt;</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">HashMap&lt;K</span>,<span class="title">V&gt;</span></span></span><br><span class="line"><span class="class">    <span class="title">implements</span> <span class="title">Map&lt;K</span>,<span class="title">V&gt;</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">static</span> <span class="title">class</span> <span class="title">Entry&lt;K</span>,<span class="title">V&gt;</span> <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node&lt;K</span>,<span class="title">V&gt;</span> </span>&#123;</span><br><span class="line">        <span class="type">Entry</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; before, after;</span><br><span class="line">        <span class="type">Entry</span>(int hash, <span class="type">K</span> key, <span class="type">V</span> value, <span class="type">Node</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    transient <span class="type">LinkedHashMap</span>.<span class="type">Entry</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; head;</span><br><span class="line"></span><br><span class="line">    transient <span class="type">LinkedHashMap</span>.<span class="type">Entry</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; tail;</span><br></pre></td></tr></table></figure></p><h2 id="TreeMap-红黑树表"><a href="#TreeMap-红黑树表" class="headerlink" title="TreeMap 红黑树表"></a>TreeMap 红黑树表</h2><p>TreeMap能够把它保存的记录根据key排序，默认是自然排序。<br>也可以指定排序的比较器。<br>当用Iteraor遍历TreeMap时，得到的记录是排过序的。TreeMap的键和值都不能为空。</p><h2 id="EnumMap-枚举表"><a href="#EnumMap-枚举表" class="headerlink" title="EnumMap 枚举表"></a>EnumMap 枚举表</h2><p>以Enum为key的Map。不常用不深抠……</p><h2 id="WeakHashMap-弱引用哈希表"><a href="#WeakHashMap-弱引用哈希表" class="headerlink" title="WeakHashMap 弱引用哈希表"></a>WeakHashMap 弱引用哈希表</h2><p>与HashMap的区别是HashMap的key保留了对实际对象的强引用，<br>只要HashMap实例不被销毁，其中的所有value都不会被垃圾回收。<br>而WeakHashMap的key只保留了对实际对象的弱引用，在满足垃圾回收条件下，会被回收删除。</p><h2 id="IdentityHashMap-身份证哈希表"><a href="#IdentityHashMap-身份证哈希表" class="headerlink" title="IdentityHashMap 身份证哈希表"></a>IdentityHashMap 身份证哈希表</h2><p>与HashMap的区别：<br>HashMap中的key只要通过equals和hashCode两个方法就可以判断是否相同，决定保存其中一个还是两个都保存。<br>而IdentityHashMap中的key必须是引用相同。</p><h2 id="Hashtable-哈希表"><a href="#Hashtable-哈希表" class="headerlink" title="Hashtable 哈希表"></a>Hashtable 哈希表</h2><p>看这命名就知道这东西都淘汰多少年了，不想说它了。<br>不过Properties继承了Hashtable。</p><h1 id="fail-fast机制"><a href="#fail-fast机制" class="headerlink" title="fail-fast机制"></a>fail-fast机制</h1><p>集合在增删操作中经常出现 modCount++;或++modCount; 那我很好奇它是什么东西。</p><h2 id="它是什么？"><a href="#它是什么？" class="headerlink" title="它是什么？"></a>它是什么？</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">times</span> this HashMap has been structurally modified</span><br><span class="line"> * Structural modifications are those <span class="keyword">that</span> change <span class="keyword">the</span> <span class="built_in">number</span> <span class="keyword">of</span> mappings <span class="keyword">in</span></span><br><span class="line"> * <span class="keyword">the</span> HashMap <span class="keyword">or</span> otherwise modify <span class="keyword">its</span> internal structure (e.g.,</span><br><span class="line"> * rehash).  This field <span class="keyword">is</span> used <span class="keyword">to</span> make iterators <span class="keyword">on</span> Collection-views <span class="keyword">of</span></span><br><span class="line"> * <span class="keyword">the</span> HashMap fail-fast.  (See ConcurrentModificationException).</span><br><span class="line"> */</span><br><span class="line">transient int modCount;</span><br></pre></td></tr></table></figure><p>翻译：</p><blockquote><p>是HashMap结构改变的次数。<br>结构改变是指更改哈希表的长度或其他改变内部结构的行为。比如再哈希。<br>这个变量是用于使HashMap的迭代器快速失败。参考ConcurrentModificationException异常。</p></blockquote><p>原来fail-fast是Java集合在并发修改场景中的一种错误检测机制。</p><h2 id="什么时候会出现ConcurrentModificationException异常？"><a href="#什么时候会出现ConcurrentModificationException异常？" class="headerlink" title="什么时候会出现ConcurrentModificationException异常？"></a>什么时候会出现ConcurrentModificationException异常？</h2><p>当多个线程同时操作非线程安全的集合时，线程A可能正在使用Iterator或ForEach遍历集合，线程B可能更改了集合结构，<br>那么原来的mc和++后的modCount就不一致了，这时就会进入<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab;</span><br><span class="line">       <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">int</span> mc = modCount;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">               <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                   action.accept(e.key, e.value);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>抛出ConcurrentModificationException异常。</p><h1 id="java-util-concurrent"><a href="#java-util-concurrent" class="headerlink" title="java.util.concurrent.*"></a>java.util.concurrent.*</h1><p>// TODO</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
</feed>
