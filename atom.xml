<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NiTaogeTech</title>
  
  <subtitle>Focus on Java, BD and Linux. </subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tech.nitaoge.com/"/>
  <updated>2019-04-27T03:47:18.996Z</updated>
  <id>http://tech.nitaoge.com/</id>
  
  <author>
    <name>中华郑六</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>看破Docker 7.数据存储</title>
    <link href="http://tech.nitaoge.com/p/8c86c83d/"/>
    <id>http://tech.nitaoge.com/p/8c86c83d/</id>
    <published>2019-04-20T11:35:43.000Z</published>
    <updated>2019-04-27T03:47:18.996Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://tech.nitaoge.com/categories/docker/"/>
    
    
      <category term="看破Docker" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Docker/"/>
    
  </entry>
  
  <entry>
    <title>看破Docker 4.镜像</title>
    <link href="http://tech.nitaoge.com/p/f6ac48d9/"/>
    <id>http://tech.nitaoge.com/p/f6ac48d9/</id>
    <published>2019-04-20T11:35:43.000Z</published>
    <updated>2019-04-27T03:47:18.994Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="镜像结构"><a href="#镜像结构" class="headerlink" title="镜像结构"></a>镜像结构</h1><ul><li>镜像是分层结构，目的是为了共享资源。</li><li>构建容器运行时镜像属于容器层，可读写；仓库中镜像属于镜像层，只读。</li><li>FROM scratch是从零开始构建，属于基础镜像。</li><li>docker运行的linux镜像都是独立用户空间，共享宿主机内核。</li></ul><h1 id="镜像构建"><a href="#镜像构建" class="headerlink" title="镜像构建"></a>镜像构建</h1><h2 id="docker-commit（官方不推荐）"><a href="#docker-commit（官方不推荐）" class="headerlink" title="docker commit（官方不推荐）"></a>docker commit（官方不推荐）</h2><p>详细参考3.命令详解。</p><h2 id="Dockfile（推荐）"><a href="#Dockfile（推荐）" class="headerlink" title="Dockfile（推荐）"></a>Dockfile（推荐）</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://tech.nitaoge.com/categories/docker/"/>
    
    
      <category term="看破Docker" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Docker/"/>
    
  </entry>
  
  <entry>
    <title>看破Docker 5.容器</title>
    <link href="http://tech.nitaoge.com/p/19fe1117/"/>
    <id>http://tech.nitaoge.com/p/19fe1117/</id>
    <published>2019-04-20T11:35:43.000Z</published>
    <updated>2019-04-27T03:47:18.993Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://tech.nitaoge.com/categories/docker/"/>
    
    
      <category term="看破Docker" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Docker/"/>
    
  </entry>
  
  <entry>
    <title>看破Docker 6.网络</title>
    <link href="http://tech.nitaoge.com/p/1dfdbb87/"/>
    <id>http://tech.nitaoge.com/p/1dfdbb87/</id>
    <published>2019-04-20T11:35:43.000Z</published>
    <updated>2019-04-27T03:47:18.995Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://tech.nitaoge.com/categories/docker/"/>
    
    
      <category term="看破Docker" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Docker/"/>
    
  </entry>
  
  <entry>
    <title>看破Docker 2.玩转配置</title>
    <link href="http://tech.nitaoge.com/p/24f59f15/"/>
    <id>http://tech.nitaoge.com/p/24f59f15/</id>
    <published>2019-04-20T11:35:43.000Z</published>
    <updated>2019-04-22T04:46:30.013Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h1><p>查看服务状态<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl status docker</span><br><span class="line"></span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line"><span class="symbol">   Loaded:</span> loaded (<span class="meta-keyword">/usr/</span>lib<span class="meta-keyword">/systemd/</span>system/docker.service; disabled; vendor preset: disabled)</span><br><span class="line"><span class="symbol">   Active:</span> active (running) since 日 <span class="number">2019</span><span class="number">-04</span><span class="number">-21</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">07</span> CST; <span class="number">34</span>min ago</span><br><span class="line"><span class="symbol">     Docs:</span> https:<span class="comment">//docs.docker.com</span></span><br><span class="line"> Main PID: <span class="number">20760</span> (dockerd)</span><br><span class="line"><span class="symbol">    Tasks:</span> <span class="number">22</span></span><br><span class="line"><span class="symbol">   Memory:</span> <span class="number">251.7</span>M</span><br><span class="line"><span class="symbol">   CGroup:</span> /system.slice/docker.service</span><br><span class="line">           ├─<span class="number">20760</span> <span class="meta-keyword">/usr/</span>bin/dockerd -H fd:<span class="comment">// -H tcp://192.168.1.60</span></span><br><span class="line">           └─<span class="number">20958</span> <span class="meta-keyword">/usr/</span>bin/docker-proxy -proto tcp -host-ip <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> -host-port <span class="number">80</span> -container-ip <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span> -container-port <span class="number">80</span></span><br></pre></td></tr></table></figure></p><p>我的docker服务启动脚本位置为/usr/lib/systemd/system/docker.service。</p><h2 id="添加外网访问"><a href="#添加外网访问" class="headerlink" title="添加外网访问"></a>添加外网访问</h2><p>编辑服务脚本，添加允许外网访问（非安全的）：<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">systemd</span>/<span class="title">system</span>/<span class="title">docker</span>.<span class="title">service</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span></span><br><span class="line">ExecStart=<span class="regexp">/usr/bin</span><span class="regexp">/dockerd</span></span><br><span class="line"><span class="regexp">ExecReload=/bin</span><span class="regexp">/kill -s HUP $MAINPID</span></span><br></pre></td></tr></table></figure></p><p>编辑daemon.json，添加一条配置：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="string">"hosts"</span>: [<span class="string">"unix:///var/run/docker.sock"</span>, <span class="string">"tcp://127.0.0.1:2375"</span>]</span><br></pre></td></tr></table></figure></p><p>重启<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo systemctl daemon-reload</span><br><span class="line"><span class="variable">$ </span>sudo systemctl restart docker</span><br></pre></td></tr></table></figure></p><p>查看连接<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo netstat -lntp | grep dockerd</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">192.168</span><span class="meta">.1</span><span class="meta">.60</span>:<span class="number">2375</span>       <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:*               LISTEN      <span class="number">6918</span>/dockerd</span><br></pre></td></tr></table></figure></p><h2 id="修改镜像保存目录"><a href="#修改镜像保存目录" class="headerlink" title="修改镜像保存目录"></a>修改镜像保存目录</h2><p>迁移原docker到新目录<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p /disk1/data &amp;&amp; mv /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span> /<span class="title">disk1</span>/<span class="title">data</span></span></span><br></pre></td></tr></table></figure></p><p>编辑daemon.json，添加一条配置：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"><span class="string">"data-root"</span>: <span class="string">"/disk1/data/docker"</span></span><br></pre></td></tr></table></figure></p><p>## </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://tech.nitaoge.com/categories/docker/"/>
    
    
      <category term="看破Docker" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Docker/"/>
    
  </entry>
  
  <entry>
    <title>看破Docker 8.XXXXX</title>
    <link href="http://tech.nitaoge.com/p/a2e86a42/"/>
    <id>http://tech.nitaoge.com/p/a2e86a42/</id>
    <published>2019-04-20T11:35:43.000Z</published>
    <updated>2019-04-27T03:47:18.996Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://tech.nitaoge.com/categories/docker/"/>
    
    
      <category term="看破Docker" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Docker/"/>
    
  </entry>
  
  <entry>
    <title>看破Docker 3.命令详解</title>
    <link href="http://tech.nitaoge.com/p/8491e96f/"/>
    <id>http://tech.nitaoge.com/p/8491e96f/</id>
    <published>2019-04-20T11:35:43.000Z</published>
    <updated>2019-04-27T03:49:00.735Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="查看命令帮助"><a href="#查看命令帮助" class="headerlink" title="查看命令帮助"></a>查看命令帮助</h1><h2 id="查看docker所有子命令"><a href="#查看docker所有子命令" class="headerlink" title="查看docker所有子命令"></a>查看docker所有子命令</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">$ docker --<span class="keyword">help</span></span><br><span class="line"></span><br><span class="line">Usage:docker [OPTIONS] COMMAND</span><br><span class="line"></span><br><span class="line">A self-sufficient runtime <span class="keyword">for</span> containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --config string      Location of client config files (default <span class="string">"/home/nitaoge/.docker"</span>)</span><br><span class="line">  -<span class="keyword">D</span>, --debug              Enable debug mode</span><br><span class="line">  -<span class="keyword">H</span>, --host <span class="keyword">list</span>          Daemon socket(s) to connect to</span><br><span class="line">  -<span class="keyword">l</span>, --<span class="keyword">log</span>-level string   <span class="keyword">Set</span> the logging level (<span class="string">"debug"</span>|<span class="string">"info"</span>|<span class="string">"warn"</span>|<span class="string">"error"</span>|<span class="string">"fatal"</span>) (default <span class="string">"info"</span>)</span><br><span class="line">      --tls                <span class="keyword">Use</span> TLS; implied <span class="keyword">by</span> --tlsverify</span><br><span class="line">      --tlscacert string   Trust certs signed only <span class="keyword">by</span> this <span class="keyword">CA</span> (default <span class="string">"/home/nitaoge/.docker/ca.pem"</span>)</span><br><span class="line">      --tlscert string     Path to TLS certificate <span class="keyword">file</span> (default <span class="string">"/home/nitaoge/.docker/cert.pem"</span>)</span><br><span class="line">      --tlskey string      Path to TLS key <span class="keyword">file</span> (default <span class="string">"/home/nitaoge/.docker/key.pem"</span>)</span><br><span class="line">      --tlsverify          <span class="keyword">Use</span> TLS and verify the remote</span><br><span class="line">  -v, --<span class="keyword">version</span>            <span class="keyword">Print</span> <span class="keyword">version</span> information and quit</span><br><span class="line"></span><br><span class="line">Management Commands:</span><br><span class="line">  builder     Manage builds</span><br><span class="line">  config      Manage Docker configs</span><br><span class="line">  container   Manage containers</span><br><span class="line">  engine      Manage the docker engine</span><br><span class="line">  image       Manage images</span><br><span class="line">  network     Manage networks</span><br><span class="line">  node        Manage Swarm nodes</span><br><span class="line">  <span class="keyword">plugin</span>      Manage plugins</span><br><span class="line">  secret      Manage Docker secrets</span><br><span class="line">  service     Manage services</span><br><span class="line">  <span class="keyword">stack</span>       Manage Docker stacks</span><br><span class="line">  swarm       Manage Swarm</span><br><span class="line">  system      Manage Docker</span><br><span class="line">  trust       Manage trust <span class="keyword">on</span> Docker images</span><br><span class="line">  volume      Manage volumes</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  attach      Attach <span class="keyword">local</span> standard <span class="keyword">input</span>, output, and <span class="keyword">error</span> streams to a running container</span><br><span class="line">  build       Build <span class="keyword">an</span> image from a Dockerfile</span><br><span class="line">  commit      Create a new image from a container's changes</span><br><span class="line">  cp          <span class="keyword">Copy</span> files/folders between a container and the <span class="keyword">local</span> filesystem</span><br><span class="line">  create      Create a new container</span><br><span class="line">  diff        <span class="keyword">Inspect</span> changes to files or directories <span class="keyword">on</span> a container's filesystem</span><br><span class="line">  events      Get real time events from the server</span><br><span class="line">  exec        <span class="keyword">Run</span> a command <span class="keyword">in</span> a running container</span><br><span class="line">  export      Export a container's filesystem <span class="keyword">as</span> a tar archive</span><br><span class="line">  history     Show the history of <span class="keyword">an</span> image</span><br><span class="line">  images      <span class="keyword">List</span> images</span><br><span class="line">  import      Import the contents from a tarball to create a filesystem image</span><br><span class="line">  info        <span class="keyword">Display</span> system-wide information</span><br><span class="line">  <span class="keyword">inspect</span>     <span class="keyword">Return</span> low-level information <span class="keyword">on</span> Docker objects</span><br><span class="line">  kill        Kill <span class="keyword">one</span> or <span class="keyword">more</span> running containers</span><br><span class="line">  load        Load <span class="keyword">an</span> image from a tar archive or STDIN</span><br><span class="line">  login       <span class="keyword">Log</span> <span class="keyword">in</span> to a Docker registry</span><br><span class="line">  logout      <span class="keyword">Log</span> <span class="keyword">out</span> from a Docker registry</span><br><span class="line">  logs        Fetch the logs of a container</span><br><span class="line">  <span class="keyword">pause</span>       <span class="keyword">Pause</span> all processes within <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  port        <span class="keyword">List</span> port mappings or a specific mapping <span class="keyword">for</span> the container</span><br><span class="line">  ps          <span class="keyword">List</span> containers</span><br><span class="line">  pull        Pull <span class="keyword">an</span> image or a repository from a registry</span><br><span class="line">  push        Push <span class="keyword">an</span> image or a repository to a registry</span><br><span class="line">  <span class="keyword">rename</span>      <span class="keyword">Rename</span> a container</span><br><span class="line">  restart     Restart <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  <span class="keyword">rm</span>          Remove <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  rmi         Remove <span class="keyword">one</span> or <span class="keyword">more</span> images</span><br><span class="line">  <span class="keyword">run</span>         <span class="keyword">Run</span> a command <span class="keyword">in</span> a new container</span><br><span class="line">  <span class="keyword">save</span>        <span class="keyword">Save</span> <span class="keyword">one</span> or <span class="keyword">more</span> images to a tar archive (streamed to STDOUT <span class="keyword">by</span> default)</span><br><span class="line">  <span class="keyword">search</span>      <span class="keyword">Search</span> the Docker Hub <span class="keyword">for</span> images</span><br><span class="line">  start       Start <span class="keyword">one</span> or <span class="keyword">more</span> stopped containers</span><br><span class="line">  stats       <span class="keyword">Display</span> a live stream of container(s) resource usage statistics</span><br><span class="line">  stop        Stop <span class="keyword">one</span> or <span class="keyword">more</span> running containers</span><br><span class="line">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><br><span class="line">  top         <span class="keyword">Display</span> the running processes of a container</span><br><span class="line">  unpause     Unpause all processes within <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  <span class="keyword">update</span>      <span class="keyword">Update</span> configuration of <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  <span class="keyword">version</span>     Show the Docker <span class="keyword">version</span> information</span><br><span class="line">  wait        Block until <span class="keyword">one</span> or <span class="keyword">more</span> containers stop, then <span class="keyword">print</span> their <span class="keyword">exit</span> codes</span><br><span class="line"></span><br><span class="line"><span class="keyword">Run</span> 'docker COMMAND --<span class="keyword">help</span>' <span class="keyword">for</span> <span class="keyword">more</span> information <span class="keyword">on</span> a command.</span><br></pre></td></tr></table></figure><h2 id="查看docker-container所有子命令"><a href="#查看docker-container所有子命令" class="headerlink" title="查看docker container所有子命令"></a>查看docker container所有子命令</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ docker container --<span class="keyword">help</span></span><br><span class="line"></span><br><span class="line">Usage:docker container COMMAND</span><br><span class="line"></span><br><span class="line">Manage containers</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  attach      Attach <span class="keyword">local</span> standard <span class="keyword">input</span>, output, and <span class="keyword">error</span> streams to a running container</span><br><span class="line">  commit      Create a new image from a container's changes</span><br><span class="line">  cp          <span class="keyword">Copy</span> files/folders between a container and the <span class="keyword">local</span> filesystem</span><br><span class="line">  create      Create a new container</span><br><span class="line">  diff        <span class="keyword">Inspect</span> changes to files or directories <span class="keyword">on</span> a container's filesystem</span><br><span class="line">  exec        <span class="keyword">Run</span> a command <span class="keyword">in</span> a running container</span><br><span class="line">  export      Export a container's filesystem <span class="keyword">as</span> a tar archive</span><br><span class="line">  <span class="keyword">inspect</span>     <span class="keyword">Display</span> detailed information <span class="keyword">on</span> <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  kill        Kill <span class="keyword">one</span> or <span class="keyword">more</span> running containers</span><br><span class="line">  logs        Fetch the logs of a container</span><br><span class="line">  <span class="keyword">ls</span>          <span class="keyword">List</span> containers</span><br><span class="line">  <span class="keyword">pause</span>       <span class="keyword">Pause</span> all processes within <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  port        <span class="keyword">List</span> port mappings or a specific mapping <span class="keyword">for</span> the container</span><br><span class="line">  prune       Remove all stopped containers</span><br><span class="line">  <span class="keyword">rename</span>      <span class="keyword">Rename</span> a container</span><br><span class="line">  restart     Restart <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  <span class="keyword">rm</span>          Remove <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  <span class="keyword">run</span>         <span class="keyword">Run</span> a command <span class="keyword">in</span> a new container</span><br><span class="line">  start       Start <span class="keyword">one</span> or <span class="keyword">more</span> stopped containers</span><br><span class="line">  stats       <span class="keyword">Display</span> a live stream of container(s) resource usage statistics</span><br><span class="line">  stop        Stop <span class="keyword">one</span> or <span class="keyword">more</span> running containers</span><br><span class="line">  top         <span class="keyword">Display</span> the running processes of a container</span><br><span class="line">  unpause     Unpause all processes within <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  <span class="keyword">update</span>      <span class="keyword">Update</span> configuration of <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  wait        Block until <span class="keyword">one</span> or <span class="keyword">more</span> containers stop, then <span class="keyword">print</span> their <span class="keyword">exit</span> codes</span><br><span class="line"></span><br><span class="line"><span class="keyword">Run</span> 'docker container COMMAND --<span class="keyword">help</span>' <span class="keyword">for</span> <span class="keyword">more</span> information <span class="keyword">on</span> a command.</span><br></pre></td></tr></table></figure><h2 id="查看子命令"><a href="#查看子命令" class="headerlink" title="查看子命令"></a>查看子命令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">start</span> <span class="comment">--help</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Usage</span>:docker <span class="keyword">start</span> [OPTIONS] <span class="keyword">CONTAINER</span> [CONTAINER...]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Start</span> one <span class="keyword">or</span> more stopped containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, <span class="comment">--attach               Attach STDOUT/STDERR and forward signals</span></span><br><span class="line">      <span class="comment">--detach-keys string   Override the key sequence for detaching a container</span></span><br><span class="line">  -i, <span class="comment">--interactive          Attach container's STDIN</span></span><br></pre></td></tr></table></figure><h2 id="子命令分类"><a href="#子命令分类" class="headerlink" title="子命令分类"></a>子命令分类</h2><p><img src="/images/docker/Screenshot 2019-04-21 08.20.43.png" alt></p><h2 id="容器、镜像、仓库的操作关系"><a href="#容器、镜像、仓库的操作关系" class="headerlink" title="容器、镜像、仓库的操作关系"></a>容器、镜像、仓库的操作关系</h2><p><img src="/images/docker/Screenshot 2019-04-21 08.24.01.png" alt></p><h1 id="使用docker命令"><a href="#使用docker命令" class="headerlink" title="使用docker命令"></a>使用docker命令</h1><h2 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h2><h3 id="docker-run（创建容器）"><a href="#docker-run（创建容器）" class="headerlink" title="docker run（创建容器）"></a>docker run（创建容器）</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run <span class="string">[OPTIONS]</span> IMAGE <span class="string">[COMMAND]</span> <span class="string">[ARG...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>      –add-host list                  Add a custom host-to-IP mapping (host:ip)<br>  -a, –attach list                    Attach to STDIN, STDOUT or STDERR<br>      –blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)<br>      –blkio-weight-device list       Block IO weight (relative device weight) (default [])<br>      –cap-add list                   Add Linux capabilities<br>      –cap-drop list                  Drop Linux capabilities<br>      –cgroup-parent string           Optional parent cgroup for the container<br>      –cidfile string                 Write the container ID to the file<br>      –cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period<br>      –cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota<br>      –cpu-rt-period int              Limit CPU real-time period in microseconds<br>      –cpu-rt-runtime int             Limit CPU real-time runtime in microseconds<br>  -c, –cpu-shares int                 CPU shares (relative weight)<br>      –cpus decimal                   Number of CPUs<br>      –cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)<br>      –cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)<br>  -d, –detach                         Run container in background and print container ID<br>      –detach-keys string             Override the key sequence for detaching a container<br>      –device list                    Add a host device to the container<br>      –device-cgroup-rule list        Add a rule to the cgroup allowed devices list<br>      –device-read-bps list           Limit read rate (bytes per second) from a device (default [])<br>      –device-read-iops list          Limit read rate (IO per second) from a device (default [])<br>      –device-write-bps list          Limit write rate (bytes per second) to a device (default [])<br>      –device-write-iops list         Limit write rate (IO per second) to a device (default [])<br>      –disable-content-trust          Skip image verification (default true)<br>      –dns list                       Set custom DNS servers<br>      –dns-option list                Set DNS options<br>      –dns-search list                Set custom DNS search domains<br>      –entrypoint string              Overwrite the default ENTRYPOINT of the image<br>  -e, –env list                       Set environment variables<br>      –env-file list                  Read in a file of environment variables<br>      –expose list                    Expose a port or a range of ports<br>      –group-add list                 Add additional groups to join<br>      –health-cmd string              Command to run to check health<br>      –health-interval duration       Time between running the check (ms|s|m|h) (default 0s)<br>      –health-retries int             Consecutive failures needed to report unhealthy<br>      –health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)<br>      –health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)<br>      –help                           Print usage<br>  -h, –hostname string                Container host name<br>      –init                           Run an init inside the container that forwards signals and reaps processes<br>  -i, –interactive                    Keep STDIN open even if not attached<br>      –ip string                      IPv4 address (e.g., 172.30.100.104)<br>      –ip6 string                     IPv6 address (e.g., 2001:db8::33)<br>      –ipc string                     IPC mode to use<br>      –isolation string               Container isolation technology<br>      –kernel-memory bytes            Kernel memory limit<br>  -l, –label list                     Set meta data on a container<br>      –label-file list                Read in a line delimited file of labels<br>      –link list                      Add link to another container<br>      –link-local-ip list             Container IPv4/IPv6 link-local addresses<br>      –log-driver string              Logging driver for the container<br>      –log-opt list                   Log driver options<br>      –mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)<br>  -m, –memory bytes                   Memory limit<br>      –memory-reservation bytes       Memory soft limit<br>      –memory-swap bytes              Swap limit equal to memory plus swap: ‘-1’ to enable unlimited swap<br>      –memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)<br>      –mount mount                    Attach a filesystem mount to the container<br>      –name string                    Assign a name to the container<br>      –network string                 Connect a container to a network (default “default”)<br>      –network-alias list             Add network-scoped alias for the container<br>      –no-healthcheck                 Disable any container-specified HEALTHCHECK<br>      –oom-kill-disable               Disable OOM Killer<br>      –oom-score-adj int              Tune host’s OOM preferences (-1000 to 1000)<br>      –pid string                     PID namespace to use<br>      –pids-limit int                 Tune container pids limit (set -1 for unlimited)<br>      –privileged                     Give extended privileges to this container<br>  -p, –publish list                   Publish a container’s port(s) to the host<br>  -P, –publish-all                    Publish all exposed ports to random ports<br>      –read-only                      Mount the container’s root filesystem as read only<br>      –restart string                 Restart policy to apply when a container exits (default “no”)<br>      –rm                             Automatically remove the container when it exits<br>      –runtime string                 Runtime to use for this container<br>      –security-opt list              Security Options<br>      –shm-size bytes                 Size of /dev/shm<br>      –sig-proxy                      Proxy received signals to the process (default true)<br>      –stop-signal string             Signal to stop a container (default “SIGTERM”)<br>      –stop-timeout int               Timeout (in seconds) to stop a container<br>      –storage-opt list               Storage driver options for the container<br>      –sysctl map                     Sysctl options (default map[])<br>      –tmpfs list                     Mount a tmpfs directory<br>  -t, –tty                            Allocate a pseudo-TTY<br>      –ulimit ulimit                  Ulimit options (default [])<br>  -u, –user string                    Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])<br>      –userns string                  User namespace to use<br>      –uts string                     UTS namespace to use<br>  -v, –volume list                    Bind mount a volume<br>      –volume-driver string           Optional volume driver for the container<br>      –volumes-from list              Mount volumes from the specified container(s)<br>  -w, –workdir string                 Working directory inside the container</p></blockquote><ul><li>比如：</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">run</span> -<span class="keyword">it</span> -d <span class="comment">--name testubt  ubuntu /bin/bash</span></span><br><span class="line">$ docker <span class="built_in">run</span> -d -p <span class="number">80</span>:<span class="number">80</span> <span class="comment">--name ng1  nginx</span></span><br></pre></td></tr></table></figure><p>-i 进行交互模式<br>-t 以伪终端模式<br>-d 容器后台运行<br>-p 端口映射</p><h3 id="docker-ps（查看容器进程状态）"><a href="#docker-ps（查看容器进程状态）" class="headerlink" title="docker ps（查看容器进程状态）"></a>docker ps（查看容器进程状态）</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> docker ps [<span class="keyword">OPTIONS</span>]</span><br></pre></td></tr></table></figure><blockquote></blockquote><p>Options:<br>  -a, –all             Show all containers (default shows just running)<br>  -f, –filter filter   Filter output based on conditions provided<br>      –format string   Pretty-print containers using a Go template<br>  -n, –last int        Show n last created containers (includes all states) (default -1)<br>  -l, –latest          Show the latest created container (includes all states)<br>      –no-trunc        Don’t truncate output<br>  -q, –quiet           Only display numeric IDs<br>  -s, –size            Display total file sizes</p><h3 id="docker-start-stop-restart-kill（容器启停）"><a href="#docker-start-stop-restart-kill（容器启停）" class="headerlink" title="docker start/stop/restart/kill（容器启停）"></a>docker start/stop/restart/kill（容器启停）</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker start <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -a, –attach               Attach STDOUT/STDERR and forward signals<br>      –detach-keys string   Override the key sequence for detaching a container<br>  -i, –interactive          Attach container’s STDIN</p></blockquote><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -t, –time int   Seconds to wait for stop before killing it (default 10)</p></blockquote><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker restart <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -t, –time int   Seconds to wait for stop before killing the container (default 10)</p></blockquote><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker kill <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -s, –signal string   Signal to send to the container (default “KILL”)</p></blockquote><ul><li>stop是优雅关闭，kill是发送kill信号。</li></ul><h3 id="docker-logs（查看容器日志）"><a href="#docker-logs（查看容器日志）" class="headerlink" title="docker logs（查看容器日志）"></a>docker logs（查看容器日志）</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> docker logs [<span class="keyword">OPTIONS</span>] CONTAINER</span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>      –details        Show extra details provided to logs<br>  -f, –follow         Follow log output<br>      –since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)<br>      –tail string    Number of lines to show from the end of the logs (default “all”)<br>  -t, –timestamps     Show timestamps<br>      –until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)</p></blockquote><h3 id="docker-exec（在容器中执行命令）"><a href="#docker-exec（在容器中执行命令）" class="headerlink" title="docker exec（在容器中执行命令）"></a>docker exec（在容器中执行命令）</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> COMMAND <span class="comment">[ARG...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -d, –detach               Detached mode: run command in the background<br>      –detach-keys string   Override the key sequence for detaching a container<br>  -e, –env list             Set environment variables<br>  -i, –interactive          Keep STDIN open even if not attached<br>      –privileged           Give extended privileges to the command<br>  -t, –tty                  Allocate a pseudo-TTY<br>  -u, –user string          Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])<br>  -w, –workdir string       Working directory inside the container</p></blockquote><ul><li>比如：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it ng1 /bin/bash</span></span><br></pre></td></tr></table></figure><ul><li>在容器中安装应用</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>apt update</span><br><span class="line"><span class="variable">$ </span>apt install vim  -y</span><br></pre></td></tr></table></figure><h3 id="docker-rm（删除容器）"><a href="#docker-rm（删除容器）" class="headerlink" title="docker rm（删除容器）"></a>docker rm（删除容器）</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -f, –force     Force the removal of a running container (uses SIGKILL)<br>  -l, –link      Remove the specified link<br>  -v, –volumes   Remove the volumes associated with the container</p></blockquote><h3 id="docker-commit（将容器制作为新镜像）"><a href="#docker-commit（将容器制作为新镜像）" class="headerlink" title="docker commit（将容器制作为新镜像）"></a>docker commit（将容器制作为新镜像）</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[REPOSITORY<span class="comment">[:TAG]</span>]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -a, –author string    Author (e.g., “John Hannibal Smith <a href="mailto:&#104;&#97;&#x6e;&#110;&#x69;&#98;&#x61;&#108;&#x40;&#97;&#45;&#x74;&#101;&#x61;&#x6d;&#46;&#99;&#111;&#x6d;" target="_blank" rel="noopener">&#104;&#97;&#x6e;&#110;&#x69;&#98;&#x61;&#108;&#x40;&#97;&#45;&#x74;&#101;&#x61;&#x6d;&#46;&#99;&#111;&#x6d;</a>“)<br>  -c, –change list      Apply Dockerfile instruction to the created image<br>  -m, –message string   Commit message<br>  -p, –pause            Pause container during commit (default true)</p></blockquote><ul><li>比如：</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit ng1 <span class="keyword">new</span><span class="type"></span>-nginx</span><br></pre></td></tr></table></figure><h2 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h2><h3 id="docker-pull-push（镜像推拉）"><a href="#docker-pull-push（镜像推拉）" class="headerlink" title="docker pull/push（镜像推拉）"></a>docker pull/push（镜像推拉）</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker pull [OPTIONS] NAME[<span class="symbol">:TAG|</span><span class="variable">@DIGEST</span>]</span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -a, –all-tags                Download all tagged images in the repository<br>      –disable-content-trust   Skip image verification (default true)</p></blockquote><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  docker push <span class="string">[OPTIONS]</span> NAME<span class="string">[:TAG]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>      –disable-content-trust   Skip image signing (default true)</p></blockquote><h3 id="docker-search（查找镜像）"><a href="#docker-search（查找镜像）" class="headerlink" title="docker search（查找镜像）"></a>docker search（查找镜像）</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> docker search [<span class="keyword">OPTIONS</span>] TERM</span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -f, –filter filter   Filter output based on conditions provided<br>      –format string   Pretty-print search using a Go template<br>      –limit int       Max number of search results (default 25)<br>      –no-trunc        Don’t truncate output</p></blockquote><h3 id="docker-tag（制作版本标签）"><a href="#docker-tag（制作版本标签）" class="headerlink" title="docker tag（制作版本标签）"></a>docker tag（制作版本标签）</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">tag</span> <span class="title">SOURCE_IMAGE</span>[:<span class="keyword">TAG</span>] TARGET_IMAGE[:<span class="keyword">TAG</span>]</span><br></pre></td></tr></table></figure><h3 id="docker-build（根据Dockerfile制作镜像）"><a href="#docker-build（根据Dockerfile制作镜像）" class="headerlink" title="docker build（根据Dockerfile制作镜像）"></a>docker build（根据Dockerfile制作镜像）</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build [OPTIONS] PATH <span class="params">| URL |</span> -</span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>      –add-host list           Add a custom host-to-IP mapping (host:ip)<br>      –build-arg list          Set build-time variables<br>      –cache-from strings      Images to consider as cache sources<br>      –cgroup-parent string    Optional parent cgroup for the container<br>      –compress                Compress the build context using gzip<br>      –cpu-period int          Limit the CPU CFS (Completely Fair Scheduler) period<br>      –cpu-quota int           Limit the CPU CFS (Completely Fair Scheduler) quota<br>  -c, –cpu-shares int          CPU shares (relative weight)<br>      –cpuset-cpus string      CPUs in which to allow execution (0-3, 0,1)<br>      –cpuset-mems string      MEMs in which to allow execution (0-3, 0,1)<br>      –disable-content-trust   Skip image verification (default true)<br>  -f, –file string             Name of the Dockerfile (Default is ‘PATH/Dockerfile’)<br>      –force-rm                Always remove intermediate containers<br>      –iidfile string          Write the image ID to the file<br>      –isolation string        Container isolation technology<br>      –label list              Set metadata for an image<br>  -m, –memory bytes            Memory limit<br>      –memory-swap bytes       Swap limit equal to memory plus swap: ‘-1’ to enable unlimited swap<br>      –network string          Set the networking mode for the RUN instructions during build (default “default”)<br>      –no-cache                Do not use cache when building the image<br>      –pull                    Always attempt to pull a newer version of the image<br>  -q, –quiet                   Suppress the build output and print image ID on success<br>      –rm                      Remove intermediate containers after a successful build (default true)<br>      –security-opt strings    Security options<br>      –shm-size bytes          Size of /dev/shm<br>  -t, –tag list                Name and optionally a tag in the ‘name:tag’ format<br>      –target string           Set the target build stage to build.<br>      –ulimit ulimit           Ulimit options (default [])</p></blockquote><h3 id="docker-rmi（删除镜像）"><a href="#docker-rmi（删除镜像）" class="headerlink" title="docker rmi（删除镜像）"></a>docker rmi（删除镜像）</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rmi <span class="string">[OPTIONS]</span> IMAGE <span class="string">[IMAGE...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -f, –force      Force removal of the image<br>      –no-prune   Do not delete untagged parents</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://tech.nitaoge.com/categories/docker/"/>
    
    
      <category term="看破Docker" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Docker/"/>
    
  </entry>
  
  <entry>
    <title>看破Docker 1.基本概念及快速安装</title>
    <link href="http://tech.nitaoge.com/p/2a951b2f/"/>
    <id>http://tech.nitaoge.com/p/2a951b2f/</id>
    <published>2019-04-20T11:35:43.000Z</published>
    <updated>2019-04-27T03:49:04.765Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="Docker是什么？"><a href="#Docker是什么？" class="headerlink" title="Docker是什么？"></a>Docker是什么？</h2><p>Docker是一个开发，运输和运行应用程序的开放平台。Docker使您可以将应用程序与基础架构分离，以便快速交付软件。使用Docker，您可以像管理应用程序一样管理基础架构。通过利用Docker的方法快速发送，测试和部署代码，您可以显着减少编写代码和在生产中运行代码之间的延迟。</p><p>总之Docker结合k8s用于自动化构建微服务架构。</p><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><p>为了一统容器江山，Google、CoreOS、Docker等公司成立了一个名为Open Container Initiative（OCI）的组织，来制定容器规范，保证不同厂商开发的容器可移植。</p><p>目前OCI发布了两个规范：runtime spec（运行机制）和image format spec（镜像格式）。</p><p>Docker使用C/S架构。Docker客户端与Docker守护进程通信，后者负责构建，运行和分发Docker容器。Docker客户端和守护程序可以在同一系统上运行，也可以将Docker客户端连接到远程Docker守护程序。Docker客户端和守护程序使用REST API，通过UNIX套接字或网络接口进行通信。</p><p><img src="/images/docker/architecture.svg" alt></p><p>架构包括：</p><ul><li>Docker守护进程（dockerd）</li><li>Docker客户端（docker client）</li><li>Docker镜像仓库（Registry）</li><li>Docker容器对象（docker objects）<ul><li>镜像 (images)</li><li>容器（containers）</li><li>容器API（services）</li></ul></li></ul><h2 id="底层使用技术"><a href="#底层使用技术" class="headerlink" title="底层使用技术"></a>底层使用技术</h2><ul><li>namespaces</li><li>cgroups</li><li>UnionFS</li><li>libcontainer</li></ul><h1 id="我的环境"><a href="#我的环境" class="headerlink" title="我的环境"></a>我的环境</h1><p>docker版本: 18.09.5<br>内核版本: 3.10.0-862.el7.x86_64<br>系统版本: CentOS Linux release 7.6.1810 (Core)<br>CPU: Intel(R) Core(TM) i3-8100 CPU @ 3.60GHz 4核<br>Memory: 16G<br>Disk: 128G SSD(/)+1T SATA(/disk1)</p><h1 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h1><h2 id="内核支持"><a href="#内核支持" class="headerlink" title="内核支持"></a>内核支持</h2><p>Docker 对 Linux 内核版本的最低要求是3.10，如果内核版本低于 3.10 会缺少一些运行 Docker 容器的功能。这些比较旧的内核，在一定条件下会导致数据丢失和频繁恐慌错误。</p><p>推荐使用版本号为（3.x.y）的 3.10 Linux 内核版本（或者新的维护版本），保持跟上内核的次要版本更新来确保内核的BUG已经被修复。</p><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><blockquote><p>To install Docker CE, you need a maintained version of CentOS 7. </p></blockquote><blockquote><p>Archived versions aren’t supported or tested.<br>The centos-extras repository must be enabled. This repository is enabled by default, but if you have disabled it, you need to re-enable it.</p></blockquote><blockquote><p>The overlay2 storage driver is recommended.</p></blockquote><ul><li><code>centos-extras repository</code> CentOS7默认是开启的，不用管它。</li><li>官方推荐的 <code>overlay2</code> 是一种文件存储驱动，CentOS老版本内核是不支持的，必须升到3.10以上，CentOS7.6默认是支持的，具体原理以后再深入。</li></ul><h2 id="卸载老版本"><a href="#卸载老版本" class="headerlink" title="卸载老版本"></a>卸载老版本</h2><blockquote><p>Older versions of Docker were called docker or docker-engine. If these are installed, uninstall them, along with associated dependencies.<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker <span class="string">\</span></span><br><span class="line">                  docker-client <span class="string">\</span></span><br><span class="line">                  docker-client-latest <span class="string">\</span></span><br><span class="line">                  docker-common <span class="string">\</span></span><br><span class="line">                  docker-latest <span class="string">\</span></span><br><span class="line">                  docker-latest-logrotate <span class="string">\</span></span><br><span class="line">                  docker-logrotate <span class="string">\</span></span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>It’s OK if yum reports that none of these packages are installed.</p></blockquote><blockquote><p>The contents of /var/lib/docker/, including images, containers, volumes, and networks, are preserved. The Docker CE package is now called docker-ce.</p></blockquote><ul><li>官方提供docker-ee（企业版）和docker-ce（社区版）两个版本，我选择docker-ce进行安装。</li></ul><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><blockquote><p>You can install Docker CE in different ways, depending on your needs:</p></blockquote><blockquote><ul><li>Most users set up Docker’s repositories and install from them, for ease of installation and upgrade tasks. This is the recommended approach.</li></ul></blockquote><blockquote><ul><li>Some users download the RPM package and install it manually and manage upgrades completely manually. This is useful in situations such as installing Docker on air-gapped systems with no access to the internet.</li></ul></blockquote><blockquote><ul><li>In testing and development environments, some users choose to use automated convenience scripts to install Docker.</li></ul></blockquote><p>可以通过yum源安装，可以下载RPM包安装，也可以使用自动构建脚本安装。<br>既然官方推荐使用yum源方式安装，那就听他的，本文使用yum源安装。</p><blockquote><p>Before you install Docker CE for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.</p></blockquote><blockquote><p>SET UP THE REPOSITORY<br>Install required packages. yum-utils provides the yum-config-manager utility, and device-mapper-persistent-data and lvm2 are required by the devicemapper storage driver.<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-<span class="class"><span class="keyword">data</span> \</span></span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Use the following command to set up the stable repository.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --<span class="built_in">add</span>-repo \</span><br><span class="line">    http<span class="variable">s:</span>//download.docker.<span class="keyword">com</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br></pre></td></tr></table></figure></p></blockquote><p>确保系统中有yum-utils、device-mapper-persistent-data、lvm2工具，CentOS7.6默认是有的，然后添加docker的yum源即可（官方yum源有可能连接失败，可以使用阿里云的）。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># sudo yum-config-manager \</span><br><span class="line">  --<span class="built_in">add</span>-repo \</span><br><span class="line">  http<span class="variable">s:</span>//mirrors.aliyun.<span class="keyword">com</span>/docker-<span class="keyword">ce</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br></pre></td></tr></table></figure></p><h2 id="添加持续集成和测试的版本库"><a href="#添加持续集成和测试的版本库" class="headerlink" title="添加持续集成和测试的版本库"></a>添加持续集成和测试的版本库</h2><blockquote><p>Optional: Enable the nightly or test repositories.</p></blockquote><blockquote><p>These repositories are included in the docker.repo file above but are disabled by default. You can enable them alongside the stable repository. The following command enables the nightly repository.<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-<span class="built_in">config</span>-manager <span class="comment">--enable docker-ce-nightly</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>To enable the test channel, run the following command:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-<span class="built_in">config</span>-manager <span class="comment">--enable docker-ce-test</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>You can disable the nightly or test repository by running the yum-config-manager command with the –disable flag. To re-enable it, use the –enable flag. The following command disables the nightly repository.<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-<span class="built_in">config</span>-manager <span class="comment">--disable docker-ce-nightly</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Learn about nightly and test channels.</p></blockquote><p>默认持续集成的版本和测试的版本在yum源配置文件中是禁用的。<br>我不添加，我只用稳定版……</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>1.install the latest version of Docker CE and containerd, or go to the next step to install a specific version:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>If prompted to accept the GPG key, verify that the fingerprint matches 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35, and if so, accept it.</p></blockquote><blockquote><p>Got multiple Docker repositories?</p><blockquote><p>If you have multiple Docker repositories enabled, installing or updating without specifying a version in the yum install or yum update command always installs the highest possible version, which may not be appropriate for your stability needs.</p></blockquote></blockquote><blockquote><p>Docker is installed but not started. The docker group is created, but no users are added to the group.</p></blockquote><blockquote><p>2.To install a specific version of Docker CE, list the available versions in the repo, then select and install:</p></blockquote><blockquote><blockquote><p>a. List and sort the versions available in your repo. This example sorts results by version number, highest to lowest, and is truncated:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum <span class="keyword">list</span> docker-ce --showduplicates | <span class="keyword">sort</span> -<span class="built_in">r</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><blockquote><p>docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable<br>docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable<br>docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable<br>docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</p></blockquote></blockquote><blockquote><blockquote><p>The list returned depends on which repositories are enabled, and is specific to your version of CentOS (indicated by the .el7 suffix in this example).</p></blockquote></blockquote><blockquote><blockquote><p>b. Install a specific version by its fully qualified package name, which is the package name (docker-ce) plus the version string (2nd column) starting at the first colon (:), up to the first hyphen, separated by a hyphen (-). For example, docker-ce-18.09.1.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-<span class="keyword">ce</span>-<span class="symbol">&lt;VERSION_STRING&gt;</span> docker-<span class="keyword">ce</span>-cli-<span class="symbol">&lt;VERSION_STRING&gt;</span> containerd.io</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><p>Docker is installed but not started. The docker group is created, but no users are added to the group.</p></blockquote><p>可以查看可用版本，然后指定版本安装，安装完是不会启动的，创建了docker组，但是没有用户。</p><ul><li>这里我选择安装最新版。</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><blockquote><p>3.Start Docker.<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="literal">start</span> docker</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.Verify that Docker CE is installed correctly by running the hello-world image.<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><blockquote><p>This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.</p></blockquote></blockquote><blockquote><p>Docker CE is installed and running. You need to use sudo to run Docker commands. Continue to <a href="https://docs.docker.com/install/linux/linux-postinstall/" target="_blank" rel="noopener">Linux postinstall</a> to allow non-privileged users to run Docker commands and for other optional configuration steps.</p></blockquote><ul><li>注意此处启动docker是使用的root用户，以后重点研究一下docker安全问题。</li><li>启动和测试，默认下载个test镜像然后在容器中运行它。</li><li>这里也可以不急着启动，先到Linux postinstall页面查看如何处理安装善后工作。</li><li>我启动之后拉不下来hello-world镜像，所以得配置国内镜像加速。</li></ul><h2 id="善后"><a href="#善后" class="headerlink" title="善后"></a>善后</h2><h3 id="配置国内镜像加速"><a href="#配置国内镜像加速" class="headerlink" title="配置国内镜像加速"></a>配置国内镜像加速</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -<span class="selector-tag">p</span> /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon<span class="selector-class">.json</span> &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">  <span class="string">"https://需自己注册阿里云账号.mirror.aliyuncs.com"</span>,</span><br><span class="line">  <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="用普通用户管理docker"><a href="#用普通用户管理docker" class="headerlink" title="用普通用户管理docker"></a>用普通用户管理docker</h3><blockquote><p>Manage Docker as a non-root user</p><blockquote><p>The Docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. The Docker daemon always runs as the root user.<br>If you don’t want to preface the docker command with sudo, create a Unix group called docker and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the docker group.</p></blockquote></blockquote><p>默认情况下，docker守护进程绑定了一个unix套接字文件来代替tcp套接字，unix套接字<br>属于root用户，其他用户访问必须使用sudo。docker守护进程总是使用root用户启动。<br>如果你不想使用sudo，就建一个docker用户和组（安装后默认建完了），这样当Docker守护进程启动之后，就会创建一个可以让docker组成员访问的unix套接字文件。</p><blockquote><p>Warning</p><blockquote><p>The docker group grants privileges equivalent to the root user. For details on how this impacts security in your system, see Docker Daemon Attack Surface.</p></blockquote></blockquote><p>docker组被授予root同样的权限，如果使用tcp套接字对外开放端口，存在XSS问题。<br>如果您明确决定这样做，也可以通过HTTP公开REST API。但是，如果您这样做，请注意上述安全隐患。确保只能从受信任的网络或VPN访问它，或者使用stunnel和客户端SSL证书等机制进行保护。您还可以使用HTTPS和证书保护API端点。</p><p>守护程序也可能容易受到其他输入的攻击，例如从带有docker load的磁盘加载映像，或者使用docker pull从网络加载。从Docker 1.3.2开始，图像现在在Linux / Unix平台上的chrooted子流程中提取，是更广泛地实现权限分离的第一步。从Docker 1.10.0开始，所有图像都通过其内容的加密校验和进行存储和访问，从而限制了攻击者与现有图像发生冲突的可能性。</p><p>最后，如果您在服务器上运行Docker，建议在服务器上独占运行Docker，并将所有其他服务移动到Docker控制的容器中。当然，保留您喜欢的管理工具（可能至少是SSH服务器）以及现有的监控/监督流程（例如NRPE和collectd）都可以。</p><blockquote><p>To create the docker group and add your user:</p><blockquote><p>1.Create the docker group.<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo groupadd docker</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><p>这步可以略过。</p><blockquote><blockquote><p>2.Add your user to the docker group.<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><p>添加当前登录用户到docker组。</p><blockquote><blockquote><p>3.Log out and log back in so that your group membership is re-evaluated.</p><blockquote><p>If testing on a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.<br>On a desktop Linux environment such as X Windows, log out of your session completely and then log back in.</p></blockquote></blockquote></blockquote><p>注销重新登录。</p><blockquote><blockquote><p>4.Verify that you can run docker commands without sudo.<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><blockquote><p>This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.</p></blockquote></blockquote><p>测试是否正常运行。</p><p>If you initially ran Docker CLI commands using sudo before adding your user to the docker group, you may see the following error, which indicates that your ~/.docker/ directory was created with incorrect permissions due to the sudo commands.</p><p>WARNING: Error loading config file: /home/user/.docker/config.json -<br>stat /home/user/.docker/config.json: permission denied<br>To fix this problem, either remove the ~/.docker/ directory (it is recreated automatically, but any custom settings are lost), or change its ownership and permissions using the following commands:<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="keyword">chown</span> <span class="string">"$USER"</span>:<span class="string">"$USER"</span> /home/<span class="string">"$USER"</span>/.docker -R</span><br><span class="line">$ sudo <span class="keyword">chmod</span> g+rwx <span class="string">"$HOME/.docker"</span> -R</span><br></pre></td></tr></table></figure></p><p>如果出现权限问题，给刚加进docker组的当前登录普通用户赋权就完事。</p><h3 id="配置开机启动"><a href="#配置开机启动" class="headerlink" title="配置开机启动"></a>配置开机启动</h3><blockquote><p>Most current Linux distributions (RHEL, CentOS, Fedora, Ubuntu 16.04 and higher) use systemd to manage which services start when the system boots. </p></blockquote><blockquote><p>systemd<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="builtin-name">enable</span> docker</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>To disable this behavior, use disable instead.<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="builtin-name">disable</span> docker</span><br></pre></td></tr></table></figure></p></blockquote><p>CentOS7以后使用systemd做系统服务管理，配置简单。</p><h3 id="配置Docker守护程序侦听连接的位置"><a href="#配置Docker守护程序侦听连接的位置" class="headerlink" title="配置Docker守护程序侦听连接的位置"></a>配置Docker守护程序侦听连接的位置</h3><blockquote><p>By default, the Docker daemon listens for connections on a UNIX socket to accept requests from local clients. It is possible to allow Docker to accept requests from remote hosts by configuring it to listen on an IP address and port as well as the UNIX socket. For more detailed information on this configuration option take a look at “Bind Docker to another host/port or a unix socket” section of the Docker CLI Reference article.</p></blockquote><p>默认情况下，Docker守护程序侦听UNIX套接字上的连接以接受来自本地客户端的请求。通过将Docker配置为侦听IP地址和端口以及UNIX套接字，可以允许Docker接受来自远程主机的请求。有关此配置选项的更多详细信息，请参阅Docker CLI参考文章中的“将Docker绑定到另一个主机/端口或unix套接字”部分。</p><blockquote><p>Before configuring Docker to accept connections from remote hosts it is critically important that you understand the security implications of opening docker to the network. If steps are not taken to secure the connection, it is possible for remote non-root users to gain root access on the host. For more information on how to use TLS certificates to secure this connection, check this article on how to protect the Docker daemon socket.</p></blockquote><p>在配置Docker以接受来自远程主机的连接之前，了解打开docker到网络的安全隐患至关重要。 如果不采取步骤来保护连接，则远程非root用户可以在主机上获得root访问权限。 有关如何使用TLS证书保护此连接的更多信息，请查看有关如何保护Docker守护程序套接字的文章。</p><blockquote><p>Configuring Docker to accept remote connections can be done with the docker.service systemd unit file for Linux distributions using systemd, such as recent versions of RedHat, CentOS, Ubuntu and SLES, or with the daemon.json file which is recommended for Linux distributions that do not use systemd.</p></blockquote><p>配置Docker以接受远程连接可以使用systemd的Linux发行版的docker.service systemd单元文件来完成，例如RedHat，CentOS，Ubuntu和SLES的最新版本，或者推荐用于Linux发行版的daemon.json文件。 不要使用systemd。</p><blockquote><p>systemd vs daemon.json<br>Configuring Docker to listen for connections using both the systemd unit file and the daemon.json file causes a conflict that prevents Docker from starting.</p></blockquote><p>同时使用systemd和daemon.json会使docker启动冲突。</p><ul><li>既然官方推荐修改daemon.json开启远程访问，就听他的。</li></ul><blockquote><p>1.Set the hosts array in the /etc/docker/daemon.json to connect to the UNIX socket and an IP address, as follows:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"hosts"</span>: [<span class="string">"unix:///var/run/docker.sock"</span>, <span class="string">"tcp://127.0.0.1:2375"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.Restart Docker.<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="keyword"> system</span>ctl daemon-reload</span><br><span class="line">sudo<span class="keyword"> system</span>ctl restart docker</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.Check to see whether the change was honored by reviewing the output of netstat to confirm dockerd is listening on the configured port.<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo netstat -lntp | grep dockerd</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">2375</span>          <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:*               LISTEN      <span class="number">3758</span>/dockerd</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>这里使用不修改服务脚本的话，启动会失败，请参考2.服务配置。</li></ul><h3 id="内核兼容性检查"><a href="#内核兼容性检查" class="headerlink" title="内核兼容性检查"></a>内核兼容性检查</h3><blockquote><p>Docker cannot run correctly if your kernel is older than version 3.10 or if it is missing some modules. To check kernel compatibility, you can download and run the check-config.sh script.<br>The script only works on Linux, not macOS.</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>curl <span class="symbol">https:</span>/<span class="regexp">/raw.githubusercontent.com/docker</span><span class="regexp">/docker/master</span><span class="regexp">/contrib/check</span>-config.sh &gt; check-config.sh</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>bash ./check-config.sh</span><br></pre></td></tr></table></figure><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><blockquote><p>To upgrade Docker CE, follow the installation instructions, choosing the new version you want to install.</p></blockquote><p>使用指定版本安装即可更新。</p><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><blockquote><p>Uninstall the Docker package:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum <span class="builtin-name">remove</span> docker-ce</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Images, containers, volumes, or customized configuration files on your host are not automatically removed. To delete all images, containers, and volumes:<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span></span></span><br></pre></td></tr></table></figure></p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">docker官方文档</a></p></li><li><p>《每天5分钟玩转Docker容器技术》</p></li></ul><ul><li><p><a href="https://kubernetes.io/docs/home/" target="_blank" rel="noopener">k8s官方文档</a></p></li><li><p>《每天5分钟玩转Kubernetes》</p></li></ul><ul><li>《基于Kubernetes的容器云平台实战》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://tech.nitaoge.com/categories/docker/"/>
    
    
      <category term="看破Docker" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Docker/"/>
    
  </entry>
  
  <entry>
    <title>看破Redis 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/906310c9/"/>
    <id>http://tech.nitaoge.com/p/906310c9/</id>
    <published>2019-03-24T05:31:02.000Z</published>
    <updated>2019-04-15T15:59:23.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司要用Redis做数据库缓存双写，虽然不是我搞，但我不会多没有牌面啊……<br>正所谓不积跬步无以至千里，不会原理下一个坑的就是你。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>我这里装了三个虚拟机，并做了域名映射。</p><blockquote><p>Centos7.6_1810<br>vhost1、vhost2、vhost3<br>每个都是1核2G 40G(系统盘)+60G(数据盘-挂到/disk1)<br>为以后搭集群做准备。</p></blockquote><p><strong><em>不多哔哔，直接在虚拟机上开干，注意每次搞虚拟机前先拍快照。</em></strong></p><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://redis.io/download" target="_blank" rel="noopener">Redis官网下载地址</a><br>我本次下载最新版为redis-5.0.4.tar.gz</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="把包传到虚拟机"><a href="#把包传到虚拟机" class="headerlink" title="把包传到虚拟机"></a>把包传到虚拟机</h3><p><code>scp redis-5.0.4.tar.gz root@vhost1:/disk1/pack</code></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar xzf redis-5.0.4.tar.gz</code><br><code>cd redis-5.0.4</code></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><code>make clean &amp;&amp; make</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="备份原配置文件"><a href="#备份原配置文件" class="headerlink" title="备份原配置文件"></a>备份原配置文件</h3><p><code>cp redis.conf redis.conf.bk</code></p><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><p><code>vi redis.conf</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绑定地址（开外部访问）</span></span><br><span class="line">bind vhost1</span><br><span class="line"><span class="comment"># 解除保护模式</span></span><br><span class="line">protected-mode <span class="literal">no</span></span><br><span class="line"><span class="comment"># 绑定端口</span></span><br><span class="line">port 6379</span><br></pre></td></tr></table></figure></p><h2 id="启动（守护进程）"><a href="#启动（守护进程）" class="headerlink" title="启动（守护进程）"></a>启动（守护进程）</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">src/redis-<span class="keyword">server</span></span><br><span class="line">或指定配置文件位置</span><br><span class="line">nohup src/redis-<span class="keyword">server</span> redis.conf &amp;</span><br></pre></td></tr></table></figure><p><img src="/images/redis/1553409282510.png" alt="启动redis"><br><em>这里可以把服务作为系统服务启动，后面再讲。</em></p><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><p>每个服务启动都是作为一个系统进程并且有进程号(pid)的。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> -ef | <span class="keyword">grep</span> -v <span class="string">'grep'</span> | <span class="keyword">grep</span> redis</span><br></pre></td></tr></table></figure></p><p><img src="/images/redis/Jietu20190324-143856.png" alt="进程"><br>其中2991就是进程号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> 2991</span><br></pre></td></tr></table></figure></p><h2 id="命令行客户端连接"><a href="#命令行客户端连接" class="headerlink" title="命令行客户端连接"></a>命令行客户端连接</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src/redis-cli</span><br><span class="line">redis&gt; <span class="builtin-name">set</span> foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; <span class="builtin-name">get</span> foo</span><br><span class="line"><span class="string">"bar"</span></span><br></pre></td></tr></table></figure><h2 id="java连接"><a href="#java连接" class="headerlink" title="java连接"></a>java连接</h2><h3 id="集成jedis"><a href="#集成jedis" class="headerlink" title="集成jedis"></a>集成jedis</h3><p>// TODO<br><del>等有时间写个jedis客户端工具</del></p><h3 id="集成spring-boot-starter-data-redis"><a href="#集成spring-boot-starter-data-redis" class="headerlink" title="集成spring-boot-starter-data-redis"></a>集成spring-boot-starter-data-redis</h3><p>引包<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'org.springframework.boot'</span>, <span class="string">name:</span> <span class="string">'spring-boot-starter-data-redis'</span>, <span class="string">version:</span> <span class="string">'2.1.3.RELEASE'</span></span><br></pre></td></tr></table></figure></p><p>加配置<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span> <span class="comment"># redis</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">vhost1</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">  password:</span></span><br><span class="line"><span class="attr">  jedis:</span></span><br><span class="line"><span class="attr">    pool:</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">      max-idle:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>注入RedisTemplate或StringRedisTemplate直接使用，后续会仔细剖析二者区别<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure></p><p>封装工具可参考<a href="https://github.com/whvcse/RedisUtil" target="_blank" rel="noopener">whvcse/RedisUtil</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>确定你刚装的虚拟机上有gcc，没有就装yum install -y gcc</li></ul><p><img src="/images/redis/1553407100861.png" alt="没装gcc"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="redis" scheme="http://tech.nitaoge.com/categories/redis/"/>
    
    
      <category term="看破Redis" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Redis/"/>
    
  </entry>
  
  <entry>
    <title>看破Apollo 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/21135a2b/"/>
    <id>http://tech.nitaoge.com/p/21135a2b/</id>
    <published>2019-03-24T05:16:24.000Z</published>
    <updated>2019-04-16T02:36:42.029Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="opensource" scheme="http://tech.nitaoge.com/categories/opensource/"/>
    
    
      <category term="Apollo ctrip" scheme="http://tech.nitaoge.com/tags/Apollo-ctrip/"/>
    
      <category term="看破开源组件" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>看破MySQL 2.基本概念</title>
    <link href="http://tech.nitaoge.com/p/da0fe888/"/>
    <id>http://tech.nitaoge.com/p/da0fe888/</id>
    <published>2019-03-22T12:42:13.000Z</published>
    <updated>2019-04-15T15:59:23.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="mysql" scheme="http://tech.nitaoge.com/categories/mysql/"/>
    
    
      <category term="看破MySQL" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4MySQL/"/>
    
  </entry>
  
  <entry>
    <title>看破数据结构 1.线性表</title>
    <link href="http://tech.nitaoge.com/p/e8093df2/"/>
    <id>http://tech.nitaoge.com/p/e8093df2/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="datastucture" scheme="http://tech.nitaoge.com/categories/datastucture/"/>
    
    
      <category term="看破数据结构" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>看破设计模式 2. 创建型模式 - 单例模式(Singleton)</title>
    <link href="http://tech.nitaoge.com/p/c9a4fbc9/"/>
    <id>http://tech.nitaoge.com/p/c9a4fbc9/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-21T07:36:58.889Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>Ensure a class has only one instance, and provide a global point of access to it.</p></blockquote><p>确保某一个类只有一个实例， 而且自行实例化并向整个系统提供这个实例。 </p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>饿汉式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class HungrySingleton &#123;</span><br><span class="line"></span><br><span class="line">    private static final HungrySingleton<span class="built_in"> instance </span>= new HungrySingleton();</span><br><span class="line"></span><br><span class="line">    private HungrySingleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static HungrySingleton instance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>懒汉式（加锁禁止重排序保证线程安全）<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class LazySingleton &#123;</span><br><span class="line"></span><br><span class="line">    private static volatile LazySingleton<span class="built_in"> instance </span>= <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    private LazySingleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static LazySingleton instance() &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            synchronized (LazySingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="built_in"> instance </span>= new LazySingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然Effective java推荐枚举式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class EnumSingleton &#123;</span><br><span class="line"></span><br><span class="line">    private EnumSingleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private enum Singleton &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line"></span><br><span class="line">        private final EnumSingleton instance;</span><br><span class="line"></span><br><span class="line">        Singleton() &#123;</span><br><span class="line">           <span class="built_in"> instance </span>= new EnumSingleton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public EnumSingleton getInstance() &#123;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static EnumSingleton instance() &#123;</span><br><span class="line">        return Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我选择静态内部类式<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NiceSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NiceSingleton</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">InstanceHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> final <span class="keyword">static</span> NiceSingleton instance = <span class="keyword">new</span> NiceSingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NiceSingleton <span class="title">instance</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> InstanceHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><ul><li>为什么懒汉式单例要双重校验？</li></ul><blockquote><p>当两个线程同时调用instance()方法时，由于singleton==null，两个线程都可以通过第一个校验，<br>然后线程A持有锁，线程B等待。当线程A执行完实例化、释放锁，线程B进入代码块。</p></blockquote><blockquote><p>如果不加第二个校验，线程B又会实例化一个对象。就会违反单例模式设计原则。</p></blockquote><blockquote><p>如果不加第一个校验，也能实现单例，但多个线程反复竞争锁会增加系统开销，严重影响性能。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="design" scheme="http://tech.nitaoge.com/categories/design/"/>
    
    
      <category term="看破设计模式" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>看破设计模式 4. 行为型模式 - 职责链模式(Chain of Responsibility)</title>
    <link href="http://tech.nitaoge.com/p/baaf222c/"/>
    <id>http://tech.nitaoge.com/p/baaf222c/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-21T07:37:07.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="design" scheme="http://tech.nitaoge.com/categories/design/"/>
    
    
      <category term="看破设计模式" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>看破设计模式 3. 结构型模式 - 适配器模式(Adapter)</title>
    <link href="http://tech.nitaoge.com/p/a718df1a/"/>
    <id>http://tech.nitaoge.com/p/a718df1a/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-21T07:37:03.536Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="design" scheme="http://tech.nitaoge.com/categories/design/"/>
    
    
      <category term="看破设计模式" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>看破IDEA 安装、使用、配置</title>
    <link href="http://tech.nitaoge.com/p/24280e36/"/>
    <id>http://tech.nitaoge.com/p/24280e36/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.027Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="为什么我改用IDEA？"><a href="#为什么我改用IDEA？" class="headerlink" title="为什么我改用IDEA？"></a>为什么我改用IDEA？</h1><p>就eclipse每次打开都需要rebuild all projects，在网络环境及其恶劣的情况下，总是无故卡死，我就不想用它了。<br>就这么倔！</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IDEA下载地址</a></p><p>这里有很多开发工具供你选择，我开发前后端分别用到了WebStorm和IDEA。<br><img src="/images/idea/Snipaste_2019-04-15_19-05-29.png" alt="产品列表"></p><p>点击download来到下载选择页面，左边付费功能多，右边免费开源功能少。<br><img src="/images/idea/Snipaste_2019-04-15_19-08-37.png" alt="下载页面"></p><p>windows程序目录如下，Mac的Contents结构也类似：<br><img src="/images/idea/Snipaste_2019-04-15_19-16-28.png" alt="程序目录"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="开始一个项目"><a href="#开始一个项目" class="headerlink" title="开始一个项目"></a>开始一个项目</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>TODO</p><h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><p>TODO</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="程序配置文件参数"><a href="#程序配置文件参数" class="headerlink" title="程序配置文件参数"></a>程序配置文件参数</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m   <span class="comment">// 初始内存</span></span><br><span class="line">-Xmx750m   <span class="comment">// 最大内存</span></span><br><span class="line">-XX:ReservedCodeCacheSize=<span class="number">240</span>m  <span class="comment">// 代码恢复缓存</span></span><br><span class="line">-XX:+UseConcMarkSweepGC   <span class="comment">// 设置老年代为并发收集</span></span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB=<span class="number">50</span></span><br><span class="line">-ea</span><br><span class="line">-Dsun<span class="selector-class">.io</span><span class="selector-class">.useCanonCaches</span>=false</span><br><span class="line">-Djava<span class="selector-class">.net</span><span class="selector-class">.preferIPv4Stack</span>=true</span><br><span class="line">-Djdk<span class="selector-class">.http</span><span class="selector-class">.auth</span><span class="selector-class">.tunneling</span><span class="selector-class">.disabledSchemes</span>=<span class="string">""</span></span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line">-Dfile.encoding=UTF-<span class="number">8</span>   <span class="comment">// 文件编码集，解决控制台输出乱码问题</span></span><br><span class="line">-Deditable<span class="selector-class">.java</span><span class="selector-class">.test</span><span class="selector-class">.console</span>=true   <span class="comment">// 解决Junit @Test不能使用控制台输入问题</span></span><br></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>常用快捷键</li></ul><p>TODO</p><ul><li>自定义快捷键</li></ul><p>Settings -&gt; Keymap</p><h2 id="代码模版"><a href="#代码模版" class="headerlink" title="代码模版"></a>代码模版</h2><ul><li>自定义代码模版</li></ul><p>Settings -&gt; Editor -&gt; Live Templates</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="devtool" scheme="http://tech.nitaoge.com/categories/devtool/"/>
    
    
      <category term="看破IDEA" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4IDEA/"/>
    
  </entry>
  
  <entry>
    <title>看破Elastic-Job 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/75509985/"/>
    <id>http://tech.nitaoge.com/p/75509985/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.026Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="opensource" scheme="http://tech.nitaoge.com/categories/opensource/"/>
    
    
      <category term="看破开源组件" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/"/>
    
      <category term="Elastic-Job" scheme="http://tech.nitaoge.com/tags/Elastic-Job/"/>
    
  </entry>
  
  <entry>
    <title>看破Gradle 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/18a22795/"/>
    <id>http://tech.nitaoge.com/p/18a22795/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.585Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="gradle" scheme="http://tech.nitaoge.com/categories/gradle/"/>
    
    
      <category term="看破Gradle" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Gradle/"/>
    
  </entry>
  
  <entry>
    <title>看破Git 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/2ab4ec8e/"/>
    <id>http://tech.nitaoge.com/p/2ab4ec8e/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.028Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="devtool" scheme="http://tech.nitaoge.com/categories/devtool/"/>
    
    
      <category term="看破Git" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Git/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 3.JDK8 Core</title>
    <link href="http://tech.nitaoge.com/p/c46700a5/"/>
    <id>http://tech.nitaoge.com/p/c46700a5/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.586Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
</feed>
