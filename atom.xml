<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NiTaogeTech</title>
  
  <subtitle>Focus on Java, BD and Linux. </subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tech.nitaoge.com/"/>
  <updated>2019-04-21T07:42:58.965Z</updated>
  <id>http://tech.nitaoge.com/</id>
  
  <author>
    <name>中华郑六</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>看破Docker 2.启动方式</title>
    <link href="http://tech.nitaoge.com/p/24f59f15/"/>
    <id>http://tech.nitaoge.com/p/24f59f15/</id>
    <published>2019-04-20T11:35:43.000Z</published>
    <updated>2019-04-21T07:42:58.965Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://tech.nitaoge.com/categories/docker/"/>
    
    
      <category term="看破Docker" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Docker/"/>
    
  </entry>
  
  <entry>
    <title>看破Docker 4.网络管理</title>
    <link href="http://tech.nitaoge.com/p/bc4a98b5/"/>
    <id>http://tech.nitaoge.com/p/bc4a98b5/</id>
    <published>2019-04-20T11:35:43.000Z</published>
    <updated>2019-04-21T07:40:55.062Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://tech.nitaoge.com/categories/docker/"/>
    
    
      <category term="看破Docker" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Docker/"/>
    
  </entry>
  
  <entry>
    <title>看破Docker 3.使用命令详解</title>
    <link href="http://tech.nitaoge.com/p/8491e96f/"/>
    <id>http://tech.nitaoge.com/p/8491e96f/</id>
    <published>2019-04-20T11:35:43.000Z</published>
    <updated>2019-04-21T07:58:14.442Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="查看命令帮助"><a href="#查看命令帮助" class="headerlink" title="查看命令帮助"></a>查看命令帮助</h1><h2 id="查看docker所有命令"><a href="#查看docker所有命令" class="headerlink" title="查看docker所有命令"></a>查看docker所有命令</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">$ docker --<span class="keyword">help</span></span><br><span class="line"></span><br><span class="line">Usage:docker [OPTIONS] COMMAND</span><br><span class="line"></span><br><span class="line">A self-sufficient runtime <span class="keyword">for</span> containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --config string      Location of client config files (default <span class="string">"/home/nitaoge/.docker"</span>)</span><br><span class="line">  -<span class="keyword">D</span>, --debug              Enable debug mode</span><br><span class="line">  -<span class="keyword">H</span>, --host <span class="keyword">list</span>          Daemon socket(s) to connect to</span><br><span class="line">  -<span class="keyword">l</span>, --<span class="keyword">log</span>-level string   <span class="keyword">Set</span> the logging level (<span class="string">"debug"</span>|<span class="string">"info"</span>|<span class="string">"warn"</span>|<span class="string">"error"</span>|<span class="string">"fatal"</span>) (default <span class="string">"info"</span>)</span><br><span class="line">      --tls                <span class="keyword">Use</span> TLS; implied <span class="keyword">by</span> --tlsverify</span><br><span class="line">      --tlscacert string   Trust certs signed only <span class="keyword">by</span> this <span class="keyword">CA</span> (default <span class="string">"/home/nitaoge/.docker/ca.pem"</span>)</span><br><span class="line">      --tlscert string     Path to TLS certificate <span class="keyword">file</span> (default <span class="string">"/home/nitaoge/.docker/cert.pem"</span>)</span><br><span class="line">      --tlskey string      Path to TLS key <span class="keyword">file</span> (default <span class="string">"/home/nitaoge/.docker/key.pem"</span>)</span><br><span class="line">      --tlsverify          <span class="keyword">Use</span> TLS and verify the remote</span><br><span class="line">  -v, --<span class="keyword">version</span>            <span class="keyword">Print</span> <span class="keyword">version</span> information and quit</span><br><span class="line"></span><br><span class="line">Management Commands:</span><br><span class="line">  builder     Manage builds</span><br><span class="line">  config      Manage Docker configs</span><br><span class="line">  container   Manage containers</span><br><span class="line">  engine      Manage the docker engine</span><br><span class="line">  image       Manage images</span><br><span class="line">  network     Manage networks</span><br><span class="line">  node        Manage Swarm nodes</span><br><span class="line">  <span class="keyword">plugin</span>      Manage plugins</span><br><span class="line">  secret      Manage Docker secrets</span><br><span class="line">  service     Manage services</span><br><span class="line">  <span class="keyword">stack</span>       Manage Docker stacks</span><br><span class="line">  swarm       Manage Swarm</span><br><span class="line">  system      Manage Docker</span><br><span class="line">  trust       Manage trust <span class="keyword">on</span> Docker images</span><br><span class="line">  volume      Manage volumes</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  attach      Attach <span class="keyword">local</span> standard <span class="keyword">input</span>, output, and <span class="keyword">error</span> streams to a running container</span><br><span class="line">  build       Build <span class="keyword">an</span> image from a Dockerfile</span><br><span class="line">  commit      Create a new image from a container's changes</span><br><span class="line">  cp          <span class="keyword">Copy</span> files/folders between a container and the <span class="keyword">local</span> filesystem</span><br><span class="line">  create      Create a new container</span><br><span class="line">  diff        <span class="keyword">Inspect</span> changes to files or directories <span class="keyword">on</span> a container's filesystem</span><br><span class="line">  events      Get real time events from the server</span><br><span class="line">  exec        <span class="keyword">Run</span> a command <span class="keyword">in</span> a running container</span><br><span class="line">  export      Export a container's filesystem <span class="keyword">as</span> a tar archive</span><br><span class="line">  history     Show the history of <span class="keyword">an</span> image</span><br><span class="line">  images      <span class="keyword">List</span> images</span><br><span class="line">  import      Import the contents from a tarball to create a filesystem image</span><br><span class="line">  info        <span class="keyword">Display</span> system-wide information</span><br><span class="line">  <span class="keyword">inspect</span>     <span class="keyword">Return</span> low-level information <span class="keyword">on</span> Docker objects</span><br><span class="line">  kill        Kill <span class="keyword">one</span> or <span class="keyword">more</span> running containers</span><br><span class="line">  load        Load <span class="keyword">an</span> image from a tar archive or STDIN</span><br><span class="line">  login       <span class="keyword">Log</span> <span class="keyword">in</span> to a Docker registry</span><br><span class="line">  logout      <span class="keyword">Log</span> <span class="keyword">out</span> from a Docker registry</span><br><span class="line">  logs        Fetch the logs of a container</span><br><span class="line">  <span class="keyword">pause</span>       <span class="keyword">Pause</span> all processes within <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  port        <span class="keyword">List</span> port mappings or a specific mapping <span class="keyword">for</span> the container</span><br><span class="line">  ps          <span class="keyword">List</span> containers</span><br><span class="line">  pull        Pull <span class="keyword">an</span> image or a repository from a registry</span><br><span class="line">  push        Push <span class="keyword">an</span> image or a repository to a registry</span><br><span class="line">  <span class="keyword">rename</span>      <span class="keyword">Rename</span> a container</span><br><span class="line">  restart     Restart <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  <span class="keyword">rm</span>          Remove <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  rmi         Remove <span class="keyword">one</span> or <span class="keyword">more</span> images</span><br><span class="line">  <span class="keyword">run</span>         <span class="keyword">Run</span> a command <span class="keyword">in</span> a new container</span><br><span class="line">  <span class="keyword">save</span>        <span class="keyword">Save</span> <span class="keyword">one</span> or <span class="keyword">more</span> images to a tar archive (streamed to STDOUT <span class="keyword">by</span> default)</span><br><span class="line">  <span class="keyword">search</span>      <span class="keyword">Search</span> the Docker Hub <span class="keyword">for</span> images</span><br><span class="line">  start       Start <span class="keyword">one</span> or <span class="keyword">more</span> stopped containers</span><br><span class="line">  stats       <span class="keyword">Display</span> a live stream of container(s) resource usage statistics</span><br><span class="line">  stop        Stop <span class="keyword">one</span> or <span class="keyword">more</span> running containers</span><br><span class="line">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</span><br><span class="line">  top         <span class="keyword">Display</span> the running processes of a container</span><br><span class="line">  unpause     Unpause all processes within <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  <span class="keyword">update</span>      <span class="keyword">Update</span> configuration of <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  <span class="keyword">version</span>     Show the Docker <span class="keyword">version</span> information</span><br><span class="line">  wait        Block until <span class="keyword">one</span> or <span class="keyword">more</span> containers stop, then <span class="keyword">print</span> their <span class="keyword">exit</span> codes</span><br><span class="line"></span><br><span class="line"><span class="keyword">Run</span> 'docker COMMAND --<span class="keyword">help</span>' <span class="keyword">for</span> <span class="keyword">more</span> information <span class="keyword">on</span> a command.</span><br></pre></td></tr></table></figure><h2 id="查看docker-container所有命令"><a href="#查看docker-container所有命令" class="headerlink" title="查看docker container所有命令"></a>查看docker container所有命令</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ docker container --<span class="keyword">help</span></span><br><span class="line"></span><br><span class="line">Usage:docker container COMMAND</span><br><span class="line"></span><br><span class="line">Manage containers</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  attach      Attach <span class="keyword">local</span> standard <span class="keyword">input</span>, output, and <span class="keyword">error</span> streams to a running container</span><br><span class="line">  commit      Create a new image from a container's changes</span><br><span class="line">  cp          <span class="keyword">Copy</span> files/folders between a container and the <span class="keyword">local</span> filesystem</span><br><span class="line">  create      Create a new container</span><br><span class="line">  diff        <span class="keyword">Inspect</span> changes to files or directories <span class="keyword">on</span> a container's filesystem</span><br><span class="line">  exec        <span class="keyword">Run</span> a command <span class="keyword">in</span> a running container</span><br><span class="line">  export      Export a container's filesystem <span class="keyword">as</span> a tar archive</span><br><span class="line">  <span class="keyword">inspect</span>     <span class="keyword">Display</span> detailed information <span class="keyword">on</span> <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  kill        Kill <span class="keyword">one</span> or <span class="keyword">more</span> running containers</span><br><span class="line">  logs        Fetch the logs of a container</span><br><span class="line">  <span class="keyword">ls</span>          <span class="keyword">List</span> containers</span><br><span class="line">  <span class="keyword">pause</span>       <span class="keyword">Pause</span> all processes within <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  port        <span class="keyword">List</span> port mappings or a specific mapping <span class="keyword">for</span> the container</span><br><span class="line">  prune       Remove all stopped containers</span><br><span class="line">  <span class="keyword">rename</span>      <span class="keyword">Rename</span> a container</span><br><span class="line">  restart     Restart <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  <span class="keyword">rm</span>          Remove <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  <span class="keyword">run</span>         <span class="keyword">Run</span> a command <span class="keyword">in</span> a new container</span><br><span class="line">  start       Start <span class="keyword">one</span> or <span class="keyword">more</span> stopped containers</span><br><span class="line">  stats       <span class="keyword">Display</span> a live stream of container(s) resource usage statistics</span><br><span class="line">  stop        Stop <span class="keyword">one</span> or <span class="keyword">more</span> running containers</span><br><span class="line">  top         <span class="keyword">Display</span> the running processes of a container</span><br><span class="line">  unpause     Unpause all processes within <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  <span class="keyword">update</span>      <span class="keyword">Update</span> configuration of <span class="keyword">one</span> or <span class="keyword">more</span> containers</span><br><span class="line">  wait        Block until <span class="keyword">one</span> or <span class="keyword">more</span> containers stop, then <span class="keyword">print</span> their <span class="keyword">exit</span> codes</span><br><span class="line"></span><br><span class="line"><span class="keyword">Run</span> 'docker container COMMAND --<span class="keyword">help</span>' <span class="keyword">for</span> <span class="keyword">more</span> information <span class="keyword">on</span> a command.</span><br></pre></td></tr></table></figure><h2 id="查看子命令"><a href="#查看子命令" class="headerlink" title="查看子命令"></a>查看子命令</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">start</span> <span class="comment">--help</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Usage</span>:docker <span class="keyword">start</span> [OPTIONS] <span class="keyword">CONTAINER</span> [CONTAINER...]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Start</span> one <span class="keyword">or</span> more stopped containers</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, <span class="comment">--attach               Attach STDOUT/STDERR and forward signals</span></span><br><span class="line">      <span class="comment">--detach-keys string   Override the key sequence for detaching a container</span></span><br><span class="line">  -i, <span class="comment">--interactive          Attach container's STDIN</span></span><br></pre></td></tr></table></figure><h2 id="子命令分类"><a href="#子命令分类" class="headerlink" title="子命令分类"></a>子命令分类</h2><p><img src="/images/docker/Screenshot 2019-04-21 08.20.43.png" alt></p><h2 id="容器、镜像、仓库的操作关系"><a href="#容器、镜像、仓库的操作关系" class="headerlink" title="容器、镜像、仓库的操作关系"></a>容器、镜像、仓库的操作关系</h2><p><img src="/images/docker/Screenshot 2019-04-21 08.24.01.png" alt></p><h1 id="使用docker命令"><a href="#使用docker命令" class="headerlink" title="使用docker命令"></a>使用docker命令</h1><h2 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h2><h3 id="docker-run（创建容器）"><a href="#docker-run（创建容器）" class="headerlink" title="docker run（创建容器）"></a>docker run（创建容器）</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run <span class="string">[OPTIONS]</span> IMAGE <span class="string">[COMMAND]</span> <span class="string">[ARG...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>      –add-host list                  Add a custom host-to-IP mapping (host:ip)<br>  -a, –attach list                    Attach to STDIN, STDOUT or STDERR<br>      –blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)<br>      –blkio-weight-device list       Block IO weight (relative device weight) (default [])<br>      –cap-add list                   Add Linux capabilities<br>      –cap-drop list                  Drop Linux capabilities<br>      –cgroup-parent string           Optional parent cgroup for the container<br>      –cidfile string                 Write the container ID to the file<br>      –cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period<br>      –cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota<br>      –cpu-rt-period int              Limit CPU real-time period in microseconds<br>      –cpu-rt-runtime int             Limit CPU real-time runtime in microseconds<br>  -c, –cpu-shares int                 CPU shares (relative weight)<br>      –cpus decimal                   Number of CPUs<br>      –cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)<br>      –cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)<br>  -d, –detach                         Run container in background and print container ID<br>      –detach-keys string             Override the key sequence for detaching a container<br>      –device list                    Add a host device to the container<br>      –device-cgroup-rule list        Add a rule to the cgroup allowed devices list<br>      –device-read-bps list           Limit read rate (bytes per second) from a device (default [])<br>      –device-read-iops list          Limit read rate (IO per second) from a device (default [])<br>      –device-write-bps list          Limit write rate (bytes per second) to a device (default [])<br>      –device-write-iops list         Limit write rate (IO per second) to a device (default [])<br>      –disable-content-trust          Skip image verification (default true)<br>      –dns list                       Set custom DNS servers<br>      –dns-option list                Set DNS options<br>      –dns-search list                Set custom DNS search domains<br>      –entrypoint string              Overwrite the default ENTRYPOINT of the image<br>  -e, –env list                       Set environment variables<br>      –env-file list                  Read in a file of environment variables<br>      –expose list                    Expose a port or a range of ports<br>      –group-add list                 Add additional groups to join<br>      –health-cmd string              Command to run to check health<br>      –health-interval duration       Time between running the check (ms|s|m|h) (default 0s)<br>      –health-retries int             Consecutive failures needed to report unhealthy<br>      –health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)<br>      –health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)<br>      –help                           Print usage<br>  -h, –hostname string                Container host name<br>      –init                           Run an init inside the container that forwards signals and reaps processes<br>  -i, –interactive                    Keep STDIN open even if not attached<br>      –ip string                      IPv4 address (e.g., 172.30.100.104)<br>      –ip6 string                     IPv6 address (e.g., 2001:db8::33)<br>      –ipc string                     IPC mode to use<br>      –isolation string               Container isolation technology<br>      –kernel-memory bytes            Kernel memory limit<br>  -l, –label list                     Set meta data on a container<br>      –label-file list                Read in a line delimited file of labels<br>      –link list                      Add link to another container<br>      –link-local-ip list             Container IPv4/IPv6 link-local addresses<br>      –log-driver string              Logging driver for the container<br>      –log-opt list                   Log driver options<br>      –mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)<br>  -m, –memory bytes                   Memory limit<br>      –memory-reservation bytes       Memory soft limit<br>      –memory-swap bytes              Swap limit equal to memory plus swap: ‘-1’ to enable unlimited swap<br>      –memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)<br>      –mount mount                    Attach a filesystem mount to the container<br>      –name string                    Assign a name to the container<br>      –network string                 Connect a container to a network (default “default”)<br>      –network-alias list             Add network-scoped alias for the container<br>      –no-healthcheck                 Disable any container-specified HEALTHCHECK<br>      –oom-kill-disable               Disable OOM Killer<br>      –oom-score-adj int              Tune host’s OOM preferences (-1000 to 1000)<br>      –pid string                     PID namespace to use<br>      –pids-limit int                 Tune container pids limit (set -1 for unlimited)<br>      –privileged                     Give extended privileges to this container<br>  -p, –publish list                   Publish a container’s port(s) to the host<br>  -P, –publish-all                    Publish all exposed ports to random ports<br>      –read-only                      Mount the container’s root filesystem as read only<br>      –restart string                 Restart policy to apply when a container exits (default “no”)<br>      –rm                             Automatically remove the container when it exits<br>      –runtime string                 Runtime to use for this container<br>      –security-opt list              Security Options<br>      –shm-size bytes                 Size of /dev/shm<br>      –sig-proxy                      Proxy received signals to the process (default true)<br>      –stop-signal string             Signal to stop a container (default “SIGTERM”)<br>      –stop-timeout int               Timeout (in seconds) to stop a container<br>      –storage-opt list               Storage driver options for the container<br>      –sysctl map                     Sysctl options (default map[])<br>      –tmpfs list                     Mount a tmpfs directory<br>  -t, –tty                            Allocate a pseudo-TTY<br>      –ulimit ulimit                  Ulimit options (default [])<br>  -u, –user string                    Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])<br>      –userns string                  User namespace to use<br>      –uts string                     UTS namespace to use<br>  -v, –volume list                    Bind mount a volume<br>      –volume-driver string           Optional volume driver for the container<br>      –volumes-from list              Mount volumes from the specified container(s)<br>  -w, –workdir string                 Working directory inside the container</p></blockquote><ul><li>比如：</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">run</span> -<span class="keyword">it</span> -d <span class="comment">--name testubt  ubuntu /bin/bash</span></span><br><span class="line">$ docker <span class="built_in">run</span> -d -p <span class="number">80</span>:<span class="number">80</span> <span class="comment">--name ng1  nginx</span></span><br></pre></td></tr></table></figure><p>-i 进行交互模式<br>-t 以伪终端模式<br>-d 容器后台运行<br>-p 端口映射</p><h3 id="docker-ps（查看容器进程状态）"><a href="#docker-ps（查看容器进程状态）" class="headerlink" title="docker ps（查看容器进程状态）"></a>docker ps（查看容器进程状态）</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> docker ps [<span class="keyword">OPTIONS</span>]</span><br></pre></td></tr></table></figure><blockquote></blockquote><p>Options:<br>  -a, –all             Show all containers (default shows just running)<br>  -f, –filter filter   Filter output based on conditions provided<br>      –format string   Pretty-print containers using a Go template<br>  -n, –last int        Show n last created containers (includes all states) (default -1)<br>  -l, –latest          Show the latest created container (includes all states)<br>      –no-trunc        Don’t truncate output<br>  -q, –quiet           Only display numeric IDs<br>  -s, –size            Display total file sizes</p><h3 id="docker-start-stop-restart-kill（容器启停）"><a href="#docker-start-stop-restart-kill（容器启停）" class="headerlink" title="docker start/stop/restart/kill（容器启停）"></a>docker start/stop/restart/kill（容器启停）</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker start <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -a, –attach               Attach STDOUT/STDERR and forward signals<br>      –detach-keys string   Override the key sequence for detaching a container<br>  -i, –interactive          Attach container’s STDIN</p></blockquote><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -t, –time int   Seconds to wait for stop before killing it (default 10)</p></blockquote><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker restart <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -t, –time int   Seconds to wait for stop before killing the container (default 10)</p></blockquote><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker kill <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -s, –signal string   Signal to send to the container (default “KILL”)</p></blockquote><ul><li>stop是优雅关闭，kill是发送kill信号。</li></ul><h3 id="docker-logs（查看容器日志）"><a href="#docker-logs（查看容器日志）" class="headerlink" title="docker logs（查看容器日志）"></a>docker logs（查看容器日志）</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> docker logs [<span class="keyword">OPTIONS</span>] CONTAINER</span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>      –details        Show extra details provided to logs<br>  -f, –follow         Follow log output<br>      –since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)<br>      –tail string    Number of lines to show from the end of the logs (default “all”)<br>  -t, –timestamps     Show timestamps<br>      –until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)</p></blockquote><h3 id="docker-exec（在容器中执行命令）"><a href="#docker-exec（在容器中执行命令）" class="headerlink" title="docker exec（在容器中执行命令）"></a>docker exec（在容器中执行命令）</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> COMMAND <span class="comment">[ARG...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -d, –detach               Detached mode: run command in the background<br>      –detach-keys string   Override the key sequence for detaching a container<br>  -e, –env list             Set environment variables<br>  -i, –interactive          Keep STDIN open even if not attached<br>      –privileged           Give extended privileges to the command<br>  -t, –tty                  Allocate a pseudo-TTY<br>  -u, –user string          Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])<br>  -w, –workdir string       Working directory inside the container</p></blockquote><ul><li>比如：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it ng1 /bin/bash</span></span><br></pre></td></tr></table></figure><ul><li>在容器中安装应用</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>apt update</span><br><span class="line"><span class="variable">$ </span>apt install vim  -y</span><br></pre></td></tr></table></figure><h3 id="docker-rm（删除容器）"><a href="#docker-rm（删除容器）" class="headerlink" title="docker rm（删除容器）"></a>docker rm（删除容器）</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rm <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[CONTAINER...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -f, –force     Force the removal of a running container (uses SIGKILL)<br>  -l, –link      Remove the specified link<br>  -v, –volumes   Remove the volumes associated with the container</p></blockquote><h3 id="docker-commit（将容器制作为新镜像）"><a href="#docker-commit（将容器制作为新镜像）" class="headerlink" title="docker commit（将容器制作为新镜像）"></a>docker commit（将容器制作为新镜像）</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[REPOSITORY<span class="comment">[:TAG]</span>]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -a, –author string    Author (e.g., “John Hannibal Smith <a href="mailto:&#x68;&#97;&#x6e;&#x6e;&#x69;&#x62;&#97;&#108;&#x40;&#97;&#45;&#x74;&#x65;&#97;&#x6d;&#x2e;&#99;&#111;&#109;" target="_blank" rel="noopener">&#x68;&#97;&#x6e;&#x6e;&#x69;&#x62;&#97;&#108;&#x40;&#97;&#45;&#x74;&#x65;&#97;&#x6d;&#x2e;&#99;&#111;&#109;</a>“)<br>  -c, –change list      Apply Dockerfile instruction to the created image<br>  -m, –message string   Commit message<br>  -p, –pause            Pause container during commit (default true)</p></blockquote><ul><li>比如：</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit ng1 <span class="keyword">new</span><span class="type"></span>-nginx</span><br></pre></td></tr></table></figure><h2 id="镜像管理"><a href="#镜像管理" class="headerlink" title="镜像管理"></a>镜像管理</h2><h3 id="docker-pull-push（镜像推拉）"><a href="#docker-pull-push（镜像推拉）" class="headerlink" title="docker pull/push（镜像推拉）"></a>docker pull/push（镜像推拉）</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>docker pull [OPTIONS] NAME[<span class="symbol">:TAG|</span><span class="variable">@DIGEST</span>]</span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -a, –all-tags                Download all tagged images in the repository<br>      –disable-content-trust   Skip image verification (default true)</p></blockquote><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  docker push <span class="string">[OPTIONS]</span> NAME<span class="string">[:TAG]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>      –disable-content-trust   Skip image signing (default true)</p></blockquote><h3 id="docker-search（查找镜像）"><a href="#docker-search（查找镜像）" class="headerlink" title="docker search（查找镜像）"></a>docker search（查找镜像）</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> docker search [<span class="keyword">OPTIONS</span>] TERM</span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -f, –filter filter   Filter output based on conditions provided<br>      –format string   Pretty-print search using a Go template<br>      –limit int       Max number of search results (default 25)<br>      –no-trunc        Don’t truncate output</p></blockquote><h3 id="docker-tag（制作版本标签）"><a href="#docker-tag（制作版本标签）" class="headerlink" title="docker tag（制作版本标签）"></a>docker tag（制作版本标签）</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">tag</span> <span class="title">SOURCE_IMAGE</span>[:<span class="keyword">TAG</span>] TARGET_IMAGE[:<span class="keyword">TAG</span>]</span><br></pre></td></tr></table></figure><h3 id="docker-build（根据Dockerfile制作镜像）"><a href="#docker-build（根据Dockerfile制作镜像）" class="headerlink" title="docker build（根据Dockerfile制作镜像）"></a>docker build（根据Dockerfile制作镜像）</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build [OPTIONS] PATH <span class="params">| URL |</span> -</span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>      –add-host list           Add a custom host-to-IP mapping (host:ip)<br>      –build-arg list          Set build-time variables<br>      –cache-from strings      Images to consider as cache sources<br>      –cgroup-parent string    Optional parent cgroup for the container<br>      –compress                Compress the build context using gzip<br>      –cpu-period int          Limit the CPU CFS (Completely Fair Scheduler) period<br>      –cpu-quota int           Limit the CPU CFS (Completely Fair Scheduler) quota<br>  -c, –cpu-shares int          CPU shares (relative weight)<br>      –cpuset-cpus string      CPUs in which to allow execution (0-3, 0,1)<br>      –cpuset-mems string      MEMs in which to allow execution (0-3, 0,1)<br>      –disable-content-trust   Skip image verification (default true)<br>  -f, –file string             Name of the Dockerfile (Default is ‘PATH/Dockerfile’)<br>      –force-rm                Always remove intermediate containers<br>      –iidfile string          Write the image ID to the file<br>      –isolation string        Container isolation technology<br>      –label list              Set metadata for an image<br>  -m, –memory bytes            Memory limit<br>      –memory-swap bytes       Swap limit equal to memory plus swap: ‘-1’ to enable unlimited swap<br>      –network string          Set the networking mode for the RUN instructions during build (default “default”)<br>      –no-cache                Do not use cache when building the image<br>      –pull                    Always attempt to pull a newer version of the image<br>  -q, –quiet                   Suppress the build output and print image ID on success<br>      –rm                      Remove intermediate containers after a successful build (default true)<br>      –security-opt strings    Security options<br>      –shm-size bytes          Size of /dev/shm<br>  -t, –tag list                Name and optionally a tag in the ‘name:tag’ format<br>      –target string           Set the target build stage to build.<br>      –ulimit ulimit           Ulimit options (default [])</p></blockquote><h3 id="docker-rmi（删除镜像）"><a href="#docker-rmi（删除镜像）" class="headerlink" title="docker rmi（删除镜像）"></a>docker rmi（删除镜像）</h3><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rmi <span class="string">[OPTIONS]</span> IMAGE <span class="string">[IMAGE...]</span></span><br></pre></td></tr></table></figure><blockquote><p>Options:<br>  -f, –force      Force removal of the image<br>      –no-prune   Do not delete untagged parents</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://tech.nitaoge.com/categories/docker/"/>
    
    
      <category term="看破Docker" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Docker/"/>
    
  </entry>
  
  <entry>
    <title>看破Docker 1.基本概念及快速安装</title>
    <link href="http://tech.nitaoge.com/p/2a951b2f/"/>
    <id>http://tech.nitaoge.com/p/2a951b2f/</id>
    <published>2019-04-20T11:35:43.000Z</published>
    <updated>2019-04-21T08:42:11.013Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="Docker是什么？"><a href="#Docker是什么？" class="headerlink" title="Docker是什么？"></a>Docker是什么？</h2><p>Docker是一个开发，运输和运行应用程序的开放平台。Docker使您可以将应用程序与基础架构分离，以便快速交付软件。使用Docker，您可以像管理应用程序一样管理基础架构。通过利用Docker的方法快速发送，测试和部署代码，您可以显着减少编写代码和在生产中运行代码之间的延迟。</p><p>总之Docker结合k8s用于自动化构建微服务架构。</p><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><p>为了一统容器江山，Google、CoreOS、Docker等公司成立了一个名为Open Container Initiative（OCI）的组织，来制定容器规范，保证不同厂商开发的容器可移植。</p><p>目前OCI发布了两个规范：runtime spec（运行机制）和image format spec（镜像格式）。</p><p>Docker使用客户端 - 服务器架构。Docker 客户端与Docker 守护进程通信，后者负责构建，运行和分发Docker容器。Docker客户端和守护程序可以 在同一系统上运行，也可以将Docker客户端连接到远程Docker守护程序。Docker客户端和守护程序使用REST API，通过UNIX套接字或网络接口进行通信。</p><p><img src="/images/docker/architecture.svg" alt></p><p>架构包括：</p><ul><li>Docker守护进程（dockerd）</li><li>Docker客户端（docker client）</li><li>Docker镜像仓库（Registry）</li><li>Docker容器对象（docker objects）<ul><li>镜像 (images)</li><li>容器（containers）</li><li>容器API（services）</li></ul></li></ul><h2 id="底层使用技术"><a href="#底层使用技术" class="headerlink" title="底层使用技术"></a>底层使用技术</h2><ul><li>namespaces</li><li>cgroups</li><li>UnionFS</li><li>libcontainer</li></ul><h1 id="我的环境"><a href="#我的环境" class="headerlink" title="我的环境"></a>我的环境</h1><p>docker版本: 18.09.5<br>内核版本: 3.10.0-862.el7.x86_64<br>系统版本: CentOS Linux release 7.6.1810 (Core)<br>CPU: Intel(R) Core(TM) i3-8100 CPU @ 3.60GHz 4核<br>Memory: 16G<br>Disk: 128G SSD(/)+1T SATA(/disk1)</p><h1 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h1><h2 id="内核支持"><a href="#内核支持" class="headerlink" title="内核支持"></a>内核支持</h2><p>Docker 对 Linux 内核版本的最低要求是3.10，如果内核版本低于 3.10 会缺少一些运行 Docker 容器的功能。这些比较旧的内核，在一定条件下会导致数据丢失和频繁恐慌错误。</p><p>推荐使用版本号为（3.x.y）的 3.10 Linux 内核版本（或者新的维护版本），保持跟上内核的次要版本更新来确保内核的BUG已经被修复。</p><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><blockquote><p>To install Docker CE, you need a maintained version of CentOS 7. </p></blockquote><blockquote><p>Archived versions aren’t supported or tested.<br>The centos-extras repository must be enabled. This repository is enabled by default, but if you have disabled it, you need to re-enable it.</p></blockquote><blockquote><p>The overlay2 storage driver is recommended.</p></blockquote><ul><li><code>centos-extras repository</code> CentOS7默认是开启的，不用管它。</li><li>官方推荐的 <code>overlay2</code> 是一种文件存储驱动，CentOS老版本内核是不支持的，必须升到3.10以上，CentOS7.6默认是支持的，具体原理以后再深入。</li></ul><h2 id="卸载老版本"><a href="#卸载老版本" class="headerlink" title="卸载老版本"></a>卸载老版本</h2><blockquote><p>Older versions of Docker were called docker or docker-engine. If these are installed, uninstall them, along with associated dependencies.<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker <span class="string">\</span></span><br><span class="line">                  docker-client <span class="string">\</span></span><br><span class="line">                  docker-client-latest <span class="string">\</span></span><br><span class="line">                  docker-common <span class="string">\</span></span><br><span class="line">                  docker-latest <span class="string">\</span></span><br><span class="line">                  docker-latest-logrotate <span class="string">\</span></span><br><span class="line">                  docker-logrotate <span class="string">\</span></span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>It’s OK if yum reports that none of these packages are installed.</p></blockquote><blockquote><p>The contents of /var/lib/docker/, including images, containers, volumes, and networks, are preserved. The Docker CE package is now called docker-ce.</p></blockquote><ul><li>官方提供docker-ee（企业版）和docker-ce（社区版）两个版本，我选择docker-ce进行安装。</li></ul><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><blockquote><p>You can install Docker CE in different ways, depending on your needs:</p></blockquote><blockquote><ul><li>Most users set up Docker’s repositories and install from them, for ease of installation and upgrade tasks. This is the recommended approach.</li></ul></blockquote><blockquote><ul><li>Some users download the RPM package and install it manually and manage upgrades completely manually. This is useful in situations such as installing Docker on air-gapped systems with no access to the internet.</li></ul></blockquote><blockquote><ul><li>In testing and development environments, some users choose to use automated convenience scripts to install Docker.</li></ul></blockquote><p>可以通过yum源安装，可以下载RPM包安装，也可以使用自动构建脚本安装。<br>既然官方推荐使用yum源方式安装，那就听他的，本文使用yum源安装。</p><blockquote><p>Before you install Docker CE for the first time on a new host machine, you need to set up the Docker repository. Afterward, you can install and update Docker from the repository.</p></blockquote><blockquote><p>SET UP THE REPOSITORY<br>Install required packages. yum-utils provides the yum-config-manager utility, and device-mapper-persistent-data and lvm2 are required by the devicemapper storage driver.<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-<span class="class"><span class="keyword">data</span> \</span></span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Use the following command to set up the stable repository.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --<span class="built_in">add</span>-repo \</span><br><span class="line">    http<span class="variable">s:</span>//download.docker.<span class="keyword">com</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br></pre></td></tr></table></figure></p></blockquote><p>确保系统中有yum-utils、device-mapper-persistent-data、lvm2工具，CentOS7.6默认是有的，然后添加docker的yum源即可（官方yum源有可能连接失败，可以使用阿里云的）。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># sudo yum-config-manager \</span><br><span class="line">  --<span class="built_in">add</span>-repo \</span><br><span class="line">  http<span class="variable">s:</span>//mirrors.aliyun.<span class="keyword">com</span>/docker-<span class="keyword">ce</span>/linux/centos/docker-<span class="keyword">ce</span>.repo</span><br></pre></td></tr></table></figure></p><h2 id="添加持续集成和测试的版本库"><a href="#添加持续集成和测试的版本库" class="headerlink" title="添加持续集成和测试的版本库"></a>添加持续集成和测试的版本库</h2><blockquote><p>Optional: Enable the nightly or test repositories.</p></blockquote><blockquote><p>These repositories are included in the docker.repo file above but are disabled by default. You can enable them alongside the stable repository. The following command enables the nightly repository.<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-<span class="built_in">config</span>-manager <span class="comment">--enable docker-ce-nightly</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>To enable the test channel, run the following command:<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-<span class="built_in">config</span>-manager <span class="comment">--enable docker-ce-test</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>You can disable the nightly or test repository by running the yum-config-manager command with the –disable flag. To re-enable it, use the –enable flag. The following command disables the nightly repository.<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-<span class="built_in">config</span>-manager <span class="comment">--disable docker-ce-nightly</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Learn about nightly and test channels.</p></blockquote><p>默认持续集成的版本和测试的版本在yum源配置文件中是禁用的。<br>我不添加，我只用稳定版……</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>1.install the latest version of Docker CE and containerd, or go to the next step to install a specific version:<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>If prompted to accept the GPG key, verify that the fingerprint matches 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35, and if so, accept it.</p></blockquote><blockquote><p>Got multiple Docker repositories?</p><blockquote><p>If you have multiple Docker repositories enabled, installing or updating without specifying a version in the yum install or yum update command always installs the highest possible version, which may not be appropriate for your stability needs.</p></blockquote></blockquote><blockquote><p>Docker is installed but not started. The docker group is created, but no users are added to the group.</p></blockquote><blockquote><p>2.To install a specific version of Docker CE, list the available versions in the repo, then select and install:</p></blockquote><blockquote><blockquote><p>a. List and sort the versions available in your repo. This example sorts results by version number, highest to lowest, and is truncated:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum <span class="keyword">list</span> docker-ce --showduplicates | <span class="keyword">sort</span> -<span class="built_in">r</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><blockquote><p>docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable<br>docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable<br>docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable<br>docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</p></blockquote></blockquote><blockquote><blockquote><p>The list returned depends on which repositories are enabled, and is specific to your version of CentOS (indicated by the .el7 suffix in this example).</p></blockquote></blockquote><blockquote><blockquote><p>b. Install a specific version by its fully qualified package name, which is the package name (docker-ce) plus the version string (2nd column) starting at the first colon (:), up to the first hyphen, separated by a hyphen (-). For example, docker-ce-18.09.1.<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-<span class="keyword">ce</span>-<span class="symbol">&lt;VERSION_STRING&gt;</span> docker-<span class="keyword">ce</span>-cli-<span class="symbol">&lt;VERSION_STRING&gt;</span> containerd.io</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><p>Docker is installed but not started. The docker group is created, but no users are added to the group.</p></blockquote><p>可以查看可用版本，然后指定版本安装，安装完是不会启动的，创建了docker组，但是没有用户。</p><ul><li>这里我选择安装最新版。</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><blockquote><p>3.Start Docker.<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="literal">start</span> docker</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>4.Verify that Docker CE is installed correctly by running the hello-world image.<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><blockquote><p>This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.</p></blockquote></blockquote><blockquote><p>Docker CE is installed and running. You need to use sudo to run Docker commands. Continue to <a href="https://docs.docker.com/install/linux/linux-postinstall/" target="_blank" rel="noopener">Linux postinstall</a> to allow non-privileged users to run Docker commands and for other optional configuration steps.</p></blockquote><ul><li>注意此处启动docker是使用的root用户，以后重点研究一下docker安全问题。</li><li>启动和测试，默认下载个test镜像然后在容器中运行它。</li><li>这里也可以不急着启动，先到Linux postinstall页面查看如何处理安装善后工作。</li><li>我启动之后拉不下来hello-world镜像，所以得配置国内镜像加速。</li></ul><h2 id="善后"><a href="#善后" class="headerlink" title="善后"></a>善后</h2><h3 id="配置国内镜像加速"><a href="#配置国内镜像加速" class="headerlink" title="配置国内镜像加速"></a>配置国内镜像加速</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -<span class="selector-tag">p</span> /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon<span class="selector-class">.json</span> &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">  <span class="string">"https://需自己注册阿里云账号.mirror.aliyuncs.com"</span>,</span><br><span class="line">  <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="用普通用户管理docker"><a href="#用普通用户管理docker" class="headerlink" title="用普通用户管理docker"></a>用普通用户管理docker</h3><blockquote><p>Manage Docker as a non-root user</p><blockquote><p>The Docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. The Docker daemon always runs as the root user.<br>If you don’t want to preface the docker command with sudo, create a Unix group called docker and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the docker group.</p></blockquote></blockquote><p>默认情况下，docker守护进程绑定了一个unix套接字文件来代替tcp套接字，unix套接字<br>属于root用户，其他用户访问必须使用sudo。docker守护进程总是使用root用户启动。<br>如果你不想使用sudo，就建一个docker用户和组（安装后默认建完了），这样当Docker守护进程启动之后，就会创建一个可以让docker组成员访问的unix套接字文件。</p><blockquote><p>Warning</p><blockquote><p>The docker group grants privileges equivalent to the root user. For details on how this impacts security in your system, see Docker Daemon Attack Surface.</p></blockquote></blockquote><p>docker组被授予root同样的权限，如果使用tcp套接字对外开放端口，存在XSS问题。<br>如果您明确决定这样做，也可以通过HTTP公开REST API。但是，如果您这样做，请注意上述安全隐患。确保只能从受信任的网络或VPN访问它，或者使用stunnel和客户端SSL证书等机制进行保护。您还可以使用HTTPS和证书保护API端点。</p><p>守护程序也可能容易受到其他输入的攻击，例如从带有docker load的磁盘加载映像，或者使用docker pull从网络加载。从Docker 1.3.2开始，图像现在在Linux / Unix平台上的chrooted子流程中提取，是更广泛地实现权限分离的第一步。从Docker 1.10.0开始，所有图像都通过其内容的加密校验和进行存储和访问，从而限制了攻击者与现有图像发生冲突的可能性。</p><p>最后，如果您在服务器上运行Docker，建议在服务器上独占运行Docker，并将所有其他服务移动到Docker控制的容器中。当然，保留您喜欢的管理工具（可能至少是SSH服务器）以及现有的监控/监督流程（例如NRPE和collectd）都可以。</p><blockquote><p>To create the docker group and add your user:</p><blockquote><p>1.Create the docker group.<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo groupadd docker</span><br></pre></td></tr></table></figure></p></blockquote></blockquote><p>这步可以略过。</p><blockquote><blockquote><p>2.Add your user to the docker group.<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><p>添加当前登录用户到docker组。</p><blockquote><blockquote><p>3.Log out and log back in so that your group membership is re-evaluated.</p><blockquote><p>If testing on a virtual machine, it may be necessary to restart the virtual machine for changes to take effect.<br>On a desktop Linux environment such as X Windows, log out of your session completely and then log back in.</p></blockquote></blockquote></blockquote><p>注销重新登录。</p><blockquote><blockquote><p>4.Verify that you can run docker commands without sudo.<br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure></p></blockquote></blockquote><blockquote><blockquote><p>This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.</p></blockquote></blockquote><p>测试是否正常运行。</p><p>If you initially ran Docker CLI commands using sudo before adding your user to the docker group, you may see the following error, which indicates that your ~/.docker/ directory was created with incorrect permissions due to the sudo commands.</p><p>WARNING: Error loading config file: /home/user/.docker/config.json -<br>stat /home/user/.docker/config.json: permission denied<br>To fix this problem, either remove the ~/.docker/ directory (it is recreated automatically, but any custom settings are lost), or change its ownership and permissions using the following commands:<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="keyword">chown</span> <span class="string">"$USER"</span>:<span class="string">"$USER"</span> /home/<span class="string">"$USER"</span>/.docker -R</span><br><span class="line">$ sudo <span class="keyword">chmod</span> g+rwx <span class="string">"$HOME/.docker"</span> -R</span><br></pre></td></tr></table></figure></p><p>如果出现权限问题，给刚加进docker组的当前登录普通用户赋权就完事。</p><h3 id="配置开机启动"><a href="#配置开机启动" class="headerlink" title="配置开机启动"></a>配置开机启动</h3><blockquote><p>Most current Linux distributions (RHEL, CentOS, Fedora, Ubuntu 16.04 and higher) use systemd to manage which services start when the system boots. </p></blockquote><blockquote><p>systemd<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="builtin-name">enable</span> docker</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>To disable this behavior, use disable instead.<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl <span class="builtin-name">disable</span> docker</span><br></pre></td></tr></table></figure></p></blockquote><p>CentOS7以后使用systemd做系统服务管理，配置简单。</p><h3 id="配置Docker守护程序侦听连接的位置"><a href="#配置Docker守护程序侦听连接的位置" class="headerlink" title="配置Docker守护程序侦听连接的位置"></a>配置Docker守护程序侦听连接的位置</h3><blockquote><p>By default, the Docker daemon listens for connections on a UNIX socket to accept requests from local clients. It is possible to allow Docker to accept requests from remote hosts by configuring it to listen on an IP address and port as well as the UNIX socket. For more detailed information on this configuration option take a look at “Bind Docker to another host/port or a unix socket” section of the Docker CLI Reference article.</p></blockquote><p>默认情况下，Docker守护程序侦听UNIX套接字上的连接以接受来自本地客户端的请求。通过将Docker配置为侦听IP地址和端口以及UNIX套接字，可以允许Docker接受来自远程主机的请求。有关此配置选项的更多详细信息，请参阅Docker CLI参考文章中的“将Docker绑定到另一个主机/端口或unix套接字”部分。</p><blockquote><p>Before configuring Docker to accept connections from remote hosts it is critically important that you understand the security implications of opening docker to the network. If steps are not taken to secure the connection, it is possible for remote non-root users to gain root access on the host. For more information on how to use TLS certificates to secure this connection, check this article on how to protect the Docker daemon socket.</p></blockquote><p>在配置Docker以接受来自远程主机的连接之前，了解打开docker到网络的安全隐患至关重要。 如果不采取步骤来保护连接，则远程非root用户可以在主机上获得root访问权限。 有关如何使用TLS证书保护此连接的更多信息，请查看有关如何保护Docker守护程序套接字的文章。</p><blockquote><p>Configuring Docker to accept remote connections can be done with the docker.service systemd unit file for Linux distributions using systemd, such as recent versions of RedHat, CentOS, Ubuntu and SLES, or with the daemon.json file which is recommended for Linux distributions that do not use systemd.</p></blockquote><p>配置Docker以接受远程连接可以使用systemd的Linux发行版的docker.service systemd单元文件来完成，例如RedHat，CentOS，Ubuntu和SLES的最新版本，或者推荐用于Linux发行版的daemon.json文件。 不要使用systemd。</p><blockquote><p>systemd vs daemon.json<br>Configuring Docker to listen for connections using both the systemd unit file and the daemon.json file causes a conflict that prevents Docker from starting.</p></blockquote><p>同时使用systemd和daemon.json会使docker启动冲突。</p><ul><li>既然官方推荐修改daemon.json开启远程访问，就听他的。</li></ul><blockquote><p>1.Set the hosts array in the /etc/docker/daemon.json to connect to the UNIX socket and an IP address, as follows:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"hosts"</span>: [<span class="string">"unix:///var/run/docker.sock"</span>, <span class="string">"tcp:/127.0.0.1:2375"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>2.Restart Docker.<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="keyword"> system</span>ctl daemon-reload</span><br><span class="line">sudo<span class="keyword"> system</span>ctl restart docker</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>3.Check to see whether the change was honored by reviewing the output of netstat to confirm dockerd is listening on the configured port.<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo netstat -lntp | grep dockerd</span><br><span class="line">tcp        <span class="number">0</span>      <span class="number">0</span> <span class="number">127.0</span><span class="meta">.0</span><span class="meta">.1</span>:<span class="number">2375</span>          <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:*               LISTEN      <span class="number">3758</span>/dockerd</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>这里使用systemctl启动会失败，后面详细研究下启动方式。</li></ul><h3 id="内核兼容性检查"><a href="#内核兼容性检查" class="headerlink" title="内核兼容性检查"></a>内核兼容性检查</h3><blockquote><p>Docker cannot run correctly if your kernel is older than version 3.10 or if it is missing some modules. To check kernel compatibility, you can download and run the check-config.sh script.<br>The script only works on Linux, not macOS.</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>curl <span class="symbol">https:</span>/<span class="regexp">/raw.githubusercontent.com/docker</span><span class="regexp">/docker/master</span><span class="regexp">/contrib/check</span>-config.sh &gt; check-config.sh</span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>bash ./check-config.sh</span><br></pre></td></tr></table></figure><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><blockquote><p>To upgrade Docker CE, follow the installation instructions, choosing the new version you want to install.</p></blockquote><p>使用指定版本安装即可更新。</p><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><blockquote><p>Uninstall the Docker package:<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum <span class="builtin-name">remove</span> docker-ce</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Images, containers, volumes, or customized configuration files on your host are not automatically removed. To delete all images, containers, and volumes:<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo rm -rf /var/<span class="class"><span class="keyword">lib</span>/<span class="title">docker</span></span></span><br></pre></td></tr></table></figure></p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">官方文档</a></p></li><li><p>《每天5分钟玩转Docker容器技术》</p></li></ul><ul><li>《每天5分钟玩转Kubernetes》</li></ul><ul><li>《基于Kubernetes的容器云平台实战》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="docker" scheme="http://tech.nitaoge.com/categories/docker/"/>
    
    
      <category term="看破Docker" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Docker/"/>
    
  </entry>
  
  <entry>
    <title>看破Redis 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/906310c9/"/>
    <id>http://tech.nitaoge.com/p/906310c9/</id>
    <published>2019-03-24T05:31:02.000Z</published>
    <updated>2019-04-15T15:59:23.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司要用Redis做数据库缓存双写，虽然不是我搞，但我不会多没有牌面啊……<br>正所谓不积跬步无以至千里，不会原理下一个坑的就是你。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>我这里装了三个虚拟机，并做了域名映射。</p><blockquote><p>Centos7.6_1810<br>vhost1、vhost2、vhost3<br>每个都是1核2G 40G(系统盘)+60G(数据盘-挂到/disk1)<br>为以后搭集群做准备。</p></blockquote><p><strong><em>不多哔哔，直接在虚拟机上开干，注意每次搞虚拟机前先拍快照。</em></strong></p><h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://redis.io/download" target="_blank" rel="noopener">Redis官网下载地址</a><br>我本次下载最新版为redis-5.0.4.tar.gz</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="把包传到虚拟机"><a href="#把包传到虚拟机" class="headerlink" title="把包传到虚拟机"></a>把包传到虚拟机</h3><p><code>scp redis-5.0.4.tar.gz root@vhost1:/disk1/pack</code></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar xzf redis-5.0.4.tar.gz</code><br><code>cd redis-5.0.4</code></p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><code>make clean &amp;&amp; make</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="备份原配置文件"><a href="#备份原配置文件" class="headerlink" title="备份原配置文件"></a>备份原配置文件</h3><p><code>cp redis.conf redis.conf.bk</code></p><h3 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h3><p><code>vi redis.conf</code><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绑定地址（开外部访问）</span></span><br><span class="line">bind vhost1</span><br><span class="line"><span class="comment"># 解除保护模式</span></span><br><span class="line">protected-mode <span class="literal">no</span></span><br><span class="line"><span class="comment"># 绑定端口</span></span><br><span class="line">port 6379</span><br></pre></td></tr></table></figure></p><h2 id="启动（守护进程）"><a href="#启动（守护进程）" class="headerlink" title="启动（守护进程）"></a>启动（守护进程）</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">src/redis-<span class="keyword">server</span></span><br><span class="line">或指定配置文件位置</span><br><span class="line">nohup src/redis-<span class="keyword">server</span> redis.conf &amp;</span><br></pre></td></tr></table></figure><p><img src="/images/redis/1553409282510.png" alt="启动redis"><br><em>这里可以把服务作为系统服务启动，后面再讲。</em></p><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><p>每个服务启动都是作为一个系统进程并且有进程号(pid)的。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ps</span> -ef | <span class="keyword">grep</span> -v <span class="string">'grep'</span> | <span class="keyword">grep</span> redis</span><br></pre></td></tr></table></figure></p><p><img src="/images/redis/Jietu20190324-143856.png" alt="进程"><br>其中2991就是进程号。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> 2991</span><br></pre></td></tr></table></figure></p><h2 id="命令行客户端连接"><a href="#命令行客户端连接" class="headerlink" title="命令行客户端连接"></a>命令行客户端连接</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src/redis-cli</span><br><span class="line">redis&gt; <span class="builtin-name">set</span> foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; <span class="builtin-name">get</span> foo</span><br><span class="line"><span class="string">"bar"</span></span><br></pre></td></tr></table></figure><h2 id="java连接"><a href="#java连接" class="headerlink" title="java连接"></a>java连接</h2><h3 id="集成jedis"><a href="#集成jedis" class="headerlink" title="集成jedis"></a>集成jedis</h3><p>// TODO<br><del>等有时间写个jedis客户端工具</del></p><h3 id="集成spring-boot-starter-data-redis"><a href="#集成spring-boot-starter-data-redis" class="headerlink" title="集成spring-boot-starter-data-redis"></a>集成spring-boot-starter-data-redis</h3><p>引包<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">group:</span> <span class="string">'org.springframework.boot'</span>, <span class="string">name:</span> <span class="string">'spring-boot-starter-data-redis'</span>, <span class="string">version:</span> <span class="string">'2.1.3.RELEASE'</span></span><br></pre></td></tr></table></figure></p><p>加配置<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">redis:</span> <span class="comment"># redis</span></span><br><span class="line"><span class="attr">  host:</span> <span class="string">vhost1</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">  password:</span></span><br><span class="line"><span class="attr">  jedis:</span></span><br><span class="line"><span class="attr">    pool:</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="bullet">-1</span></span><br><span class="line"><span class="attr">      max-idle:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>注入RedisTemplate或StringRedisTemplate直接使用，后续会仔细剖析二者区别<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure></p><p>封装工具可参考<a href="https://github.com/whvcse/RedisUtil" target="_blank" rel="noopener">whvcse/RedisUtil</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>确定你刚装的虚拟机上有gcc，没有就装yum install -y gcc</li></ul><p><img src="/images/redis/1553407100861.png" alt="没装gcc"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="redis" scheme="http://tech.nitaoge.com/categories/redis/"/>
    
    
      <category term="看破Redis" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Redis/"/>
    
  </entry>
  
  <entry>
    <title>看破Apollo 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/21135a2b/"/>
    <id>http://tech.nitaoge.com/p/21135a2b/</id>
    <published>2019-03-24T05:16:24.000Z</published>
    <updated>2019-04-16T02:36:42.029Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="opensource" scheme="http://tech.nitaoge.com/categories/opensource/"/>
    
    
      <category term="Apollo ctrip" scheme="http://tech.nitaoge.com/tags/Apollo-ctrip/"/>
    
      <category term="看破开源组件" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>看破MySQL 2.基本概念</title>
    <link href="http://tech.nitaoge.com/p/da0fe888/"/>
    <id>http://tech.nitaoge.com/p/da0fe888/</id>
    <published>2019-03-22T12:42:13.000Z</published>
    <updated>2019-04-15T15:59:23.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="mysql" scheme="http://tech.nitaoge.com/categories/mysql/"/>
    
    
      <category term="看破MySQL" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4MySQL/"/>
    
  </entry>
  
  <entry>
    <title>看破并发 1.基本概念</title>
    <link href="http://tech.nitaoge.com/p/71b6f09d/"/>
    <id>http://tech.nitaoge.com/p/71b6f09d/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.015Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p># </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="concurrent" scheme="http://tech.nitaoge.com/categories/concurrent/"/>
    
    
      <category term="看破并发" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>看破MacOS 1.快捷键</title>
    <link href="http://tech.nitaoge.com/p/91dc983c/"/>
    <id>http://tech.nitaoge.com/p/91dc983c/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-20T02:59:23.989Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>打开Finder<br>option + command + space<br>跳到指定目录<br>shift + command + g</p><h1 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h1><p><img src="/images/macos/shortcuts.png" alt="快捷键"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="devtool" scheme="http://tech.nitaoge.com/categories/devtool/"/>
    
    
      <category term="看破MacOS" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4MacOS/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 1.核心语法</title>
    <link href="http://tech.nitaoge.com/p/195fb869/"/>
    <id>http://tech.nitaoge.com/p/195fb869/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-21T07:39:35.440Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>重新梳理一下JAVA开发中常用到的核心语法，随遇到随补充……</p><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>将变量和方法封装成一个类，通过实例化的方式赋予其为对象。</p><p>可以看下八大基本数据类型的包装类加深理解：</p><ul><li>怎么包装成类的？</li><li>怎么继承Number实现obj.xxxValue()的？</li><li>怎么实现自动拆箱装箱的？</li></ul><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>子类继承超类允许的属性和方法。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>在类的内部声明类，就是内部类。<br>特性：</p><ul><li>可以通过声明多个内部类，实现多继承。</li><li>内部类可直接访问外部类成员变量和方法，但外部类访问内部类的成员需要实例化内部类。</li><li>提供更好的封装。</li></ul><h2 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h2><p>{<br>}<br>在类中跟构造方法类似，都是在实例化对象时执行。</p><h2 id="实例化内部类"><a href="#实例化内部类" class="headerlink" title="实例化内部类"></a>实例化内部类</h2><p>没什么好说的，直接上代码……<br>拥有内部类的类：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelf</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySelf</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实例化：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySelf mySelf = new MySelf();</span><br><span class="line">MySelf.<span class="builtin-name">Info</span> myInfo = mySelf.new <span class="builtin-name">Info</span>(12);</span><br><span class="line">LogUtils.<span class="builtin-name">info</span>(myInfo.getAge());</span><br></pre></td></tr></table></figure></p><p>为MySelf.Info加上static修饰，实例化：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MySelf.<span class="builtin-name">Info</span> myInfo = new MySelf.<span class="builtin-name">Info</span>(12);</span><br><span class="line">LogUtils.<span class="builtin-name">info</span>(myInfo.getAge());</span><br></pre></td></tr></table></figure></p><h2 id="继承内部类"><a href="#继承内部类" class="headerlink" title="继承内部类"></a>继承内部类</h2><p>需要通过外部类实例引用外部类构造器，才能继承内部类，没这么玩的。太反人类……<br>父类：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelf</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySelf</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Info</span> &#123;</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Info</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子类：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MySon</span> <span class="keyword">extends</span> <span class="title">MySelf</span>.<span class="title">Info</span> </span>&#123;</span><br><span class="line">    public <span class="type">MySon</span>(<span class="type">MySelf</span> mySelf) &#123;</span><br><span class="line">        mySelf.<span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>在实例化前内部继承抽象类并实现抽象方法，或内部实现接口并实现接口所有方法。<br>类似这样：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MySelf son = <span class="keyword">new</span> <span class="type">MySon</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> void <span class="keyword">set</span>(<span class="keyword">String</span> id) &#123;</span><br><span class="line"><span class="built_in">this</span>.setId(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">LogUtils.info(((MySon) son).<span class="keyword">get</span>());</span><br></pre></td></tr></table></figure></p><h2 id="this-和-super"><a href="#this-和-super" class="headerlink" title="this 和 super"></a>this 和 super</h2><p>this指当前对象本身<br>super指当前对象最近超（父）类</p><p>在构造方法中使用super()和this()应该注意：</p><ul><li>super()调用父类的构造方法，this()调用当前类的其它构造方法。</li><li>每个子类构造方法的第一条语句，都隐式调用super()，如果父类没有这种形式的构造函数，会编译报错。</li><li>super()和this()均需放在构造方法内第一行，一个构造方法内只能调用其中一个。</li><li>this()和super()都指向对象，所以不能在static方法，static语句块中使用。</li></ul><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="静态绑定"><a href="#静态绑定" class="headerlink" title="静态绑定"></a>静态绑定</h2><p>在编译阶段就能确定调用哪个方法的方式，叫静态绑定机制。</p><h2 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h2><p>根据实际创建的对象类型来确定方法所在位置，通过动态创建的对象方法表来定位方法的方式，叫动态绑定机制。</p><h1 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h1><h2 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h2><p>Java修饰符中用来控制访问权限的，分为以下四种：</p><ul><li>类内可访问（private）</li><li>包内可访问 (缺省。有人说是default，但在jdk8中default用于修饰接口默认方法，写在代码里尝试过确实不是)</li><li>子类可访问 (protected)</li><li>均可访问 (public)</li></ul><p>以下用表格说明各修饰符区别：</p><table><thead><tr><th style="text-align:left">修饰符</th><th style="text-align:center">当前类</th><th style="text-align:center">包内</th><th style="text-align:center">子孙类（包内）</th><th style="text-align:center">子孙类（不同包）</th><th style="text-align:center">其他包</th></tr></thead><tbody><tr><td style="text-align:left">public</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td></tr><tr><td style="text-align:left">protected</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y/N</td><td style="text-align:center">N</td></tr><tr><td style="text-align:left">缺省</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">N</td><td style="text-align:center">N</td></tr><tr><td style="text-align:left">private</td><td style="text-align:center">Y</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">N</td></tr></tbody></table><blockquote><p>这里要特别说明protected作用，也就是上面那个Y/N：</p><ul><li>允许同一包内的类任意调用。</li><li>不在同一包内的类，只允许子孙类调用，不在家谱上的类不能调用</li></ul></blockquote><p>默认缺省值：</p><ul><li>类中的变量和方法都是<code>public</code>，构造函数为<code>缺省</code>。</li><li>接口中的变量为<code>public static final</code>，方法为<code>public</code>。</li></ul><p>访问控制的继承：</p><ul><li>父类声明为public的变量和方法，子类也必须声明为public。</li><li>父类声明为protected的变量和方法，子类可以声明为protected或public。</li><li>父类声明为private的方法，不能被继承。</li></ul><h2 id="非访问控制修饰符"><a href="#非访问控制修饰符" class="headerlink" title="非访问控制修饰符"></a>非访问控制修饰符</h2><h3 id="静态修饰符static"><a href="#静态修饰符static" class="headerlink" title="静态修饰符static"></a>静态修饰符static</h3><p>用于修饰静态方法和静态变量。</p><ul><li>一个类无论实例化了多少个对象，类的静态变量和静态方法都指向一块固定的内存区，修改任意实例中的静态变量都为最终修改值。</li><li>静态方法中只能使用静态变量。</li><li>二者可以通过Class.member，Class.method()的方式直接调用。</li><li>可以修饰静态内部类</li></ul><h3 id="static-代码块"><a href="#static-代码块" class="headerlink" title="static{} 代码块"></a>static{} 代码块</h3><p>在JVM的生命周期中只被加载一次，是伴随类加载执行的。<br>不管怎么实例化这个类，都只执行一次。</p><h3 id="最终修饰符final"><a href="#最终修饰符final" class="headerlink" title="最终修饰符final"></a>最终修饰符final</h3><p>修饰常量、修饰不可继承类，修饰可继承但不能重写的方法。</p><h3 id="抽象类修饰符abstract"><a href="#抽象类修饰符abstract" class="headerlink" title="抽象类修饰符abstract"></a>抽象类修饰符abstract</h3><p>抽象类不能被final修饰，可以包含抽象方法和非抽象方法。<br>抽象方法不能被final和static修饰，不能有方法体，继承抽象类的子类必须实现父类的所有抽象方法，除非子类也是抽象类。</p><p>注意：抽象类是不能被实例化的！！！<br>除非你使用匿名内部类的方式实现它的抽象方法，然后实例化这个匿名内部类，比如：<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MySelf son = <span class="keyword">new</span> <span class="type">MySon</span>() &#123;</span><br><span class="line"><span class="keyword">public</span> void <span class="keyword">set</span>(<span class="keyword">String</span> id) &#123;</span><br><span class="line"><span class="built_in">this</span>.setId(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">LogUtils.info(((MySon) son).<span class="keyword">get</span>());</span><br></pre></td></tr></table></figure></p><p>但是！这么写属于<em><strong><em>反人类</em></strong></em>设计模式，不推荐这样写。</p><h3 id="接口默认实现方法default-jdk8"><a href="#接口默认实现方法default-jdk8" class="headerlink" title="接口默认实现方法default (jdk8)"></a>接口默认实现方法default (jdk8)</h3><p>在interface中实现默认方法需要加default修饰，必须为public公有<br>这和抽象类中可以有protected抽象方法和private成员变量有区别</p><h3 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h3><p>实现了Serilizable接口的POJO，在不需要对类中某个成员变量进行序列化时，可以使用transient修饰该成员变量。反序列化时该成员变量无法获得访问，值为null。</p><blockquote><p>在实际开发过程中，有些属性需要序列化，有些不需要，比如一些敏感信息（如身份证，密码，银行卡号等）不希望在网络操作（主要涉及到序列化操作，本地序列化缓存也适用）中被传输，这些信息对应的变量就可以加上transient关键字。换句话说，这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化。</p></blockquote><ul><li>只能修饰成员变量，类、方法、本地变量均不能修饰。</li><li>静态变量不能被序列化。</li></ul><h3 id="synchronized和volatile"><a href="#synchronized和volatile" class="headerlink" title="synchronized和volatile"></a>synchronized和volatile</h3><p>synchronized修饰多线程中的同步锁<br>volatile修饰多线程中的共享变量</p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><p><img src="https://user-gold-cdn.xitu.io/2018/8/10/165242e52c2beee2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="异常继承关系"></p><ul><li>Error</li></ul><p>Error一般表示编译时或者系统错误，例如：虚拟机相关的错误，系统崩溃（例如：OutOfMemoryError）等。这种错误无法恢复或不可捕获,将导致应用程序中断,通常应用程序无法处理这些错误,因此也不应该试图用catch来进行捕获。</p><ul><li>Exception</li></ul><p>Exception分为<strong>受检查异常</strong>和<strong>运行时异常</strong>（不受检查异常）。</p><p>编译器在编译时，对于<strong>受检查异常</strong>必须进行try…catch或throws处理,否则无法通过编译。常见的受检查异常包括：IO操作、ClassNotFoundException、线程操作等。</p><p>RuntimeException及其子类都统称为<strong>非受检查异常</strong>，例如：NullPointExecrption、NumberFormatException（字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等。</p><h2 id="try-with-resources-jdk7"><a href="#try-with-resources-jdk7" class="headerlink" title="try-with-resources(jdk7)"></a>try-with-resources(jdk7)</h2><p>在try()括号中打开的资源会在语句执行结束时关闭。<br><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">FileReader</span>(path));</span><br><span class="line">    BufferedWriter bw = <span class="keyword">new</span> <span class="type">BufferedWriter</span>(<span class="keyword">new</span> <span class="type">FileWriter</span>(path));</span><br><span class="line">)&#123;</span><br><span class="line">&#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try catch finally"></a>try catch finally</h2><p>首先看这段代码<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ++x;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ++x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果是2而不是3，finally到底执行了吗？<br>经打断点运行确认，finally执行后x为3，又执行到return，返回结果为2。</p><p>查阅<a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/finally.html" target="_blank" rel="noopener">官方finally语句说明</a>，对这个特殊情况有说明：</p><blockquote><p>The finally block always executes when the try block exits. This ensures that the finally block is executed even if an unexpected exception occurs. But finally is useful for more than just exception handling — it allows the programmer to avoid having cleanup code accidentally bypassed by a return, continue, or break. Putting cleanup code in a finally block is always a good practice, even when no exceptions are anticipated.</p></blockquote><blockquote><blockquote><p>Note: If the JVM exits while the try or catch code is being executed, then the finally block may not execute. Likewise, if the thread executing the try or catch code is interrupted or killed, the finally block may not execute even though the application as a whole continues.</p></blockquote></blockquote><p>翻译：</p><blockquote><p>当try语句退出时肯定会执行finally语句。这确保了即使发了一个意想不到的异常也会执行finally语句块。但是finally的用处不仅是用来处理异常——它可以让程序员不会因为return、continue、或者break语句而忽略了清理代码。把清理代码放在finally语句块里是一个很好的做法，即便可能不会有异常发生也要这样做。</p><blockquote><p>注意，当try或者catch的代码在运行的时候，JVM退出了。那么finally语句块就不会执行。同样，如果线程在运行try或者catch的代码时被中断了或者被杀死了(killed)，那么finally语句可能也不会执行了，即使整个运用还会继续执行。</p></blockquote></blockquote><p>这说明只要进程(jvm)不死,线程(thread)不被中断，finally就必须执行。</p><ul><li>那么为什么返回结果为2呢？</li></ul><p>查阅<a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10.2.5" target="_blank" rel="noopener">官方jvm文档</a>，</p><blockquote><p>If the try clause executes a return, the compiled code does the following:</p><blockquote><p>1.Saves the return value (if any) in a local variable.<br>2.Executes a jsr to the code for the finally clause.<br>3.Upon return from the finally clause, returns the value saved in the local variable.</p></blockquote></blockquote><p>翻译：</p><blockquote><p>如果try语句里有return，那么代码的行为如下：</p><blockquote><p>1.如果有返回值，就把返回值保存到局部变量中<br>2.执行jsr指令跳到finally语句里执行<br>3.执行完finally语句后，返回之前保存在局部变量表里的值</p></blockquote></blockquote><p>根据上面的说明就可以明白为什么是2了。<br>当执行到return ++x;时，jvm在执行完++x后会在局部变量表里另外分配一个空间来保存当前x的值。<br>注意，现在还没把值返回，而是继续执行finally语句里的语句。等执行完后再把之前保存的值（是2不是x）返回。<br>所以就有了返回结果是2不是3的情况。</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p>类型参数化，可以看下集合的实现。</p><p>未知泛型参数方法需要在返回值类型前声明泛型。</p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>修饰构造器、成员变量类型、成员方法、方法参数等，用于反射拿值逻辑处理。</p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ul><li>@Target （作用域）</li></ul><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></span><br><span class="line"><span class="built_in">   TYPE,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Field declaration (includes enum constants) */</span></span><br><span class="line"><span class="built_in">   FIELD,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Method declaration */</span></span><br><span class="line"><span class="built_in">   METHOD,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Formal parameter declaration */</span></span><br><span class="line"><span class="built_in">   PARAMETER,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Constructor declaration */</span></span><br><span class="line"><span class="built_in">   CONSTRUCTOR,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Local variable declaration */</span></span><br><span class="line"><span class="built_in">   LOCAL_VARIABLE,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Annotation type declaration */</span></span><br><span class="line"><span class="built_in">   ANNOTATION_TYPE,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Package declaration */</span></span><br><span class="line"><span class="built_in">   PACKAGE,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Type parameter declaration</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @since 1.8</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="built_in">   TYPE_PARAMETER,</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Use of a type</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @since 1.8</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   TYPE_USE</span><br></pre></td></tr></table></figure><ul><li>@Retention （保留策略）</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * Annotations are <span class="keyword">to</span> be discarded <span class="keyword">by</span> <span class="keyword">the</span> compiler.</span><br><span class="line">    */</span><br><span class="line">   SOURCE,</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * Annotations are <span class="keyword">to</span> be recorded <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">class</span> <span class="built_in">file</span> <span class="keyword">by</span> <span class="keyword">the</span> compiler</span><br><span class="line">    * <span class="keyword">but</span> need <span class="keyword">not</span> be retained <span class="keyword">by</span> <span class="keyword">the</span> VM <span class="keyword">at</span> <span class="built_in">run</span> <span class="built_in">time</span>.  This <span class="keyword">is</span> <span class="keyword">the</span> default</span><br><span class="line">    * behavior.</span><br><span class="line">    */</span><br><span class="line">   CLASS,</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * Annotations are <span class="keyword">to</span> be recorded <span class="keyword">in</span> <span class="keyword">the</span> <span class="built_in">class</span> <span class="built_in">file</span> <span class="keyword">by</span> <span class="keyword">the</span> compiler <span class="keyword">and</span></span><br><span class="line">    * retained <span class="keyword">by</span> <span class="keyword">the</span> VM <span class="keyword">at</span> <span class="built_in">run</span> <span class="built_in">time</span>, so they may be <span class="built_in">read</span> reflectively.</span><br><span class="line">    *</span><br><span class="line">    * @see java.lang.reflect.AnnotatedElement</span><br><span class="line">    */</span><br><span class="line">   RUNTIME</span><br></pre></td></tr></table></figure><p>比如Lombok的所有注解都是保留在源码阶段的，</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line">public <span class="variable">@interface</span> Data &#123;</span><br></pre></td></tr></table></figure><ul><li>@Repeatable （重复注解）</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Indicates the &lt;em&gt;containing <span class="keyword">annotation</span> <span class="title">type</span>&lt;/<span class="title">em</span>&gt; <span class="title">for</span> <span class="title">the</span></span><br><span class="line"> * repeatable <span class="keyword">annotation</span> <span class="title">type</span>.</span><br><span class="line"> * @<span class="keyword">return</span> the containing <span class="keyword">annotation</span> <span class="title">type</span></span><br><span class="line"> *<span class="regexp">/</span></span><br><span class="line"><span class="regexp">Class&lt;? extends Annotation&gt; value();</span></span><br></pre></td></tr></table></figure><h2 id="重复注解-jdk8"><a href="#重复注解-jdk8" class="headerlink" title="重复注解(jdk8)"></a>重复注解(jdk8)</h2><p>注解容器：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">public <span class="variable">@interface</span> MyAnnotations &#123;</span><br><span class="line">    <span class="selector-tag">MyAnnotation</span><span class="selector-attr">[]</span> <span class="selector-tag">value</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Target</span>(&#123;<span class="selector-tag">ElementType</span><span class="selector-class">.CONSTRUCTOR</span>, <span class="selector-tag">ElementType</span><span class="selector-class">.METHOD</span>, <span class="selector-tag">ElementType</span><span class="selector-class">.PARAMETER</span>, <span class="selector-tag">ElementType</span><span class="selector-class">.FIELD</span>, <span class="selector-tag">ElementType</span><span class="selector-class">.ANNOTATION_TYPE</span>&#125;)</span><br><span class="line">@<span class="keyword">Retention</span>(<span class="keyword">RetentionPolicy</span>.<span class="keyword">RUNTIME</span>)</span><br><span class="line">@<span class="keyword">Repeatable</span>(<span class="keyword">MyAnnotations</span>.<span class="keyword">class</span>)</span><br><span class="line"><span class="keyword">public</span> @interface MyAnnotation &#123;</span><br><span class="line">    <span class="selector-tag">String</span> <span class="selector-tag">value</span>() <span class="selector-tag">default</span> "<span class="selector-tag">aaa</span>";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@MyAnnotation</span>(<span class="string">"bbb"</span>)</span><br><span class="line">   <span class="variable">@MyAnnotation</span>(<span class="string">"ccc"</span>)</span><br><span class="line">   public void callback() &#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="提取注解属性"><a href="#提取注解属性" class="headerlink" title="提取注解属性"></a>提取注解属性</h2><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;AnnotationTest&gt; clazz = AnnotationTest.class;</span><br><span class="line">   Method m1 = clazz.getMethod(<span class="string">"callback"</span>);</span><br><span class="line">   MyAnnotation[] ans = m1.getAnnotationsByType(MyAnnotation.class);</span><br><span class="line">   Arrays.asList<span class="function"><span class="params">(ans)</span>.<span class="title">forEach</span><span class="params">((a) -&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      System.out.println(a.value());</span></span></span><br><span class="line"><span class="function"><span class="params">   &#125;)</span>;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bbb</span></span><br><span class="line"><span class="keyword">ccc</span></span><br></pre></td></tr></table></figure><h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><h2 id="强引用（StrongReference）"><a href="#强引用（StrongReference）" class="headerlink" title="强引用（StrongReference）"></a>强引用（StrongReference）</h2><p>如果一个对象具有强引用，那垃圾回收器绝不会回收它。<br>当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，<br>也不会靠随意回收具有强引用的对象来解决内存不足的问题。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">String</span>[] arr = <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</span><br></pre></td></tr></table></figure><h2 id="软引用（SoftReference）"><a href="#软引用（SoftReference）" class="headerlink" title="软引用（SoftReference）"></a>软引用（SoftReference）</h2><p>如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；<br>如果内存空间不足了，就会回收这些对象的内存。<br>只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。</p><p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;<span class="keyword">String</span>[]&gt; referenceQueue = <span class="keyword">new</span> <span class="type">ReferenceQueue</span>&lt;<span class="keyword">String</span>[]&gt;();</span><br><span class="line">SoftReference&lt;<span class="keyword">String</span>[]&gt; softBean = <span class="keyword">new</span> <span class="type">SoftReference</span>&lt;<span class="keyword">String</span>[]&gt;(<span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;, referenceQueue);</span><br></pre></td></tr></table></figure><h2 id="弱引用（WeakReference）"><a href="#弱引用（WeakReference）" class="headerlink" title="弱引用（WeakReference）"></a>弱引用（WeakReference）</h2><p>在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，<br>不管当前内存空间足够与否，都会回收它的内存。<br>不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p><p>弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;<span class="keyword">String</span>[]&gt; referenceQueue = <span class="keyword">new</span> <span class="type">ReferenceQueue</span>&lt;<span class="keyword">String</span>[]&gt;();</span><br><span class="line">WeakReference&lt;<span class="keyword">String</span>[]&gt; softBean = <span class="keyword">new</span> <span class="type">WeakReference</span>&lt;<span class="keyword">String</span>[]&gt;(<span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;, referenceQueue);</span><br></pre></td></tr></table></figure><h2 id="虚引用（PhantomReference）"><a href="#虚引用（PhantomReference）" class="headerlink" title="虚引用（PhantomReference）"></a>虚引用（PhantomReference）</h2><p>与其他几种引用都不同，虚引用并不会决定对象的生命周期。<br>如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。<br>虚引用主要用来跟踪对象被垃圾回收器回收的活动。</p><p>虚引用必须和引用队列 （ReferenceQueue）联合使用，当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReferenceQueue&lt;<span class="keyword">String</span>[]&gt; referenceQueue = <span class="keyword">new</span> <span class="type">ReferenceQueue</span>&lt;<span class="keyword">String</span>[]&gt;();</span><br><span class="line">PhantomReference&lt;<span class="keyword">String</span>[]&gt; referent = <span class="keyword">new</span> <span class="type">PhantomReference</span>&lt;<span class="keyword">String</span>&gt;(<span class="keyword">new</span> <span class="type">String</span>[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;, referenceQueue);</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><p>《Java核心技术卷I基础知识》</p></li><li><p>《Java核心技术卷II高级特性》</p></li><li><p>《Effective Java中文版》</p></li><li><p>《Java编程思想》</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 4.集合</title>
    <link href="http://tech.nitaoge.com/p/ff55f559/"/>
    <id>http://tech.nitaoge.com/p/ff55f559/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.587Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>下面对jdk8的集合做一次深入，<br>所有传统集合都在rt.jar的java.util包中，<br>1.5后开发的并发集合都在java.util.concurrent包中。</p><h1 id="java-util-Collection"><a href="#java-util-Collection" class="headerlink" title="java.util.Collection"></a>java.util.Collection</h1><p>Collection接口继承Iterable接口，用于继承迭代遍历集合元素的方法。</p><p>List、Set、Queue这三个接口都继承自Collection接口、用于规范所有集合的共性方法。<br>AbstractCollection抽象集合类又实现了Collection的部分方法，<br>AbstractList、AbstractSet、AbstractQueue这三个抽象类也都继承了AbstractCollection。</p><h2 id="List-列表"><a href="#List-列表" class="headerlink" title="List 列表"></a>List 列表</h2><p>列表接口，提供一些方法标准，诸如add()、addAll()、get()、remove()、clear()等，供其子类具体实现。</p><p>这里还要提到AbstractList和AbstractSequentialList这两个抽象类，AbstractSequentialList继承自AbstractList，<br>这两个类的作用，其实就是在实现List接口的基础上，又增加了一层抽象，添加和实现了一些个性化方法。</p><p>AbstractList支持随机访问，而AbstractSequentialList只支持迭代访问。<br>这也是ArrayList和LinkedList，线性表和链表的区别之一。</p><h3 id="ArrayList-线性表"><a href="#ArrayList-线性表" class="headerlink" title="ArrayList 线性表"></a>ArrayList 线性表</h3><p>基于数组实现，继承AbstractList类，默认长度是10。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ArrayList&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractList&lt;E&gt;</span></span></span><br><span class="line"><span class="class">        <span class="title">implements</span> <span class="title">List&lt;E&gt;</span>, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">/**</span></span></span><br><span class="line"><span class="class">     <span class="title">*</span> <span class="title">Default</span> <span class="title">initial</span> <span class="title">capacity</span>.</span></span><br><span class="line"><span class="class">     <span class="title">*/</span></span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">static</span> <span class="title">final</span> <span class="title">int</span> <span class="title">DEFAULT_CAPACITY</span> </span>= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">transient <span class="type">Object</span>[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line">    <span class="keyword">private</span> int size;</span><br></pre></td></tr></table></figure></p><p>每次固定扩容size+1 + (size+1) &gt;&gt; 1这个数量长度。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">       elementData[size++] = e;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">           grow(minCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>方法内没有同步锁修饰，所以非线程安全。</p><p>它的增删操作是按照线性表的规则，如果增删都在末尾，则直接操作；否则需要元素移位，所以增删效率很低。<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> void add(<span class="built_in">int</span> <span class="built_in">index</span>, E element) &#123;</span><br><span class="line">       rangeCheckForAdd(<span class="built_in">index</span>);</span><br><span class="line"></span><br><span class="line">       ensureCapacityInternal(<span class="built_in">size</span> + <span class="number">1</span>);  // Increments modCount<span class="comment">!!</span></span><br><span class="line">       System.arraycopy(elementData, <span class="built_in">index</span>, elementData, <span class="built_in">index</span> + <span class="number">1</span>,</span><br><span class="line">                        <span class="built_in">size</span> - <span class="built_in">index</span>);</span><br><span class="line">       elementData[<span class="built_in">index</span>] = element;</span><br><span class="line">       <span class="built_in">size</span>++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> E remove(<span class="built_in">int</span> <span class="built_in">index</span>) &#123;</span><br><span class="line">       rangeCheck(<span class="built_in">index</span>);</span><br><span class="line"></span><br><span class="line">       modCount++;</span><br><span class="line">       E oldValue = elementData(<span class="built_in">index</span>);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">int</span> numMoved = <span class="built_in">size</span> - <span class="built_in">index</span> - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">           System.arraycopy(elementData, <span class="built_in">index</span>+<span class="number">1</span>, elementData, <span class="built_in">index</span>,</span><br><span class="line">                            numMoved);</span><br><span class="line">       elementData[--<span class="built_in">size</span>] = null; // clear to let GC <span class="keyword">do</span> its work</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> oldValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>但获取、设置元素是根据索引直接定位的，所以效率高。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E get(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">     rangeCheck(<span class="keyword">index</span>);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> elementData(<span class="keyword">index</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> E elementData(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> (E) elementData[<span class="keyword">index</span>];</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="LinkedList-双链表"><a href="#LinkedList-双链表" class="headerlink" title="LinkedList 双链表"></a>LinkedList 双链表</h3><p>继承AbstractSequentialList类，实现了List和Deque，说明也可以充当栈和队列。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">   <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">   <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure></p><p>节点属性<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private static class <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; next;</span><br><span class="line">    <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Node</span><span class="title">(Node</span><span class="tag">&lt;E&gt;</span> prev, E element, <span class="keyword">Node</span><span class="title">&lt;E</span>&gt; next) &#123;</span><br><span class="line">        this.item = element;</span><br><span class="line">        this.next = next;</span><br><span class="line">        this.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法内没有同步锁修饰，所以非线程安全。</p><p>它的增删操作是按照链表的规则，修改前后节点的索引即可，所以效率高。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">boolean</span> add(E e) &#123;</span><br><span class="line">       linkLast(e);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">void</span> linkLast(E e) &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">       last = newNode;</span><br><span class="line">       <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">           first = newNode;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           l.<span class="keyword">next</span> = newNode;</span><br><span class="line">       <span class="keyword">size</span>++;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> add(<span class="keyword">int</span> index, E element) &#123;</span><br><span class="line">       checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (index == <span class="keyword">size</span>)</span><br><span class="line">           linkLast(element);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           linkBefore(element, node(index));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">void</span> linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class="line">       <span class="comment">// assert succ != null;</span></span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">       succ.prev = newNode;</span><br><span class="line">       <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">           first = newNode;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           pred.<span class="keyword">next</span> = newNode;</span><br><span class="line">       <span class="keyword">size</span>++;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> remove(Object o) &#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.<span class="keyword">next</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.<span class="keyword">next</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">public</span> E remove(<span class="keyword">int</span> index) &#123;</span><br><span class="line">       checkElementIndex(index);</span><br><span class="line">       <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">   &#125;</span><br><span class="line">   E unlink(Node&lt;E&gt; x) &#123;</span><br><span class="line">       <span class="comment">// assert x != null;</span></span><br><span class="line">       <span class="keyword">final</span> E element = x.item;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; <span class="keyword">next</span> = x.<span class="keyword">next</span>;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">           first = <span class="keyword">next</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           prev.<span class="keyword">next</span> = <span class="keyword">next</span>;</span><br><span class="line">           x.prev = <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">next</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">           last = prev;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">next</span>.prev = prev;</span><br><span class="line">           x.<span class="keyword">next</span> = <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       x.item = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">size</span>--;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">return</span> element;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>但获取、设置元素是需要遍历定位的，所以效率低。<br><figure class="highlight irpf90"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E get(<span class="built_in">int</span> <span class="built_in">index</span>) &#123;</span><br><span class="line">    checkElementIndex(<span class="built_in">index</span>);</span><br><span class="line">    <span class="keyword">return</span> node(<span class="built_in">index</span>).item;</span><br><span class="line">&#125;</span><br><span class="line">Node&lt;E&gt; node(<span class="built_in">int</span> <span class="built_in">index</span>) &#123;</span><br><span class="line">    // <span class="keyword">assert</span> isElementIndex(<span class="built_in">index</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">index</span> &lt; (<span class="built_in">size</span> &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">index</span>; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        for (<span class="built_in">int</span> i = <span class="built_in">size</span> - <span class="number">1</span>; i &gt; <span class="built_in">index</span>; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Vector-向量"><a href="#Vector-向量" class="headerlink" title="Vector 向量"></a>Vector 向量</h3><p>基于数组实现，继承AbstractList类，默认长度是10。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;E&gt;</span></span><br><span class="line"><span class="class">   <span class="title">extends</span> <span class="title">AbstractList</span>&lt;E&gt;</span></span><br><span class="line"><span class="class">   <span class="title">implements</span> <span class="title">List</span>&lt;E&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">protected</span> <span class="title">Object</span>[] <span class="title">elementData</span>;</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> elementCount;</span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所有方法都带同步锁修饰，所以是线程安全的，但效率极低……<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">synchronized </span><span class="keyword">boolean </span><span class="keyword">add(E </span>e) &#123;</span><br><span class="line">     modCount++<span class="comment">;</span></span><br><span class="line">     ensureCapacityHelper(elementCount + <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">     elementData[elementCount++] = e<span class="comment">;</span></span><br><span class="line">     return true<span class="comment">;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>默认每次扩容1倍，如果在初始化时指定capacityIncrement，则每次扩容capacityIncrement，最大长度为Integer.MAX_VALUE，超长报OutOfMemoryError错误。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> synchronized <span class="keyword">boolean</span> add(E e) &#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">       elementData[elementCount++] = e;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> grow(<span class="keyword">int</span> minCapacity) &#123;</span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                        capacityIncrement : oldCapacity);</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> hugeCapacity(<span class="keyword">int</span> minCapacity) &#123;</span><br><span class="line">       <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">       <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">           Integer.MAX_VALUE :</span><br><span class="line">           MAX_ARRAY_SIZE;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">public</span> synchronized <span class="keyword">void</span> removeElementAt(<span class="keyword">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">index</span> &gt;= elementCount) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="keyword">index</span> + <span class="string">" &gt;= "</span> +</span><br><span class="line">                                                    elementCount);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">index</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(<span class="keyword">index</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> j = elementCount - <span class="keyword">index</span> - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           System.arraycopy(elementData, <span class="keyword">index</span> + <span class="number">1</span>, elementData, <span class="keyword">index</span>, j);</span><br><span class="line">       &#125;</span><br><span class="line">       elementCount--;</span><br><span class="line">       elementData[elementCount] = <span class="keyword">null</span>; <span class="comment">/* to let gc do its work */</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="Stack-栈"><a href="#Stack-栈" class="headerlink" title="Stack 栈"></a>Stack 栈</h4><p>是一个栈（后进先出）数据结构的实现，入栈出栈，继承Vector向量。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Stack&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">Vector&lt;E&gt;</span> </span>&#123;</span><br></pre></td></tr></table></figure></p><p>也是基于Vector向量的数组实现，也是线程安全、效率低。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="function">E <span class="title">push</span><span class="params">(E item)</span> </span>&#123;</span><br><span class="line">       addElement(item);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> item;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function"><span class="keyword">void</span> <span class="title">addElement</span><span class="params">(E obj)</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">       elementData[elementCount++] = obj;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       E       obj;</span><br><span class="line">       <span class="keyword">int</span>     len = size();</span><br><span class="line"></span><br><span class="line">       obj = peek();</span><br><span class="line">       removeElementAt(len - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> obj;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="function">E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>     len = size();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">       <span class="function"><span class="keyword">return</span> <span class="title">elementAt</span><span class="params">(len - <span class="number">1</span>)</span></span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><ul><li>这个栈的实现已经没人用了，可以通过ArrayDeque双端队列实现栈的需求。</li></ul><h2 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set 集合"></a>Set 集合</h2><p>主要特性为集合中不能存在重复元素（复合类型实例需要重写equals()和hashCode()实现去重），<br>其实现类分为无序集合、排序集合、枚举集合三种。</p><h3 id="HashSet-哈希集合"><a href="#HashSet-哈希集合" class="headerlink" title="HashSet 哈希集合"></a>HashSet 哈希集合</h3><p>基于HashMap实现，继承AbstractSet抽象集合。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;E&gt;</span></span><br><span class="line"><span class="class">   <span class="title">extends</span> <span class="title">AbstractSet</span>&lt;E&gt;</span></span><br><span class="line"><span class="class">   <span class="title">implements</span> <span class="title">Set</span>&lt;E&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">private</span> <span class="title">transient</span> <span class="title">HashMap</span>&lt;E,Object&gt; <span class="title">map</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">   &#125;</span><br><span class="line">   HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, boolean dummy) &#123;</span><br><span class="line">       <span class="built_in">map</span> = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>实际上就是将HashMap中的key作为容器，实现无序集合。所以这里的无序是由HashMap的key自然排序导致的。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">Object</span> PRESENT = <span class="keyword">new</span> <span class="keyword">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">map</span>.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> o) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">map</span>.remove(o)==PRESENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="LinkedHashSet-链式哈希集合"><a href="#LinkedHashSet-链式哈希集合" class="headerlink" title="LinkedHashSet 链式哈希集合"></a>LinkedHashSet 链式哈希集合</h4><p>基于LinkedHashMap实现，继承HashSet类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">   <span class="keyword">extends</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">   <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(<span class="number">16</span>, .<span class="number">75f</span>, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(initialCapacity, .<span class="number">75f</span>, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) &#123;</span><br><span class="line">       map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>增删操作与HashSet相同，对LinkedHashMap的key操作，但它是有序的。</p><h3 id="TreeSet-树集合"><a href="#TreeSet-树集合" class="headerlink" title="TreeSet 树集合"></a>TreeSet 树集合</h3><p>基于TreeMap实现，继承AbstractSet类。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">TreeSet&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractSet&lt;E&gt;</span></span></span><br><span class="line"><span class="class">   <span class="title">implements</span> <span class="title">NavigableSet&lt;E&gt;</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">   <span class="title">public</span> <span class="title">TreeSet</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(<span class="keyword">new</span> <span class="type">TreeMap</span>&lt;<span class="type">E</span>,<span class="type">Object</span>&gt;());</span><br><span class="line">   &#125;</span><br><span class="line">public <span class="type">TreeSet</span>(<span class="type">Comparator</span>&lt;? <span class="keyword">super</span> <span class="type">E</span>&gt; comparator) &#123;</span><br><span class="line">       <span class="keyword">this</span>(<span class="keyword">new</span> <span class="type">TreeMap</span>&lt;&gt;(comparator));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>增删操作与HashSet相同，对TreeMap的key操作，可以指定比较器进行排序控制，默认是自然排序。<br><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; treeSet = <span class="keyword">new</span> TreeSet&lt;&gt;<span class="function"><span class="params">((a, b) -&gt; -a.compareTo(b))</span>;</span></span><br><span class="line"><span class="function"> <span class="title">treeSet</span>.<span class="title">add</span><span class="params">(<span class="string">"b"</span>)</span>;</span></span><br><span class="line"><span class="function"> <span class="title">treeSet</span>.<span class="title">add</span><span class="params">(<span class="string">"a"</span>)</span>;</span></span><br><span class="line"><span class="function"> <span class="title">treeSet</span>.<span class="title">add</span><span class="params">(<span class="string">"d"</span>)</span>;</span></span><br><span class="line"><span class="function"> <span class="title">treeSet</span>.<span class="title">add</span><span class="params">(<span class="string">"c"</span>)</span>;</span></span><br><span class="line"><span class="function"> <span class="title">treeSet</span>.<span class="title">forEach</span><span class="params">(System.out::println)</span>;</span></span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d</span><br><span class="line">c</span><br><span class="line">b</span><br><span class="line">a</span><br></pre></td></tr></table></figure></p><h3 id="EnumSet-枚举集合"><a href="#EnumSet-枚举集合" class="headerlink" title="EnumSet 枚举集合"></a>EnumSet 枚举集合</h3><p>EnumSet是一个枚举抽象类继承AbstractSet类。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumSet&lt;E</span> <span class="keyword">extends</span> <span class="title">Enum&lt;E&gt;&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractSet&lt;E&gt;</span></span></span><br><span class="line"><span class="class">   <span class="title">implements</span> <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure></p><p>分别记录枚举类型和枚举成员。<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The <span class="keyword">class</span> <span class="keyword">of</span> all the elements <span class="keyword">of</span> this <span class="keyword">set</span>.</span><br><span class="line"> */</span><br><span class="line">final <span class="keyword">Class</span>&lt;E&gt; elementType;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * All <span class="keyword">of</span> the values comprising T.  (Cached <span class="keyword">for</span> performance.)</span><br><span class="line"> */</span><br><span class="line">final <span class="keyword">Enum</span>&lt;?&gt;[] universe;</span><br></pre></td></tr></table></figure></p><p>可通过内部提供的静态方法实例化。<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Set</span>&lt;MyEnum&gt; enumSet <span class="comment">= EnumSet.allOf(MyEnum.class)</span>;</span><br></pre></td></tr></table></figure></p><p>当枚举集合长度不大于64时，实例化RegularEnumSet类，否则实例化JumboEnumSet类。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; allOf(<span class="class"><span class="keyword">Class</span>&lt;<span class="title">E</span>&gt; <span class="title">elementType</span>) </span>&#123;</span><br><span class="line">    EnumSet&lt;E&gt; result = noneOf(elementType);</span><br><span class="line">    result.addAll();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; noneOf(<span class="class"><span class="keyword">Class</span>&lt;<span class="title">E</span>&gt; <span class="title">elementType</span>) </span>&#123;</span><br><span class="line">    Enum<span class="meta">&lt;?</span>&gt;[] universe = getUniverse(elementType);</span><br><span class="line">    <span class="keyword">if</span> (universe == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException(elementType + <span class="string">" not an enum"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (universe.length &lt;= <span class="number">64</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RegularEnumSet&lt;&gt;(elementType, universe);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JumboEnumSet&lt;&gt;(elementType, universe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Enum类中ordinal成员变量用于记录枚举常量声明位置，枚举集合的增删操作也是基于这个成员变量进行位运算的。<br><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * The ordinal <span class="keyword">of</span> this enumeration constant (its position</span><br><span class="line">  * in the <span class="class"><span class="keyword">enum</span> <span class="title">declaration</span>, <span class="title">where</span> <span class="title">the</span> <span class="title">initial</span> <span class="title">constant</span> <span class="title">is</span> <span class="title">assigned</span></span></span><br><span class="line">  * an ordinal <span class="keyword">of</span> zero).</span><br><span class="line">  *</span><br><span class="line">  * Most programmers will have no use <span class="keyword">for</span> this field.  It is designed</span><br><span class="line">  * <span class="keyword">for</span> use by sophisticated <span class="class"><span class="keyword">enum</span>-<span class="title">based</span> <span class="title">data</span> <span class="title">structures</span>, <span class="title">such</span> <span class="title">as</span></span></span><br><span class="line">  * &#123;@link java.util.EnumSet&#125; and &#123;@link java.util.EnumMap&#125;.</span><br><span class="line">  *<span class="regexp">/</span></span><br><span class="line"><span class="regexp"> private final int ordinal;</span></span><br></pre></td></tr></table></figure></p><h4 id="RegularEnumSet-固定尺寸枚举集合"><a href="#RegularEnumSet-固定尺寸枚举集合" class="headerlink" title="RegularEnumSet 固定尺寸枚举集合"></a>RegularEnumSet 固定尺寸枚举集合</h4><p>实例化直接调用EnumSet的构造器，将类型和成员赋给枚举集合实例。<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RegularEnumSet(<span class="class"><span class="keyword">Class</span>&lt;<span class="title">E</span>&gt;<span class="title">elementType</span>, <span class="title">Enum</span>&lt;?&gt;[] <span class="title">universe</span>) &#123;</span></span><br><span class="line">    <span class="built_in">super</span>(elementType, universe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>RegularEnumSet的增删操作是使用long型elements与枚举的ordinal进行位运算。</p><p>add就是将1L左移ordinal位后，与elements进行位或运算，这位变1，从而实现将某类型枚举成员不重复地加到其枚举集合中。</p><p>remove就是将1L左移ordinal位后取反，与elements进行位与运算，这位变0，从而实现将其从枚举集合中删除。</p><p>这也是为什么RegularEnumSet长度必须不大于64，因为long型就64位能给你玩……</p><p>非线程安全。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Bit vector representation of this set.  The 2^k bit indicates the</span></span><br><span class="line"><span class="comment">    * presence of universe[k] in this set.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">long</span> elements = <span class="number">0</span>L;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e) &#123;</span><br><span class="line">       typeCheck(e);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">long</span> oldElements = elements;</span><br><span class="line">       elements |= (<span class="number">1</span>L &lt;&lt; ((Enum&lt;?&gt;)e).ordinal());</span><br><span class="line">       <span class="keyword">return</span> elements != oldElements;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> e) &#123;</span><br><span class="line">       <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       Class&lt;?&gt; eClass = e.getClass();</span><br><span class="line">       <span class="keyword">if</span> (eClass != elementType &amp;&amp; eClass.getSuperclass() != elementType)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">long</span> oldElements = elements;</span><br><span class="line">       elements &amp;= ~(<span class="number">1</span>L &lt;&lt; ((Enum&lt;?&gt;)e).ordinal());</span><br><span class="line">       <span class="keyword">return</span> elements != oldElements;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="JumboEnumSet-大尺寸枚举集合"><a href="#JumboEnumSet-大尺寸枚举集合" class="headerlink" title="JumboEnumSet 大尺寸枚举集合"></a>JumboEnumSet 大尺寸枚举集合</h4><p>实例化直接调用EnumSet的构造器，将类型和成员赋给枚举集合实例，<br>并初始化elements枚举数组，枚举成员个数+63再右移6位相当于除以2^6=64，<br>也就是创建一个包含N个long型的64位的数组给你玩……<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JumboEnumSet(<span class="keyword">Class</span>&lt;E&gt;elementType, Enum&lt;?&gt;[] universe) &#123;</span><br><span class="line">    <span class="keyword">super</span>(elementType, universe);</span><br><span class="line">    elements = <span class="keyword">new</span> <span class="keyword">long</span>[(universe.length + <span class="number">63</span>) &gt;&gt;&gt; <span class="number">6</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>增删操作和RegularEnumSet类似，只不过多个除以64的操作。非线程安全。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Bit vector representation of this set.  The ith bit of the jth</span></span><br><span class="line"><span class="comment">    * element of this array represents the  presence of universe[64*j +i]</span></span><br><span class="line"><span class="comment">    * in this set.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">long</span> elements[];</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Redundant - maintained for performance</span></span><br><span class="line">   <span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">boolean</span> <span class="built_in">add</span>(E e) &#123;</span><br><span class="line">       typeCheck(e);</span><br><span class="line"></span><br><span class="line">       <span class="built_in">int</span> eOrdinal = e.ordinal();</span><br><span class="line">       <span class="built_in">int</span> eWordNum = eOrdinal &gt;&gt;&gt; <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">long</span> oldElements = elements[eWordNum];</span><br><span class="line">       elements[eWordNum] |= (<span class="number">1</span>L &lt;&lt; eOrdinal);</span><br><span class="line">       <span class="built_in">boolean</span> result = (elements[eWordNum] != oldElements);</span><br><span class="line">       <span class="keyword">if</span> (result)</span><br><span class="line">           <span class="built_in">size</span>++;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> remove(<span class="keyword">Object</span> e) &#123;</span><br><span class="line">       <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       Class&lt;?&gt; eClass = e.getClass();</span><br><span class="line">       <span class="keyword">if</span> (eClass != elementType &amp;&amp; eClass.getSuperclass() != elementType)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="built_in">int</span> eOrdinal = ((Enum&lt;?&gt;)e).ordinal();</span><br><span class="line">       <span class="built_in">int</span> eWordNum = eOrdinal &gt;&gt;&gt; <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">long</span> oldElements = elements[eWordNum];</span><br><span class="line">       elements[eWordNum] &amp;= ~(<span class="number">1</span>L &lt;&lt; eOrdinal);</span><br><span class="line">       <span class="built_in">boolean</span> result = (elements[eWordNum] != oldElements);</span><br><span class="line">       <span class="keyword">if</span> (result)</span><br><span class="line">           <span class="built_in">size</span>--;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Queue-队列"><a href="#Queue-队列" class="headerlink" title="Queue 队列"></a>Queue 队列</h2><p>队列的特点就是先进先出，尾进头出。</p><h3 id="PriorityQueue-优先级队列"><a href="#PriorityQueue-优先级队列" class="headerlink" title="PriorityQueue 优先级队列"></a>PriorityQueue 优先级队列</h3><p>这是一个特殊队列。有时间详细分析一下算法// TODO</p><p>基于数组实现，继承AbstractCollection类， 默认长度是11。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">   <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">   <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Object[] queue; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure></p><p>每次扩容，如果队列长度小于64就扩1倍+2，否则扩50%。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = <span class="built_in">queue</span>.length;</span><br><span class="line">    <span class="comment">// Double size if small; else grow by 50%</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + ((oldCapacity &lt; <span class="number">64</span>) ?</span><br><span class="line">                                     (oldCapacity + <span class="number">2</span>) :</span><br><span class="line">                                     (oldCapacity &gt;&gt; <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="built_in">queue</span> = Arrays.copyOf(<span class="built_in">queue</span>, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进出操作，非线程安全。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> boolean <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (e == null)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">int</span> i = size;</span><br><span class="line">       <span class="keyword">if</span> (i &gt;= <span class="built_in">queue</span>.length)</span><br><span class="line">           grow(i + <span class="number">1</span>);</span><br><span class="line">       size = i + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">           <span class="built_in">queue</span>[<span class="number">0</span>] = e;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           siftUp(i, e);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUp</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (comparator != null)</span><br><span class="line">           siftUpUsingComparator(k, x);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           siftUpComparable(k, x);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUpComparable</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">       Comparable&lt;? super E&gt; key = (Comparable&lt;? super E&gt;) x;</span><br><span class="line">       <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">           Object e = <span class="built_in">queue</span>[parent];</span><br><span class="line">           <span class="keyword">if</span> (key.compareTo((E) e) &gt;= <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="built_in">queue</span>[k] = e;</span><br><span class="line">           k = parent;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">queue</span>[k] = key;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUpUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">           Object e = <span class="built_in">queue</span>[parent];</span><br><span class="line">           <span class="keyword">if</span> (comparator.compare(x, (E) e) &gt;= <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="built_in">queue</span>[k] = e;</span><br><span class="line">           k = parent;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">queue</span>[k] = x;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">return</span> null;</span><br><span class="line">       <span class="keyword">int</span> s = --size;</span><br><span class="line">       modCount++;</span><br><span class="line">       E result = (E) <span class="built_in">queue</span>[<span class="number">0</span>];</span><br><span class="line">       E x = (E) <span class="built_in">queue</span>[s];</span><br><span class="line">       <span class="built_in">queue</span>[s] = null;</span><br><span class="line">       <span class="keyword">if</span> (s != <span class="number">0</span>)</span><br><span class="line">           siftDown(<span class="number">0</span>, x);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (comparator != null)</span><br><span class="line">           siftDownUsingComparator(k, x);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           siftDownComparable(k, x);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownComparable</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">       Comparable&lt;? super E&gt; key = (Comparable&lt;? super E&gt;)x;</span><br><span class="line">       <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;        <span class="comment">// loop while a non-leaf</span></span><br><span class="line">       <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">           <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>; <span class="comment">// assume left child is least</span></span><br><span class="line">           Object c = <span class="built_in">queue</span>[child];</span><br><span class="line">           <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">               ((Comparable&lt;? super E&gt;) c).compareTo((E) <span class="built_in">queue</span>[right]) &gt; <span class="number">0</span>)</span><br><span class="line">               c = <span class="built_in">queue</span>[child = right];</span><br><span class="line">           <span class="keyword">if</span> (key.compareTo((E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="built_in">queue</span>[k] = c;</span><br><span class="line">           k = child;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">queue</span>[k] = key;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">           <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">           Object c = <span class="built_in">queue</span>[child];</span><br><span class="line">           <span class="keyword">int</span> right = child + <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">               comparator.compare((E) c, (E) <span class="built_in">queue</span>[right]) &gt; <span class="number">0</span>)</span><br><span class="line">               c = <span class="built_in">queue</span>[child = right];</span><br><span class="line">           <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="built_in">queue</span>[k] = c;</span><br><span class="line">           k = child;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">queue</span>[k] = x;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="Deque-双端队列"><a href="#Deque-双端队列" class="headerlink" title="Deque 双端队列"></a>Deque 双端队列</h3><p>双端队列的特点就是两边都能进，两边都能出，所以就有对应的offerFirst、offerLast、pollFirst、pollLast等操作。</p><h4 id="ArrayDeque-数组双端队列"><a href="#ArrayDeque-数组双端队列" class="headerlink" title="ArrayDeque 数组双端队列"></a>ArrayDeque 数组双端队列</h4><p>基于数组实现，继承AbstractCollection类，实现了Deque接口。默认长度为16。最小长度为8。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ArrayDeque&lt;E&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractCollection&lt;E&gt;</span></span></span><br><span class="line"><span class="class">                          <span class="title">implements</span> <span class="title">Deque&lt;E&gt;</span>, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">   <span class="title">transient</span> <span class="title">Object</span>[] <span class="title">elements</span></span>; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line">   transient int head;</span><br><span class="line"></span><br><span class="line">   transient int tail;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> static <span class="keyword">final</span> int <span class="type">MIN_INITIAL_CAPACITY</span> = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">public <span class="type">ArrayDeque</span>() &#123;</span><br><span class="line">       elements = <span class="keyword">new</span> <span class="type">Object</span>[<span class="number">16</span>];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>头尾进出操作，非线程安全，元素不能为null，每次扩容加1倍。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       elements[head = (head - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)] = e;</span><br><span class="line">       <span class="keyword">if</span> (head == tail)</span><br><span class="line">           doubleCapacity();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       elements[tail] = e;</span><br><span class="line">       <span class="keyword">if</span> ( (tail = (tail + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>)) == head)</span><br><span class="line">           doubleCapacity();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function">E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h = head;</span><br><span class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">       E result = (E) elements[h];</span><br><span class="line">       <span class="comment">// Element is null if deque empty</span></span><br><span class="line">       <span class="keyword">if</span> (result == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       elements[h] = <span class="keyword">null</span>;     <span class="comment">// Must null out slot</span></span><br><span class="line">       head = (h + <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="function">E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> t = (tail - <span class="number">1</span>) &amp; (elements.length - <span class="number">1</span>);</span><br><span class="line">       <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">       E result = (E) elements[t];</span><br><span class="line">       <span class="keyword">if</span> (result == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       elements[t] = <span class="keyword">null</span>;</span><br><span class="line">       tail = t;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">doubleCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">assert</span> head == tail;</span><br><span class="line">       <span class="keyword">int</span> p = head;</span><br><span class="line">       <span class="keyword">int</span> n = elements.length;</span><br><span class="line">       <span class="keyword">int</span> r = n - p; <span class="comment">// number of elements to the right of p</span></span><br><span class="line">       <span class="keyword">int</span> newCapacity = n &lt;&lt; <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (newCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Sorry, deque too big"</span>);</span><br><span class="line">       Object[] a = <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line">       System.arraycopy(elements, p, a, <span class="number">0</span>, r);</span><br><span class="line">       System.arraycopy(elements, <span class="number">0</span>, a, r, p);</span><br><span class="line">       elements = a;</span><br><span class="line">       head = <span class="number">0</span>;</span><br><span class="line">       tail = n;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h1 id="java-util-Map"><a href="#java-util-Map" class="headerlink" title="java.util.Map"></a>java.util.Map</h1><h2 id="HashMap-哈希表"><a href="#HashMap-哈希表" class="headerlink" title="HashMap 哈希表"></a>HashMap 哈希表</h2><p>是基于数组加链表的数据结构，默认长度选16,加载因子选0.75，是为了减少哈希碰撞的几率。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75</span>f;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; &#123;</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br></pre></td></tr></table></figure></p><p>因为索引是通过hash计算的，所以是无序的，而且非线程安全。<br>当发生哈希碰撞时，将元素添加到元素后形成链表，当链表长度大于8并且数组总长度大于64，则将链表改为红黑树。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> V put(K <span class="built_in">key</span>, V value) &#123;</span><br><span class="line">       <span class="keyword">return</span> putVal(hash(<span class="built_in">key</span>), <span class="built_in">key</span>, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">final</span> V putVal(<span class="built_in">int</span> hash, K <span class="built_in">key</span>, V value, <span class="built_in">boolean</span> onlyIfAbsent,</span><br><span class="line">                  <span class="built_in">boolean</span> evict) &#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="built_in">int</span> n, i;</span><br><span class="line">       <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">           n = (tab = resize()).length;</span><br><span class="line">       <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">           tab[i] = newNode(hash, <span class="built_in">key</span>, value, <span class="keyword">null</span>);</span><br><span class="line">       <span class="keyword">else</span> &#123;</span><br><span class="line">           Node&lt;K,V&gt; e; K k;</span><br><span class="line">           <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">               ((k = p.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">               e = p;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">               e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, <span class="built_in">key</span>, value);</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="built_in">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                   <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                       p.next = newNode(hash, <span class="built_in">key</span>, value, <span class="keyword">null</span>);</span><br><span class="line">                       <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                           treeifyBin(tab, hash);</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                       ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">                       <span class="keyword">break</span>;</span><br><span class="line">                   p = e;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">               V oldValue = e.value;</span><br><span class="line">               <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                   e.value = value;</span><br><span class="line">               afterNodeAccess(e);</span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       ++modCount;</span><br><span class="line">       <span class="keyword">if</span> (++<span class="built_in">size</span> &gt; threshold)</span><br><span class="line">           resize();</span><br><span class="line">       afterNodeInsertion(evict);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> V <span class="built_in">get</span>(<span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">       Node&lt;K,V&gt; e;</span><br><span class="line">       <span class="keyword">return</span> (e = getNode(hash(<span class="built_in">key</span>), <span class="built_in">key</span>)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; getNode(<span class="built_in">int</span> hash, <span class="keyword">Object</span> <span class="built_in">key</span>) &#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="built_in">int</span> n; K k;</span><br><span class="line">       <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">           (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">               ((k = first.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">               <span class="keyword">return</span> first;</span><br><span class="line">           <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, <span class="built_in">key</span>);</span><br><span class="line">               do &#123;</span><br><span class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                       ((k = e.<span class="built_in">key</span>) == <span class="built_in">key</span> || (<span class="built_in">key</span> != <span class="keyword">null</span> &amp;&amp; <span class="built_in">key</span>.equals(k))))</span><br><span class="line">                       <span class="keyword">return</span> e;</span><br><span class="line">               &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">       Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">       <span class="built_in">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">       <span class="built_in">int</span> oldThr = threshold;</span><br><span class="line">       <span class="built_in">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">               threshold = Integer.MAX_VALUE;</span><br><span class="line">               <span class="keyword">return</span> oldTab;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">               newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">           newCap = oldThr;</span><br><span class="line">       <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">           newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">           newThr = (<span class="built_in">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="built_in">float</span> ft = (<span class="built_in">float</span>)newCap * loadFactor;</span><br><span class="line">           newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="built_in">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                     (<span class="built_in">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">       &#125;</span><br><span class="line">       threshold = newThr;</span><br><span class="line">       @SuppressWarnings(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">           Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">       table = newTab;</span><br><span class="line">       <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">               Node&lt;K,V&gt; e;</span><br><span class="line">               <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                   <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                       newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                   <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                       ((TreeNode&lt;K,V&gt;)e).<span class="built_in">split</span>(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                   <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                       Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                       Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                       Node&lt;K,V&gt; next;</span><br><span class="line">                       do &#123;</span><br><span class="line">                           next = e.next;</span><br><span class="line">                           <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                               <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                   loHead = e;</span><br><span class="line">                               <span class="keyword">else</span></span><br><span class="line">                                   loTail.next = e;</span><br><span class="line">                               loTail = e;</span><br><span class="line">                           &#125;</span><br><span class="line">                           <span class="keyword">else</span> &#123;</span><br><span class="line">                               <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                   hiHead = e;</span><br><span class="line">                               <span class="keyword">else</span></span><br><span class="line">                                   hiTail.next = e;</span><br><span class="line">                               hiTail = e;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                       <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                           loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                           newTab[j] = loHead;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                           hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                           newTab[j + oldCap] = hiHead;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> newTab;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> treeifyBin(Node&lt;K,V&gt;[] tab, <span class="built_in">int</span> hash) &#123;</span><br><span class="line">       <span class="built_in">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">       <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">           resize();</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">           do &#123;</span><br><span class="line">               TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</span><br><span class="line">               <span class="keyword">if</span> (tl == <span class="keyword">null</span>)</span><br><span class="line">                   hd = p;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                   p.prev = tl;</span><br><span class="line">                   tl.next = p;</span><br><span class="line">               &#125;</span><br><span class="line">               tl = p;</span><br><span class="line">           &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">           <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)</span><br><span class="line">               hd.treeify(tab);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="LinkedHashMap-链式哈希表"><a href="#LinkedHashMap-链式哈希表" class="headerlink" title="LinkedHashMap 链式哈希表"></a>LinkedHashMap 链式哈希表</h3><p>继承HashMap类，是在HashMap基础上实现的双链表数据结构，所以有序，而且非线程安全，但效率与HashMap相比偏低。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap&lt;K</span>,<span class="title">V&gt;</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">HashMap&lt;K</span>,<span class="title">V&gt;</span></span></span><br><span class="line"><span class="class">    <span class="title">implements</span> <span class="title">Map&lt;K</span>,<span class="title">V&gt;</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">static</span> <span class="title">class</span> <span class="title">Entry&lt;K</span>,<span class="title">V&gt;</span> <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node&lt;K</span>,<span class="title">V&gt;</span> </span>&#123;</span><br><span class="line">        <span class="type">Entry</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; before, after;</span><br><span class="line">        <span class="type">Entry</span>(int hash, <span class="type">K</span> key, <span class="type">V</span> value, <span class="type">Node</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; next) &#123;</span><br><span class="line">            <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    transient <span class="type">LinkedHashMap</span>.<span class="type">Entry</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; head;</span><br><span class="line"></span><br><span class="line">    transient <span class="type">LinkedHashMap</span>.<span class="type">Entry</span>&lt;<span class="type">K</span>,<span class="type">V</span>&gt; tail;</span><br></pre></td></tr></table></figure></p><h2 id="TreeMap-红黑树表"><a href="#TreeMap-红黑树表" class="headerlink" title="TreeMap 红黑树表"></a>TreeMap 红黑树表</h2><p>TreeMap能够把它保存的记录根据key排序，默认是自然排序。<br>也可以指定排序的比较器。<br>当用Iteraor遍历TreeMap时，得到的记录是排过序的。TreeMap的键和值都不能为空。</p><h2 id="EnumMap-枚举表"><a href="#EnumMap-枚举表" class="headerlink" title="EnumMap 枚举表"></a>EnumMap 枚举表</h2><p>以Enum为key的Map。不常用不深抠……</p><h2 id="WeakHashMap-弱引用哈希表"><a href="#WeakHashMap-弱引用哈希表" class="headerlink" title="WeakHashMap 弱引用哈希表"></a>WeakHashMap 弱引用哈希表</h2><p>与HashMap的区别是HashMap的key保留了对实际对象的强引用，<br>只要HashMap实例不被销毁，其中的所有value都不会被垃圾回收。<br>而WeakHashMap的key只保留了对实际对象的弱引用，在满足垃圾回收条件下，会被回收删除。</p><h2 id="IdentityHashMap-身份证哈希表"><a href="#IdentityHashMap-身份证哈希表" class="headerlink" title="IdentityHashMap 身份证哈希表"></a>IdentityHashMap 身份证哈希表</h2><p>与HashMap的区别：<br>HashMap中的key只要通过equals和hashCode两个方法就可以判断是否相同，决定保存其中一个还是两个都保存。<br>而IdentityHashMap中的key必须是引用相同。</p><h2 id="Hashtable-哈希表"><a href="#Hashtable-哈希表" class="headerlink" title="Hashtable 哈希表"></a>Hashtable 哈希表</h2><p>看这命名就知道这东西都淘汰多少年了，不想说它了。<br>不过Properties继承了Hashtable。</p><h1 id="fail-fast机制"><a href="#fail-fast机制" class="headerlink" title="fail-fast机制"></a>fail-fast机制</h1><p>集合在增删操作中经常出现 modCount++;或++modCount; 那我很好奇它是什么东西。</p><h2 id="它是什么？"><a href="#它是什么？" class="headerlink" title="它是什么？"></a>它是什么？</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * The <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">times</span> this HashMap has been structurally modified</span><br><span class="line"> * Structural modifications are those <span class="keyword">that</span> change <span class="keyword">the</span> <span class="built_in">number</span> <span class="keyword">of</span> mappings <span class="keyword">in</span></span><br><span class="line"> * <span class="keyword">the</span> HashMap <span class="keyword">or</span> otherwise modify <span class="keyword">its</span> internal structure (e.g.,</span><br><span class="line"> * rehash).  This field <span class="keyword">is</span> used <span class="keyword">to</span> make iterators <span class="keyword">on</span> Collection-views <span class="keyword">of</span></span><br><span class="line"> * <span class="keyword">the</span> HashMap fail-fast.  (See ConcurrentModificationException).</span><br><span class="line"> */</span><br><span class="line">transient int modCount;</span><br></pre></td></tr></table></figure><p>翻译：</p><blockquote><p>是HashMap结构改变的次数。<br>结构改变是指更改哈希表的长度或其他改变内部结构的行为。比如再哈希。<br>这个变量是用于使HashMap的迭代器快速失败。参考ConcurrentModificationException异常。</p></blockquote><p>原来fail-fast是Java集合在并发修改场景中的一种错误检测机制。</p><h2 id="什么时候会出现ConcurrentModificationException异常？"><a href="#什么时候会出现ConcurrentModificationException异常？" class="headerlink" title="什么时候会出现ConcurrentModificationException异常？"></a>什么时候会出现ConcurrentModificationException异常？</h2><p>当多个线程同时操作非线程安全的集合时，线程A可能正在使用Iterator或ForEach遍历集合，线程B可能更改了集合结构，<br>那么原来的mc和++后的modCount就不一致了，这时就会进入<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">forEach</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> K, ? <span class="keyword">super</span> V&gt; action)</span> </span>&#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab;</span><br><span class="line">       <span class="keyword">if</span> (action == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">int</span> mc = modCount;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">               <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</span><br><span class="line">                   action.accept(e.key, e.value);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>抛出ConcurrentModificationException异常。</p><h1 id="java-util-concurrent"><a href="#java-util-concurrent" class="headerlink" title="java.util.concurrent.*"></a>java.util.concurrent.*</h1><p>// TODO</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破数据结构 1.线性表</title>
    <link href="http://tech.nitaoge.com/p/e8093df2/"/>
    <id>http://tech.nitaoge.com/p/e8093df2/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.584Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="datastucture" scheme="http://tech.nitaoge.com/categories/datastucture/"/>
    
    
      <category term="看破数据结构" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>看破Elastic-Job 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/75509985/"/>
    <id>http://tech.nitaoge.com/p/75509985/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.026Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="opensource" scheme="http://tech.nitaoge.com/categories/opensource/"/>
    
    
      <category term="看破开源组件" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E5%BC%80%E6%BA%90%E7%BB%84%E4%BB%B6/"/>
    
      <category term="Elastic-Job" scheme="http://tech.nitaoge.com/tags/Elastic-Job/"/>
    
  </entry>
  
  <entry>
    <title>看破Gradle 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/18a22795/"/>
    <id>http://tech.nitaoge.com/p/18a22795/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.585Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="gradle" scheme="http://tech.nitaoge.com/categories/gradle/"/>
    
    
      <category term="看破Gradle" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Gradle/"/>
    
  </entry>
  
  <entry>
    <title>看破设计模式 2. 创建型模式 - 单例模式(Singleton)</title>
    <link href="http://tech.nitaoge.com/p/c9a4fbc9/"/>
    <id>http://tech.nitaoge.com/p/c9a4fbc9/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-21T07:36:58.889Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>Ensure a class has only one instance, and provide a global point of access to it.</p></blockquote><p>确保某一个类只有一个实例， 而且自行实例化并向整个系统提供这个实例。 </p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>饿汉式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class HungrySingleton &#123;</span><br><span class="line"></span><br><span class="line">    private static final HungrySingleton<span class="built_in"> instance </span>= new HungrySingleton();</span><br><span class="line"></span><br><span class="line">    private HungrySingleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static HungrySingleton instance() &#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>懒汉式（加锁禁止重排序保证线程安全）<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class LazySingleton &#123;</span><br><span class="line"></span><br><span class="line">    private static volatile LazySingleton<span class="built_in"> instance </span>= <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    private LazySingleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static LazySingleton instance() &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            synchronized (LazySingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                   <span class="built_in"> instance </span>= new LazySingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然Effective java推荐枚举式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class EnumSingleton &#123;</span><br><span class="line"></span><br><span class="line">    private EnumSingleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private enum Singleton &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line"></span><br><span class="line">        private final EnumSingleton instance;</span><br><span class="line"></span><br><span class="line">        Singleton() &#123;</span><br><span class="line">           <span class="built_in"> instance </span>= new EnumSingleton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public EnumSingleton getInstance() &#123;</span><br><span class="line">            return instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static EnumSingleton instance() &#123;</span><br><span class="line">        return Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void say() &#123;</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我选择静态内部类式<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NiceSingleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NiceSingleton</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">InstanceHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> final <span class="keyword">static</span> NiceSingleton instance = <span class="keyword">new</span> NiceSingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NiceSingleton <span class="title">instance</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> InstanceHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><ul><li>为什么懒汉式单例要双重校验？</li></ul><blockquote><p>当两个线程同时调用instance()方法时，由于singleton==null，两个线程都可以通过第一个校验，<br>然后线程A持有锁，线程B等待。当线程A执行完实例化、释放锁，线程B进入代码块。</p></blockquote><blockquote><p>如果不加第二个校验，线程B又会实例化一个对象。就会违反单例模式设计原则。</p></blockquote><blockquote><p>如果不加第一个校验，也能实现单例，但多个线程反复竞争锁会增加系统开销，严重影响性能。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="design" scheme="http://tech.nitaoge.com/categories/design/"/>
    
    
      <category term="看破设计模式" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 3.JDK8 Core</title>
    <link href="http://tech.nitaoge.com/p/c46700a5/"/>
    <id>http://tech.nitaoge.com/p/c46700a5/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.586Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 5.IO、Socket</title>
    <link href="http://tech.nitaoge.com/p/6a43eebc/"/>
    <id>http://tech.nitaoge.com/p/6a43eebc/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:36:42.025Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 6.NIO</title>
    <link href="http://tech.nitaoge.com/p/e269c416/"/>
    <id>http://tech.nitaoge.com/p/e269c416/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:40:52.457Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破Java 7.AIO</title>
    <link href="http://tech.nitaoge.com/p/d455aa9b/"/>
    <id>http://tech.nitaoge.com/p/d455aa9b/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-16T02:40:52.458Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="java" scheme="http://tech.nitaoge.com/categories/java/"/>
    
    
      <category term="看破Java" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Java/"/>
    
  </entry>
  
  <entry>
    <title>看破Jenkins 1.快速安装及使用</title>
    <link href="http://tech.nitaoge.com/p/17293ae1/"/>
    <id>http://tech.nitaoge.com/p/17293ae1/</id>
    <published>2019-03-22T12:06:26.000Z</published>
    <updated>2019-04-15T15:59:23.587Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="jenkins" scheme="http://tech.nitaoge.com/categories/jenkins/"/>
    
    
      <category term="看破Jenkins" scheme="http://tech.nitaoge.com/tags/%E7%9C%8B%E7%A0%B4Jenkins/"/>
    
  </entry>
  
</feed>
